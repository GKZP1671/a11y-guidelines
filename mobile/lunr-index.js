
var index = lunr(function () {
    this.use(lunr.fr);
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["contact.html#votre-avis-compte"] = "Votre avis compte";
index.add({
    url: "contact.html#votre-avis-compte",
    title: "Votre avis compte",    
    body: "# Votre avis compte    &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Contact\&quot;}]); });&lt;/script&gt;  Vous avez une remarque, une suggestion à apporter&amp;nbsp;?  Vérifiez que ceci n’a pas déjà été remonté par quelqu’un d’autre en consultant [la liste des «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;issues&lt;/i&gt;&amp;nbsp;»](https://github.com/Orange-OpenSource/a11y-guidelines/issues) sur notre compte github.   Si vous ne trouvez rien concernant votre remarque, [adressez-nous votre commentaire](https://github.com/Orange-OpenSource/a11y-guidelines/issues/new) via github.  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["about.html#a-propos"] = "À propos";
index.add({
    url: "about.html#a-propos",
    title: "À propos",    
    body: "# À propos     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;À propos\&quot;}]); });&lt;/script&gt;  Documentation sous [licence CC BY SA 3.0](https://github.com/Orange-OpenSource/a11y-guidelines/blob/master/LICENSE). Le code source de ce site ainsi que celui des exemples est disponible [sur notre compte github](https://github.com/Orange-OpenSource/a11y-guidelines).    Le logo Orange ainsi que certaines images et captures sont la propriété d'Orange&amp;nbsp;:    &lt;span lang=\&quot;en\&quot;&gt;Copyright (C) 2016 Orange SA All rights reserved&lt;/span&gt;   [Liste des fichiers concernés](/NOTICE.txt)  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android-dev.html#les-criteres-incontournables-sous-android-pour-le-developpement"] = "Les critères incontournables sous Android pour le développement";
index.add({
    url: "criteria-android-dev.html#les-criteres-incontournables-sous-android-pour-le-developpement",
    title: "Les critères incontournables sous Android pour le développement",    
    body: "# Les critères incontournables sous Android pour le développement  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Critères incontournables sous Android\&quot;, \&quot;url\&quot;: \&quot;./criteria-android.html\&quot;},         {\&quot;label\&quot;:\&quot;Pour le développement\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Pour le développement\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;, \&quot;expanded\&quot;: true}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différentes options d’accessibilité du SDK Android.  À travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d’accessibilité et propose des liens vers la documentation officielle de Google. Des exemples de codes sont aussi présents pour illustrer les propos.  "
});

documentTitles["criteria-android-dev.html#alternatives-textuelles"] = "Alternatives textuelles";
index.add({
    url: "criteria-android-dev.html#alternatives-textuelles",
    title: "Alternatives textuelles",    
    body: "## Alternatives textuelles **Description&amp;nbsp;: **    Sous Android, la vocalisation d’un élément s’effectue à travers un attribut, à savoir le `contentDescription`. Cet attribut qui accepte une simple chaîne de caractère en paramètre (et donc internationalisable) redéfinit complètement le texte qui sera lu par le service d’accessibilité et notamment &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Cela permet d’avoir un texte de composant plus explicite que celui affiché à l’écran. Par exemple, dans le cas d’un bouton dont le titre est «&amp;nbsp;OK&amp;nbsp;», on pourra indiquer que le bouton sert à valider un choix.    Le `contentDescription` doit aussi être utilisé sur les éléments &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; pour indiquer leur nature. Par exemple, un `LinearLayout` que l’on rendrait cliquable doit avoir un `contentDescription` de la forme «&amp;nbsp;nom_du_bouton, bouton&amp;nbsp;» (il faut également permettre le focus du bouton pour l’accessibilité, voir la section correspondante).    À noter que le `contentDescription` est disponible sous tout élément qui hérite de `View`. Il est donc possible de positionner un `contentDescription` sur une `TextView` par exemple, comme montré dans la section «&amp;nbsp;guide d’accessibilité – alternative textuelle – abréviations, dates et heures&amp;nbsp;».     **Exemples&amp;nbsp;: **     Exemple simple (internationalisé)&amp;nbsp;:   `myTextView.setContentDescription(getString(R.string.criteria_alt_ex1_cd_txt2));`  Indiquer l’état et la nature de TabHost (non internationalisé)&amp;nbsp;:   &lt;pre&gt;&lt;code&gt;private class TabHostListener implements TabHost.OnTabChangeListener { 	[...] 	public void onTabChanged(String tabId) {setContentDescription(mTabHost, mTabsLabel);} }  private void setContentDescription(TabHost mTabHost, String[] mTabsLabel) { 	int tab = mTabHost.getCurrentTab(); 	int tabCount = mTabHost.getTabWidget().getTabCount();  	for (int tabNumber = 0; tabNumber &lt; tabCount; tabNumber++) { 		CharSequence contentDescription = mTabsLabel[tabNumber];  		contentDescription = contentDescription + \&quot;, onglet \&quot; + (tabNumber + 1) + \&quot; sur \&quot; + tabCount; 		if (tabNumber == tab) { 			contentDescription = contentDescription + \&quot;, sélectionné\&quot;; 		} 		mTabHost.getTabWidget().getChildAt(tabNumber).setContentDescription(contentDescription); 	} }&lt;/code&gt;&lt;/pre&gt;  **Lien&amp;nbsp;: **  - [`contentDescription`](http://developer.android.com/reference/android/view/View.html#attr_android:contentDescription)     "
});

documentTitles["criteria-android-dev.html#masquer-des-elements-a-laccessibilite"] = "Masquer des éléments à l’accessibilité";
index.add({
    url: "criteria-android-dev.html#masquer-des-elements-a-laccessibilite",
    title: "Masquer des éléments à l’accessibilité",    
    body: "## Masquer des éléments à l’accessibilité    **Description&amp;nbsp;: **    Il est possible via un attribut d’accessibilité de masquer des éléments aux outils d’accessibilité (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; par exemple). Par extension, il est possible de forcer certains éléments à être visibles aux outils d’accessibilité.   `ImportantForAccessibility`&amp;nbsp;: suivant la valeur de l’attribut, cela permet d’indiquer qu’un élément est visible ou non de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité.   -	`auto` (0)&amp;nbsp;: valeur par défaut, c’est le système qui décide. Par exemple, un `Button` aura sa valeur par défaut à 1 (&lt;i lang=\&quot;en\&quot;&gt;yes&lt;/i&gt;) et un `LinearLayout` à 2 (&lt;i lang=\&quot;en\&quot;&gt;no&lt;/i&gt;). -	`yes` (1)&amp;nbsp;: la vue est importante pour l’accessibilité. Elle peut par exemple recevoir le focus de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. -	`no`(2)&amp;nbsp;: la vue n’est pas importante pour l’accessibilité. Elle ne déclenche plus d’événement d’accessibilité et est par conséquent ignorée par des services tel que &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. -	`noHideDescendants`  (4)&amp;nbsp;: la vue n’est pas importante pour l’accessibilité, mais également toutes ses vues filles. Cela permet de cacher tous les éléments d’une vue à l’accessibilité en une seule fois. Très utile sur les éléments custom.      À noter&amp;nbsp;: l’attribut «&amp;nbsp;`importantForAccessibility`&amp;nbsp;» est disponible pour tout élément qui hérite de `View`.  **Exemples&amp;nbsp;: **  Depuis le &lt;abbr&gt;xml&lt;/abbr&gt;&amp;nbsp;:  `android:importantForAccessibility=\&quot;no\&quot;`  Depuis le code&amp;nbsp;: `myView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS);`  **Lien&amp;nbsp;: **       - [`importantForAccessibility`](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility%28int%29)   "
});

documentTitles["criteria-android-dev.html#declencher-une-vocalisation"] = "Déclencher une vocalisation";
index.add({
    url: "criteria-android-dev.html#declencher-une-vocalisation",
    title: "Déclencher une vocalisation",    
    body: "## Déclencher une vocalisation  **Description&amp;nbsp;: **    Il est très facile de déclencher des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Déclencher une vocalisation est très utile dans le cas de contenu dynamique, au même titre que les `LiveRegion` (voir la section correspondante). Pour déclencher une vocalisation, il suffit de faire appel à la méthode `announceForAccessibility` en lui passant en paramètre l’`id` de la chaîne de caractères à vocaliser.    À noter&amp;nbsp;: la méthode `announceForAccessibility` est disponible sur tout élément qui hérite de `View` et se fait dans la langue du système.  Attention: nous parlons ici de vocalisation &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et non pas de &lt;abbr&gt;TTS&lt;/abbr&gt; (Text To Speech) qui peut fonctionner indépendamment du statut de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;.  **Exemple&amp;nbsp;: **  Il est fréquent de tester la version d’Android avant de déclencher une vocalisation &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. En effet, `announceForAccessibility` ne fonctionne que depuis l’arrivée d’Android &lt;i lang=\&quot;en\&quot;&gt;Jelly Bean&lt;/i&gt;. &lt;pre&gt;&lt;code&gt;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) { 	getView().announceForAccessibility(getString(R.string.criteria_contentchange_ex1_announce)); }&lt;/code&gt;&lt;/pre&gt;  **Lien&amp;nbsp;: **  - [`announceForAccessibility`](https://developer.android.com/reference/android/view/View.html#announceForAccessibility%28java.lang.CharSequence%29)   "
});

documentTitles["criteria-android-dev.html#detecter-si-span-langentalkbackspan-est-active"] = "Détecter si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé";
index.add({
    url: "criteria-android-dev.html#detecter-si-span-langentalkbackspan-est-active",
    title: "Détecter si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé",    
    body: "## Détecter si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé  **Description&amp;nbsp;: **   Sous Android, il est possible de savoir si l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité est activée, et par extension de savoir si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé.  **À l’usage&amp;nbsp;: **   &lt;pre&gt;&lt;code&gt;AccessibilityManager am = (AccessibilityManager) context.getSystemService(ACCESSIBILITY_SERVICE);   boolean isAccessibilityEnabled = am.isEnabled();&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-android-dev.html#regions-i-langenlivei-contenu-dynamique"] = "Régions &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt; (contenu dynamique)";
index.add({
    url: "criteria-android-dev.html#regions-i-langenlivei-contenu-dynamique",
    title: "Régions &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt; (contenu dynamique)",    
    body: "## Régions &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt; (contenu dynamique)  **Description&amp;nbsp;: **  Il est possible de spécifier à une vue qu’elle est une région «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;&amp;nbsp;», c’est-à-dire que son contenu est susceptible d’être modifié dynamiquement et qu’elle doit dans ce cas prévenir l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. Cela aura pour conséquence de générer des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Un exemple type d’utilisation&amp;nbsp;: sur un formulaire, si l’utilisateur fait une erreur et qu’un message d’erreur apparaît, la vue contenant le message doit être définie comme une région «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;&amp;nbsp;».  Il faut passer par la méthode `setAccessibilityLiveRegion` qui prend en paramètre un mode pour la région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;. Il existe 3 modes&amp;nbsp;:   -	`ACCESSIBILITY_LIVE_REGION_NONE`&amp;nbsp;: cette vue n’est pas une région «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;&amp;nbsp;». C’est la valeur par défaut de la plupart des vues. -	`ACCESSIBILITY_LIVE_REGION_POLITE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations sont effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;polies&amp;nbsp;»&amp;nbsp;: elles sont moins prioritaires que les vocalisations système par exemple. -	`ACCESSIBILITY_LIVE_REGION_ASSERTIVE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations seront effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;rude&lt;/i&gt;&amp;nbsp;»&amp;nbsp;: elles sont prioritaires et immédiatement vocalisées.    À noter&amp;nbsp;: la méthode `setAccessibilityLiveRegion` est disponible sur tout élément qui hérite de `View`.  **Exemples&amp;nbsp;: **  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView    [...]    android:accessibilityLiveRegion=\&quot;polite\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Lien&amp;nbsp;: **  - [`setAccessibilityLiveRegion`](https://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion%28int%29)   "
});

documentTitles["criteria-android-dev.html#gerer-lordre-de-lecture-span-langentalkbackspan"] = "Gérer l’ordre de lecture (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)";
index.add({
    url: "criteria-android-dev.html#gerer-lordre-de-lecture-span-langentalkbackspan",
    title: "Gérer l’ordre de lecture (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)",    
    body: "## Gérer l’ordre de lecture (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)  **Description&amp;nbsp;: **    L’ordre du focus de la synthèse vocale par défaut prend en compte plusieurs paramètres&amp;nbsp;: la lecture «&amp;nbsp;logique&amp;nbsp;», (en France) soit de gauche à droite et de haut en bas, et la lecture du &lt;abbr&gt;xml&lt;/abbr&gt; (ordre de déclaration des éléments). Il est tout à fait possible de redéfinir cet ordre de lecture avec deux outils&amp;nbsp;:   -	`accessibilityTraversalAfter`&amp;nbsp;: prend un id en paramètre et permet de spécifier à la vue qu’elle doit être décrite par l’accessibilité après la vue passée en paramètre. - `accessibilityTraversalBefore`&amp;nbsp;: prend un id en paramètre et permet de spécifier à la vue qu’elle doit être décrite par l’accessibilité avant la vue passée en paramètre.  À noter&amp;nbsp;: ces attributs peuvent être utilisés directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; mais également dans le code via les méthodes `setAccessibilityTraversalAfter` et `setAccessibilityTraversalBefore`. Ces méthodes sont disponibles pour tout élément qui hérite de `View`.  **Exemple&amp;nbsp;: **   &lt;pre&gt;&lt;code&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); chaineplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); chainemoinsButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.chaineplus).getId());&lt;/code&gt;&lt;/pre&gt;  **Liens&amp;nbsp;: **        - [`setAccessibilityTraversalAfter`](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalAfter%28int%29) - [`setAccessibilityTraversalBefore`](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalBefore%28int%29)   "
});

documentTitles["criteria-android-dev.html#formulaires"] = "Formulaires";
index.add({
    url: "criteria-android-dev.html#formulaires",
    title: "Formulaires",    
    body: "## Formulaires  **Description&amp;nbsp;: **    Il est important que les champs de formulaire soient liés à un label. Il existe 2 grandes techniques pour réaliser cette liaison&amp;nbsp;: -	`labelFor`&amp;nbsp;: permet de spécifier à une vue qu’elle est le label d’une autre vue. Cette méthode prend en paramètre l’`id` de la vue que l’on labellise. On peut utiliser cette méthode avec quasiment tout type de champ de formulaire. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:labelFor` ou le code `setLabelFor`. `LabelFor` est utilisable depuis tout élément qui hérite de `View`. - `hint`&amp;nbsp;: pour les `EditText` ou `TextView`. Permet d’ajouter un texte d’exemple quand le champ de texte est vide. Cette méthode ne marche que pour les `TextView`. Prend en paramètre l’`id` d’une chaîne de caractère. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:hint` ou le code `setHint`.  **Exemples&amp;nbsp;: **  `LabelFor` dans le &lt;abbr&gt;xml&lt;/abbr&gt;&amp;nbsp;:  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView 	[...]   android:labelFor=\&quot;@+id/imageView11\&quot;   android:importantForAccessibility=\&quot;no\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  Remarque&amp;nbsp;: il est très fréquent, une fois le label lié à son champ, de masquer le label à l’accessibilité. En effet, celui ci n’a plus besoin d’être reconnu par l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité car son champ de formulaire l’utilise déjà (et sera donc restitué vocalement par &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; par exemple).  `Hint` dans le &lt;abbr&gt;xml&lt;/abbr&gt;&amp;nbsp;: &lt;pre&gt;&lt;code&gt;&amp;lt;EditText   [...]    android:hint=\&quot;@string/criteria_form_ex1_placeholder\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Liens&amp;nbsp;: **  - [`setLabelFor`](https://developer.android.com/reference/android/view/View.html#setLabelFor%28int%29) - [`setHint`](https://developer.android.com/reference/android/widget/TextView.html#setHint%28java.lang.CharSequence%29)   "
});

documentTitles["criteria-android-dev.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-android-dev.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes  **Description&amp;nbsp;: **    Afin de permettre à l’option «&amp;nbsp;grands caractères&amp;nbsp;» d’interagir correctement avec l’application, plusieurs points sont à respecter durant les développements. - Utiliser une taille de police dynamique&amp;nbsp;: le «&amp;nbsp;sp&amp;nbsp;». Cette unité, spécifique à Android, permet d’obtenir une taille de police en fonction de la densité de pixel de l’écran. Il est plus que recommandé de l’utiliser, ne serait-ce que pour obtenir un design uniforme sur tous les types de &lt;i lang=\&quot;en\&quot;&gt;devices&lt;/i&gt; Android. - Gérer les débordements de contenu&amp;nbsp;: une erreur courante est d’utiliser une taille de texte dynamique («&amp;nbsp;sp&amp;nbsp;» donc) mais de ne pas faire attention au conteneur. Si le texte grossit, le conteneur doit en faire autant pour ne pas qu’il y ait de débordement. On peut parfaitement jouer avec le `min-height` et le `height` des conteneurs pour obtenir un résultat correct (un `height` en `wrap_content` permet de laisser au système le soin de s’adapter).  **Lien&amp;nbsp;: **  - [typographie sous Android](https://www.google.com/design/spec/style/typography.html#typography-styles)      "
});

documentTitles["criteria-android-dev.html#evenements-daccessibilite-i-langencustom-viewsi"] = "Événements d’accessibilité &amp; &lt;i lang=\&quot;en\&quot;&gt;custom views&lt;/i&gt;";
index.add({
    url: "criteria-android-dev.html#evenements-daccessibilite-i-langencustom-viewsi",
    title: "Événements d’accessibilité &amp; &lt;i lang=\&quot;en\&quot;&gt;custom views&lt;/i&gt;",    
    body: "## Événements d’accessibilité &amp; &lt;i lang=\&quot;en\&quot;&gt;custom views&lt;/i&gt;  **Description&amp;nbsp;: **   Il existe sous Android un bon nombre d’événements liés à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. Vous pouvez manipuler ces événements au même titre que d’autres événements. Ils permettent d’enrichir des composants &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; insuffisamment accessibles. L’utilisation des événements d’accessibilité est assez rare dans les applications non dédiées à l’accessibilité, les autres options étant généralement suffisantes. Cependant, il faut savoir qu’ils existent et permettent de surcharger la vocalisation d’un composant.    Pour plus d’informations, nous vous invitons à regarder les liens ci-dessous.  **Exemple&amp;nbsp;: **  Dans cet exemple, on intercepte les événements d’accessibilité. En fonction de leur type (un texte a changé dans la vue ou &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; a mis le focus sur le composant), nous construisons une vocalisation à destination de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. &lt;pre&gt;&lt;code&gt;@Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {    boolean result = super.dispatchPopulateAccessibilityEvent(event);    // Detect what type of accessibility event is being passed in.   int eventType = event.getEventType();    // Common case: The user has interacted with our view in some way. State may or may not have been changed. Read out the current status of the view.   if (eventType == AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED) {     event.getText().clear();     event.getText().add(\&quot;Valeur de la cagnotte&amp;nbsp;: \&quot; + getBankValue() + \&quot;.\&quot;);     result = true;   }    // When a user first focuses on our view, we’ll also read out some simple instructions to make it clear that this is an interactive element.   if (eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {     event.getText().add(\&quot;Cliquez pour lancer la roue et augmenter vos gains.\&quot;);     result = true;   }    return result; }&lt;/code&gt;&lt;/pre&gt;  **Liens&amp;nbsp;: **  - [`AccessibilityEvents`](http://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html) - [Construire une vue custom accessible](http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views)     "
});

documentTitles["criteria-android-dev.html#i-langenwebviewi"] = "&lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt;";
index.add({
    url: "criteria-android-dev.html#i-langenwebviewi",
    title: "&lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt;",    
    body: "## &lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt;  **Description&amp;nbsp;: **   Les `WebView` ont un traitement un peu particulier sous Android. Pour commencer, si on veut qu’une page soit accessible, il faut que le contenu HTML le soit, à savoir qu’il respecte les normes internationales sur le sujet&amp;nbsp;: les WCAG2. Pour connaître ces règles et apprendre les techniques de développement pour un web accessible, nous vous invitons à visiter la section de notre site consacrée au sujet&amp;nbsp;: [recommandations accessibilité pour le web](../web/index.html).    Côté Android, il faut s’assurer que la &lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt; autorise le JavaScript&amp;nbsp;: `mWebView.getSettings.setJavaScriptEnabled(true);`   Dans ces conditions, la page affichée à travers la `WebView`  réagit convenablement à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité.    "
});

documentTitles["criteria-android-dev.html#vocalisation-des-listes"] = "Vocalisation des listes";
index.add({
    url: "criteria-android-dev.html#vocalisation-des-listes",
    title: "Vocalisation des listes",    
    body: "## Vocalisation des listes  **Description&amp;nbsp;: **   Il arrive parfois que les listes soient mal vocalisées&amp;nbsp;: la synthèse vocale tente de vocaliser toute la liste en une seule fois (au moins ce qui est affiché à l’écran dans le cas de listes longues). C’est notamment le cas lorsque l’on utilise des `RecyclerView`. Pour pallier ce problème, une solution simple existe. Il suffit de positionner l’attribut `focusable` à `true` pour chaque item de la liste. Cela a pour effet de forcer la synthèse vocale (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;) à lire les items un par un.   "
});

documentTitles["criteria-android-dev.html#navigation-au-focus-clavier"] = "Navigation au focus (clavier)";
index.add({
    url: "criteria-android-dev.html#navigation-au-focus-clavier",
    title: "Navigation au focus (clavier)",    
    body: "## Navigation au focus (clavier)  **Description&amp;nbsp;: **  Pour gérer la navigation au focus, il faut s’assurer de 3 choses&amp;nbsp;: - Permettre le focus sur les éléments interactifs&amp;nbsp;: la navigation au focus ne concerne que les éléments interactifs. Si, par exemple, votre application possède des vues &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; cliquables, il faut s’assurer que ces vues soient focusables en positionnant l’attribut `focusable` à `true`. - Gérer l’affichage du focus&amp;nbsp;: tout élément interactif peut recevoir le focus, il faut donc que le `state_focused` soit défini et permette de distinguer d’un seul coup d’œil quel élément a le focus. - Gérer l’ordre du focus&amp;nbsp;: à travers les options `nextFocusDown`, `nextFocusUp`, `nextFocusRight` et `nextFocusLeft`, vous pouvez spécifier quelle vue doit prendre le focus selon l’utilisation des flèches bas, haut, droit et gauche.    La plupart du temps, seuls les point 1 et 2 sont à prendre la compte. En effet, le système Android est capable de déterminer assez précisément les positions des éléments les uns par rapport aux autres et donc de fournir un ordre de lecture au clavier logique et cohérent.  À noter&amp;nbsp;: `nextFocusDown`, `nextFocusUp`, `nextFocusRight`, `nextFocusLeft`, `focusable` ainsi que d’autres options de gestion du focus sont accessibles directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; ou dans le code à travers les méthodes correspondantes.  **Exemple&amp;nbsp;: **  Exemple de sélecteur pour `TabHost` qui prend en compte l’état `state_focused` : &lt;pre&gt;&lt;code&gt;&amp;lt;selector xmlns:android=\&quot;http://schemas.android.com/apk/res/android\&quot;&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_unselected_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_selected_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_unselected_focused_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_selected_focused_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Pressed --&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_unselected_pressed_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_selected_pressed_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_unselected_pressed_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_selected_pressed_tab_selector\&quot; /&amp;gt; &amp;lt;/selector&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Lien&amp;nbsp;: **  - [Gestion du focus sous Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav)  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-dev.html#les-criteres-incontournables-sous-ios-pour-le-developpement"] = "Les critères incontournables sous iOS pour le développement";
index.add({
    url: "criteria-ios-dev.html#les-criteres-incontournables-sous-ios-pour-le-developpement",
    title: "Les critères incontournables sous iOS pour le développement",    
    body: "# Les critères incontournables sous iOS pour le développement  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Les critères incontournables sous iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;Pour le développement\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Pour le développement\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;, \&quot;expanded\&quot;: true}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différentes options du &lt;abbr&gt;SDK&lt;/abbr&gt; d’accessibilité sous iOS 11 en associant&amp;nbsp;: - Des explications détaillées concernant les attributs et méthodes d'accessibilité. - Des exemples de code en Swift 4 et en Objective C.  &lt;/br&gt;... et des liens vers la [`documentation officielle d'Apple`](https://developer.apple.com/documentation/uikit/accessibility).  "
});

documentTitles["criteria-ios-dev.html#alternatives-textuelles"] = "Alternatives textuelles";
index.add({
    url: "criteria-ios-dev.html#alternatives-textuelles",
    title: "Alternatives textuelles",    
    body: "## Alternatives textuelles "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Sous iOS, la vocalisation d’un élément s’effectue à travers 4 attributs&amp;nbsp;: `label`, `hint`, `value` et `trait`.   L’ordre de vocalisation est toujours le même (`label`, `value`, `trait` et `hint`), il ne peut pas être changé et la vocalisation est réalisée en une seule fois à l’arrivée sur l’élément.    Une section de ce guide étant dédiée au `trait`, nous décrivons ici les 3 autres attributs&amp;nbsp;:   - **accessibilityLabel**&amp;nbsp;: le label permet de préciser le titre spécifique à l’accessibilité qui est lu par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; en lieu et place du texte du composant si celui-ci en possède un, ce qui permet d’avoir un texte de composant plus explicite que celui affiché à l’écran. &lt;/br&gt;Par exemple, dans le cas d’un bouton dont le titre est « OK », on peut indiquer que le bouton sert à valider un choix. - **accessibilityValue**&amp;nbsp;: la valeur d’un élément est, par défaut, le pourcentage de progression. &lt;/br&gt;À noter que, pour la plupart des éléments ajustables disponibles dans le &lt;abbr&gt;SDK&lt;/abbr&gt;, cette `value` n’a pas besoin d’être précisée car le système restitue automatiquement la valeur à l’utilisateur via &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. - **accessibilityHint**&amp;nbsp;: le `hint` permet de décrire le comportement du composant en incorporant des explications supplémentaires. &lt;/br&gt;Exemple&amp;nbsp;: «&amp;nbsp;cliquez pour obtenir le résultat&amp;nbsp;».    Ces attributs sont disponibles via l’&lt;i lang=\&quot;en\&quot;&gt;interface builder&lt;/i&gt; de Xcode mais également accessibles en programmation. &lt;/br&gt;Tout élément dérivant de `UIView` possède ces attributs qui acceptent une chaîne de caractère les rendant subséquemment internationalisables. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple   &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface ChangeTextView() {          __weak IBOutlet UILabel * monLabel;     __weak IBOutlet UIProgressView * maProgressView; } @end  @implementation ChangeTextView  - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          monLabel.accessibilityLabel = @\&quot;bonjour\&quot;;     monLabel.accessibilityHint = @\&quot;Ceci est un commentaire supplémentaire.\&quot;;          maProgressView.accessibilityValue = @\&quot;45 pour cent\&quot;; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ChangeTextView: UIViewController {      @IBOutlet weak var monLabel: UILabel!     @IBOutlet weak var maProgressView: UIProgressView!          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  monLabel.accessibilityLabel = \&quot;bonjour\&quot;         monLabel.accessibilityHint = \&quot;Ceci est un commentaire supplémentaire.\&quot;                  maProgressView.accessibilityValue = \&quot;45 pour cent\&quot;              } } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`accessibilityLabel`](https://developer.apple.com/documentation/objectivec/nsobject/1615181-accessibilitylabel) - [`accessibilityValue`](https://developer.apple.com/documentation/objectivec/nsobject/1615117-accessibilityvalue) - [`accessibilityHint`](https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint)  "
});

documentTitles["criteria-ios-dev.html#nature-des-elements"] = "Nature des éléments";
index.add({
    url: "criteria-ios-dev.html#nature-des-elements",
    title: "Nature des éléments",    
    body: "## Nature des éléments "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description L’attribut `accessibilityTraits` permet de donner une information à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité sur la nature d’un composant. &lt;/br&gt;On peut décider ainsi qu’un item de liste soit pris en compte comme un bouton par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; car celui-ci est cliquable. &lt;/br&gt;De ce fait, l’`accessibilityTrait` joue également sur la vocalisation de l’élément car cette nature est restituée par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;.     Cet attribut d’accessibilité est disponible via l’&lt;i lang=\&quot;en\&quot;&gt;interface builder&lt;/i&gt; de Xcode mais également utilisable directement via le code.    Il existe beaucoup de traits dont les principaux sont fournis ci-dessous&amp;nbsp;:   - **accessibilityTraitNone**&amp;nbsp;: supprime toute valeur sémantique à l’élément. - **accessibilityTraitButton**&amp;nbsp;: ajoute le trait «&amp;nbsp;bouton&amp;nbsp;», l’élément est vu comme un bouton par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. - **accessibilityTraitLink**&amp;nbsp;: utile pour définir un label en tant que «&amp;nbsp;lien&amp;nbsp;». - **accessibilityTraitHeader**&amp;nbsp;: permet de définir un élément comme un en-tête (voir la section &lt;a href=\&quot;criteria-ios-conception.html#titre-et-en-t-te\&quot;&gt;«&amp;nbsp;titre et en-tête&amp;nbsp;»&lt;/a&gt;). - **accessibilityTraitAdjustable**&amp;nbsp;: permet de définir un élément comme un élément «&amp;nbsp;ajustable&amp;nbsp;», c’est-à-dire un élément dont la valeur instantanée peut être modifiée via un &lt;a href=\&quot;https://help.apple.com/iphone/9/#/iph3e2e2281\&quot;&gt;geste spécifique&lt;/a&gt; de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)customTraits() {     //Spécification d'un UIPageControl avec le trait ’ajustable’.     pageControl.accessibilityTraits = UIAccessibilityTraitAdjustable;          //Ajout d'un en-tête.       defaultHeaderViewCell.accessibilityTraits = UIAccessibilityTraitHeader;      //Combinaison possible de plusieurs traits.       onePageButton.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; func customTraits() {     //Spécification d'un UIPageControl avec le trait ’ajustable’.     pageControl.accessibilityTraits = UIAccessibilityTraitAdjustable          //Ajout d'un en-tête.      defaultHeaderViewCell.accessibilityTraits = UIAccessibilityTraitHeader      //Combinaison possible de plusieurs traits.      onePageButton.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien - [`accessibilityTraits`](https://developer.apple.com/documentation/objectivec/nsobject/1615202-accessibilitytraits)  "
});

documentTitles["criteria-ios-dev.html#masquer-des-elements-a-laccessibilite"] = "Masquer des éléments à l’accessibilité";
index.add({
    url: "criteria-ios-dev.html#masquer-des-elements-a-laccessibilite",
    title: "Masquer des éléments à l’accessibilité",    
    body: "## Masquer des éléments à l’accessibilité   "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Il est possible de masquer des éléments aux outils d’accessibilité grâce aux attributs d’accessibilité mais aussi de forcer certains éléments à être visibles pour les outils d’accessibilité uniquement.      - **isAccessibilityElement**&amp;nbsp;: booléen qui permet d’indiquer qu’un élément est visible ou non de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité (de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; ou autre). - **accessibilityElementsHidden**&amp;nbsp;: booléen qui permet d’indiquer que les éléments fils de l’élément cible sont visibles ou non de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. - **accessibilityViewIsModal**&amp;nbsp;: booléen qui permet de rendre visible ou non les éléments frères de l’élément cible à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. &lt;/br&gt;Très utile pour rendre accessible des &lt;i lang=\&quot;en\&quot;&gt;popin custom view&lt;/i&gt; par exemple.      L’attribut `accessibilityElement` est disponible via l’&lt;i lang=\&quot;en\&quot;&gt;interface builder&lt;/i&gt; de Xcode mais est également utilisable directement via le code. &lt;/br&gt;Les deux autres attributs sont utilisables uniquement via le code. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple L'idée est de créer un carré rouge qui va contenir 2 autres carrés (bleu et jaune) pour appliquer les attributs définis précedémment. &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/MasquerDesElements_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Création d'un élément père dans lequel 2 autres éléments fils vont être insérés.     CGRect parentViewRect = CGRectMake(100.0, 100.0, 40.0, 40.0);     UIView * myParentView = [[UIView alloc]initWithFrame:parentViewRect];     myParentView.backgroundColor = [UIColor redColor];          [UIApplication.sharedApplication.keyWindow addSubview:myParentView];          //L'élément père ne doit pas être accessible pour servir de conteneur à ses enfants.     //Si la valeur est à 'YES', seul cet élément sera accessible sans ses enfants.     myParentView.isAccessibilityElement = NO;          //Indication du conteneur que ses enfants peuvent ne pas être accessibles même s'ils sont définis comme tels.     //Si cette valeur est à 'NO' et la précedénte à 'NO', seuls ces élements seront accessibles.     myParentView.accessibilityElementsHidden = NO;          [self createViewWithColor:[UIColor yellowColor]                         inside:myParentView];     [self createViewWithColor:[UIColor blueColor]                         inside:myParentView]; }  - (void)createViewWithColor:(UIColor*)color                      inside:(UIView*)parentView {          float delta = (color == [UIColor yellowColor]) ? 0.0 : 20.0;          CGRect rect = CGRectMake(10.0 + delta, 10.0 + delta, 10.0, 10.0);     UIView * theView = [[UIView alloc]initWithFrame:rect];     theView.backgroundColor = color;          [parentView addSubview:theView];          theView.isAccessibilityElement = YES; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Création d'un élément père dans lequel 2 autres éléments fils vont être insérés.         let parentViewRect = CGRect.init(x: 100.0,                                          y: 100.0,                                          width: 40.0,                                          height: 40.0)         let myParentView = UIView.init(frame: parentViewRect)         myParentView.backgroundColor = .red                  UIApplication.shared.keyWindow?.addSubview(myParentView)                  //L'élément père ne doit pas être accessible pour servir de conteneur à ses enfants.         //Si la valeur est à 'true', seul cet élément sera accessible sans ses enfants.         myParentView.isAccessibilityElement = false                  //Indication du conteneur que ses enfants peuvent ne pas être accessibles même s'ils sont définis comme tels.         //Si cette valeur est à 'false' et la précedénte à 'false', seuls ces élements seront accessibles.         myParentView.accessibilityElementsHidden = false                  self.createViewWithColor(.yellow, inside: myParentView)         self.createViewWithColor(.blue, inside: myParentView)     }          func createViewWithColor(_ color:UIColor, inside parentView:UIView) {                  let delta:CGFloat = ((color == .yellow) ? 0.0 : 20.0)         let rect = CGRect.init(x: 10.0 + delta,                                y: 10.0 + delta,                                width: 10.0,                                height: 10.0)                  let theView = UIView.init(frame: rect)         theView.backgroundColor = color                  parentView.addSubview(theView)                  theView.isAccessibilityElement = true     } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens      - [`isAccessibilityElement`](https://developer.apple.com/documentation/objectivec/nsobject/1615141-isaccessibilityelement) - [`accessibilityElementsHidden`](https://developer.apple.com/documentation/objectivec/nsobject/1615080-accessibilityelementshidden) - [`accessibilityViewIsModal`](https://developer.apple.com/documentation/objectivec/nsobject/1615089-accessibilityviewismodal)  "
});

documentTitles["criteria-ios-dev.html#declencher-une-vocalisation"] = "Déclencher une vocalisation";
index.add({
    url: "criteria-ios-dev.html#declencher-une-vocalisation",
    title: "Déclencher une vocalisation",    
    body: "## Déclencher une vocalisation "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Il est très facile de déclencher des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Attention, nous parlons de vocalisation avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; (ce qui implique que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; soit activé) et pas de &lt;abbr&gt;TTS&lt;/abbr&gt; (&lt;span lang=\&quot;en\&quot;&gt;Text To Speech&lt;/span&gt;) qui fonctionne indépendamment de l’activation ou non de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;/br&gt;Pour déclencher une vocalisation qui se fera dans la langue du système, il faut envoyer une notification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode **UIAccessibilityPostNotification** avec en paramètres la notification permettant de déclencher une vocalisation **UIAccessibilityAnnouncementNotification** et la chaîne de caractères à vocaliser. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, @\&quot;Message pour la vocalisation.\&quot;); &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, \&quot;Message pour la vocalisation.\&quot;) &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`UIAccessibilityPostNotification`](https://developer.apple.com/documentation/uikit/1615194-uiaccessibilitypostnotification) - [`UIAccessibilityAnnouncementNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilityannouncementnotification)   "
});

documentTitles["criteria-ios-dev.html#connaitre-letat-des-options-daccessibilite"] = "Connaître l’état des options d’accessibilité";
index.add({
    url: "criteria-ios-dev.html#connaitre-letat-des-options-daccessibilite",
    title: "Connaître l’état des options d’accessibilité",    
    body: "## Connaître l’état des options d’accessibilité "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Est-ce que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé&amp;nbsp;? Est-ce que le mode audio-mono est activé&amp;nbsp;? &lt;/br&gt;Plusieurs fonctions du &lt;span lang=\&quot;en\&quot;&gt;framework&lt;/span&gt; `UIKit` permettent de connaître les statuts de ces options d'accessibilité.  &lt;/br&gt;La plus utile est certainement celle qui permet de savoir si &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé au moment de l’appel (**UIAccessibilityIsVoiceOverRunning**).  &lt;/br&gt;&lt;/br&gt;D'autres fonctions, peut-être moins utiles à première vue, sont fournies dans les liens ci-après. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     BOOL isVoiveOverRunning = (UIAccessibilityIsVoiceOverRunning() ? 1 : 0);     BOOL isSwitchControlRunning = (UIAccessibilityIsSwitchControlRunning() ? 1 : 0);          NSLog(@\&quot;VoiceOver vaut %d et SwitchControl vaut %d.\&quot;, isVoiveOverRunning, isSwitchControlRunning); &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let isVoiceOverRunning = (UIAccessibilityIsVoiceOverRunning() ? 1 : 0)     let isSwitchControlRunning = (UIAccessibilityIsSwitchControlRunning() ? 1 : 0)              print(\&quot;VoiceOver vaut \(isVoiceOverRunning) et SwichControl vaut \(isSwitchControlRunning).\&quot;) &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`UIAccessibilityDarkerSystemColorsEnabled`](https://developer.apple.com/documentation/uikit/1615087-uiaccessibilitydarkersystemcolor) - [`UIAccessibilityIsAssistiveTouchRunning`](https://developer.apple.com/documentation/uikit/1648479-uiaccessibilityisassistivetouchr) - [`UIAccessibilityIsBoldTextEnabled`](https://developer.apple.com/documentation/uikit/1615156-uiaccessibilityisboldtextenabled) - [`UIAccessibilityIsClosedCaptioningEnabled`](https://developer.apple.com/documentation/uikit/1615112-uiaccessibilityisclosedcaptionin) - [`UIAccessibilityIsGrayscaleEnabled`](https://developer.apple.com/documentation/uikit/1615189-uiaccessibilityisgrayscaleenable) - [`UIAccessibilityIsGuidedAccessEnabled`](https://developer.apple.com/documentation/uikit/1615173-uiaccessibilityisguidedaccessena) - [`UIAccessibilityIsInvertColorsEnabled`](https://developer.apple.com/documentation/uikit/1615167-uiaccessibilityisinvertcolorsena) - [`UIAccessibilityIsMonoAudioEnabled`](https://developer.apple.com/documentation/uikit/1615123-uiaccessibilityismonoaudioenable) - [`UIAccessibilityIsReduceMotionEnabled`](https://developer.apple.com/documentation/uikit/1615133-uiaccessibilityisreducemotionena) - [`UIAccessibilityIsReduceTransparencyEnabled`](https://developer.apple.com/documentation/uikit/1615074-uiaccessibilityisreducetranspare) - [`UIAccessibilityIsShakeToUndoEnabled`](https://developer.apple.com/documentation/uikit/1615103-uiaccessibilityisshaketoundoenab) - [`UIAccessibilityIsSpeakScreenEnabled`](https://developer.apple.com/documentation/uikit/1615109-uiaccessibilityisspeakscreenenab) - [`UIAccessibilityIsSpeakSelectionEnabled`](https://developer.apple.com/documentation/uikit/1615154-uiaccessibilityisspeakselectione) - [`UIAccessibilityIsSwitchControlRunning`](https://developer.apple.com/documentation/uikit/1615131-uiaccessibilityisswitchcontrolru) - [`UIAccessibilityIsVoiceOverRunning`](https://developer.apple.com/documentation/uikit/1615187-uiaccessibilityisvoiceoverrunnin)  "
});

documentTitles["criteria-ios-dev.html#informer-dune-modification-sur-la-page"] = "Informer d’une modification sur la page";
index.add({
    url: "criteria-ios-dev.html#informer-dune-modification-sur-la-page",
    title: "Informer d’une modification sur la page",    
    body: "## Informer d’une modification sur la page "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Lors d’un changement de contenu sur une page, il est possible de notifier l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité de ce changement à travers différentes notifications. &lt;/br&gt;Pour ce faire, il faut envoyer une notification de modification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode **UIAccessibilityPostNotification**.   &lt;/br&gt;Il existe plusieurs notifications de modification, mais les deux plus utiles sont&amp;nbsp;: - **UIAccessibilityLayoutChangedNotification**&amp;nbsp;: permet de spécifier à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité qu’une partie de la page a été modifiée et doit être accompagné d'un `NSString` ou d'un `UIObject`. &lt;/br&gt;Avec un `NSString`, la notification se comporte comme une **UIAccessibilityAnnouncementNotification** et lance une vocalisation &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Avec un `UIObject`, le focus est repositionné sur l’élément précisé. &lt;/br&gt;Cette notification est très similaire à **UIAccessibilityAnnouncementNotification** mais son utilisation doit être mise en avant dès lors qu'une modification dynamique du contenu se produit. - **UIAccessibilityScreenChangedNotification**&amp;nbsp;: permet d’annoncer un changement global de la page et accepte soit `nil`, soit l’élément qui doit recevoir le focus. &lt;/br&gt;Avec `nil`, la notification vocalise et sélectionne le premier élément accessible de la page. &lt;/br&gt;Avec un `UIObject`, le focus est repositionné sur l’élément précisé en lançant une vocalisation &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Le son utilisé pour notifier la modification est similaire à l'arrivée d'une nouvelle page. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; //L'élément 'myLabel' est sélectionné et vocalisé avec sa nouvelle valeur. - (IBAction)tapHere:(UIButton *)sender {          myLabel.accessibilityLabel = @\&quot;Ceci est un nouveau label.\&quot;;     UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); }  //Le premier élément accessible de la page est sélectioné et vocalisé avec un son spécifique. - (IBAction)clic:(UIButton *)sender {          UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, nil); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; //L'élément 'myLabel' est sélectionné et vocalisé avec sa nouvelle valeur. @IBAction func clicHere(_ sender: UIButton) {              myLabel.accessibilityLabel = \&quot;Ceci est un nouveau label.\&quot;     UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel) }      //Le premier élément accessible de la page est sélectioné et vocalisé avec un son spécifique. @IBAction func clic(_ sender: UIButton) {              UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, mySecondLabel) } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`UIAccessibilityPostNotification`](https://developer.apple.com/documentation/uikit/1615194-uiaccessibilitypostnotification) - [`UIAccessibilityLayoutChangedNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilitylayoutchangednotification) - [`UIAccessibilityScreenChangedNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilityscreenchangednotification) - [`UIAccessibilityPageScrolledNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilitypagescrollednotification)  "
});

documentTitles["criteria-ios-dev.html#modifier-la-langue-de-vocalisation"] = "Modifier la langue de vocalisation";
index.add({
    url: "criteria-ios-dev.html#modifier-la-langue-de-vocalisation",
    title: "Modifier la langue de vocalisation",    
    body: "## Modifier la langue de vocalisation "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Afin de modifier la langue de prononciation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; pour un mot ou un texte, il existe l’attribut **accessibilityLanguage**&amp;nbsp;. &lt;/br&gt;Disponible via le protocole `UIAccessibility`, cet attribut permet de redéfinir la langue de prononciation d’un texte. &lt;/br&gt;Par exemple, si on utilise cet attribut sur un `UILabel`, alors celui-ci sera vocalisé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; dans la nouvelle langue donnée en valeur de l’attribut.&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (IBAction)tapHere:(UIButton *)sender {          myLabel.accessibilityLanguage = @\&quot;en\&quot;;     myLabel.accessibilityLabel = @\&quot;This is a new label. Thank you.\&quot;;     UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; @IBAction func tapHere(_ sender: UIButton) {              myLabel.accessibilityLanguage = \&quot;en\&quot;     myLabel.accessibilityLabel = \&quot;This is a new label. Thank you.\&quot;     UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel) } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien - [`accessibilityLanguage`](https://developer.apple.com/documentation/objectivec/nsobject/1615192-accessibilitylanguage)  "
});

documentTitles["criteria-ios-dev.html#modifier-la-zone-de-focus-de-span-langenvoiceoverspan"] = "Modifier la zone de focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;";
index.add({
    url: "criteria-ios-dev.html#modifier-la-zone-de-focus-de-span-langenvoiceoverspan",
    title: "Modifier la zone de focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;",    
    body: "## Modifier la zone de focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Dans le cas d’objet modifié dynamiquement ou d’élément ne dérivant pas de `UIView`, il est possible de déterminer la zone géographique d’accessibilité de cet élément, c’est-à-dire la zone que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; met en surbrillance lors du focus.    - **accessibilityFrame**&amp;nbsp;: permet de définir cette zone via un rectangle (`CGRect`). &lt;/br&gt;Par défaut pour un élément dérivant de `UIView`, cette zone est la partie «&amp;nbsp;visible&amp;nbsp;» de la vue. - **accessibilityPath**&amp;nbsp;: équivalent à `AccessibilityFrame` mais permet de définir la zone via des courbes de Bézier. - **accessibilityActivationPoint**&amp;nbsp;: le «&amp;nbsp;point&amp;nbsp;» d’activation d’un élément pour les outils d’accessibilité. &lt;/br&gt;Par défaut, ce point est au centre de l’élément. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ModifierLaZoneDeFocus_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; float xVal; float yVal; float widthVal; float heightVal;      - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          xVal = myLabel.accessibilityFrame.origin.x;     yVal = myLabel.accessibilityFrame.origin.y;     widthVal = myLabel.accessibilityFrame.size.width;     heightVal = myLabel.accessibilityFrame.size.height;      }  //Première façon d'augmenter la zone de focus. - (IBAction)tapHere:(UIButton *)sender {          myLabel.accessibilityFrame = CGRectMake(xVal,                                             yVal,                                             widthVal + 100.0,                                             heightVal+ 100.0);          UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); }  //Seconde façon d'augmenter la zone de focus (Bézier). - (IBAction)clic:(UIButton *)sender {          UIBezierPath * bezierPath = [UIBezierPath bezierPath];          [bezierPath moveToPoint:CGPointMake(xVal, yVal)];          [bezierPath addLineToPoint:CGPointMake(xVal + widthVal + 100.0,                                             yVal)];     [bezierPath addLineToPoint:CGPointMake(xVal + widthVal + 100.0,                                             yVal + heightVal+ 100.0)];     [bezierPath addLineToPoint:CGPointMake(xVal,                                             yVal + heightVal+ 100.0)];     [bezierPath closePath];          myLabel.accessibilityPath = bezierPath;          UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     var xVal: CGFloat = 0.0     var yVal: CGFloat = 0.0     var widthVal: CGFloat = 0.0     var heightVal: CGFloat = 0.0          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  xVal = myLabel.accessibilityFrame.origin.x;         yVal = myLabel.accessibilityFrame.origin.y;         widthVal = myLabel.accessibilityFrame.size.width;         heightVal = myLabel.accessibilityFrame.size.height;     }          //Première façon d'augmenter la zone de focus.     @IBAction func clicHere(_ sender: UIButton) {                  myLabel.accessibilityFrame = CGRect.init(x: xVal,                                                  y: yVal,                                                  width: widthVal + 100.0,                                                  height: heightVal + 100.0)                  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel)     }          //Seconde façon d'augmenter la zone de focus (Bézier).     @IBAction func clic(_ sender: UIButton) {                  let bezierPath = UIBezierPath.init()                  bezierPath.move(to: CGPoint.init(x: xVal, y: yVal))                  bezierPath.addLine(to: CGPoint.init(x: xVal + widthVal + 100.0,                                             y: yVal))         bezierPath.addLine(to: CGPoint.init(x: xVal + widthVal + 100.0,                                             y: yVal + heightVal + 100.0))         bezierPath.addLine(to: CGPoint.init(x: xVal,                                             y: yVal + heightVal + 100.0))         bezierPath.close()                  myLabel.accessibilityPath = bezierPath                  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, myLabel)     } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`accessibilityFrame`](https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619579-accessibilityframe) - [`accessibilityPath`](https://developer.apple.com/documentation/objectivec/nsobject/1615159-accessibilitypath) - [`accessibilityActivationPoint`](https://developer.apple.com/documentation/objectivec/nsobject/1615179-accessibilityactivationpoint)  "
});

documentTitles["criteria-ios-dev.html#grouper-des-elements"] = "Grouper des éléments";
index.add({
    url: "criteria-ios-dev.html#grouper-des-elements",
    title: "Grouper des éléments",    
    body: "## Grouper des éléments "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description On peut envisager de grouper des éléments pour vocaliser l'ensemble formé en une seule fois et associer au groupe ainsi créé une action dédiée par exemple. &lt;/br&gt;Dans ce cas, on va créer une vue qui va englober les éléments impactés puis implémenter une action qui va indiquer l'action à réaliser en cas d'activation de la zone par l'utilisateur. &lt;/br&gt;Dès lors, les éléments encapsulés ne doivent plus être considérés comme accessibles car seul leur conteneur doit être perçu comme tel. &lt;/br&gt;&lt;/br&gt;Une autre possibilité de groupement d'éléments pourrait utiliser l’attribut **shouldGroupAccessibilityChildren**, booléen qui permet d’indiquer à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; qu’il doit grouper les enfants de la vue qui porte l’attribut. &lt;/br&gt;Cela permet notamment de faire des vocalisations uniques ou de définir un ordre de lecture &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; particulier pour une partie de la page seulement (voir la section &lt;a href=\&quot;http://a11y-guidelines.orange.com/mobile/criteria-ios-dev.html#ordre-de-lecture\&quot;&gt;Ordre de lecture&lt;/a&gt;). "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple Nous avons un 'label' et un 'switch control' que nous allons souhaitons regrouper et traiter d'un seul bloc. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/GrouperDesElements_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Création de la vue qui va encapsuler le 'label' et le 'Switch Control'.     CGRect wrapFrame = CGRectUnion(myLabel.frame, mySwitchControl.frame);     wrapView = [[UIView alloc]initWithFrame: wrapFrame];          wrapView.isAccessibilityElement = YES;     wrapView.accessibilityLabel = myLabel.accessibilityLabel;     wrapView.accessibilityValue = mySwitchControl.accessibilityValue;               //Création de la manipulation qui va permettre une action sur la vue précédente.     UITapGestureRecognizer * tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self                                                                                   action:@selector(changeValue:)];     tapGesture.numberOfTapsRequired = 1;     [wrapView addGestureRecognizer:tapGesture];          [self.view addSubview:wrapView]; }  - (void)changeValue:(UITapGestureRecognizer *)sender {     mySwitchControl.on = ![mySwitchControl.accessibilityValue boolValue]; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Création de la vue qui va encapsuler le 'label' et le 'Switch Control'.         let wrapFrame = myLabel.frame.union(mySwitchControl.frame)         let wrapView = UIView.init(frame: wrapFrame)                  wrapView.isAccessibilityElement = true         wrapView.accessibilityLabel = myLabel.accessibilityLabel         wrapView.accessibilityValue = mySwitchControl.accessibilityValue                           //Création de la manipulation qui va permettre une action sur la vue précédente.         let tapGesture = UITapGestureRecognizer.init(target: self,                                                      action: #selector(changeValue(sender:)))         tapGesture.numberOfTapsRequired = 1;         wrapView.addGestureRecognizer(tapGesture)                  self.view.addSubview(wrapView)     }          @objc func changeValue(sender: UITapGestureRecognizer) {                  let switchBoolValue = NSString(string:mySwitchControl.accessibilityValue!).boolValue         mySwitchControl.setOn(!switchBoolValue,                               animated: false)     } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien - [`shouldGroupAccessibilityChildren`](https://developer.apple.com/documentation/objectivec/nsobject/1615143-shouldgroupaccessibilitychildren)  "
});

documentTitles["criteria-ios-dev.html#evenements-daccessibilite"] = "Événements d’accessibilité";
index.add({
    url: "criteria-ios-dev.html#evenements-daccessibilite",
    title: "Événements d’accessibilité",    
    body: "## Événements d’accessibilité "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Le système iOS envoie un certain nombre d’événements d’accessibilité à destination des applications lors de la modification des options d’accessibilité. &lt;/br&gt;Par exemple, si &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est désactivé durant l’utilisation de l’application, celle-ci recevra l’événement **UIAccessibilityVoiceOverStatusDidChange**, ce qui peut être très utile couplé à la fonction **UIAccessibilityIsVoiceOverRunning** grâce à laquelle on peut exécuter un traitement particulier quand &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé. &lt;/br&gt;Mais que se passe-t-il si &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est désactivé alors que ce traitement a déjà eu lieu&amp;nbsp;? &lt;/br&gt;&lt;/br&gt;C’est là que les événements système peuvent être utilisés et, en restant à leur écoute, il est possible d’appliquer des traitements spécifiques de manière dynamique. "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple Dans cet exemple, on appelle une méthode spécifique au moment où le statut de VoiceOver ou du Switch Control change. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          [[NSNotificationCenter defaultCenter] addObserver:self                                              selector:@selector(methodToBeCalled:)                                                  name:UIAccessibilitySwitchControlStatusDidChangeNotification                                                object:nil];          [[NSNotificationCenter defaultCenter] addObserver:self                                              selector:@selector(methodToBeCalled:)                                                  name:UIAccessibilityVoiceOverStatusDidChangeNotification                                                object:nil]; }  - (void)methodToBeCalled:(NSNotification *)notification {          NSArray * checkStatus = @[@\&quot;NOK\&quot;, @\&quot;OK\&quot;];          NSLog(@\&quot;SWITCH CONTROL is %@ and VOICE OVER is %@\&quot;,           checkStatus[UIAccessibilityIsSwitchControlRunning()],           checkStatus[UIAccessibilityIsVoiceOverRunning()]); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  NotificationCenter.default.addObserver(self,                                                selector: #selector(methodToBeCalled(notification:)),                                                name: .UIAccessibilitySwitchControlStatusDidChange,                                                object: nil)                                                         NotificationCenter.default.addObserver(self,                                                selector: #selector(methodToBeCalled(notification:)),                                                name: .UIAccessibilityVoiceOverStatusDidChange,                                                object: nil)     }          @objc private func methodToBeCalled(notification: Notification) {          let switchControlStatus = (UIAccessibilityIsSwitchControlRunning() ? \&quot;OK\&quot; : \&quot;NOK\&quot;)         let voiceOverStatus = (UIAccessibilityIsVoiceOverRunning() ? \&quot;OK\&quot; : \&quot;NOK\&quot;)                  print(\&quot;SWITCH CONTROL is \(switchControlStatus) and VOICE OVER is \(voiceOverStatus).\&quot;)     } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien Tous les événements sont disponibles sur la &lt;a href=\&quot;https://developer.apple.com/documentation/uikit/accessibility/notification_names?language=objc\&quot;&gt;documentation officielle d'Apple&lt;/a&gt;.  "
});

documentTitles["criteria-ios-dev.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-ios-dev.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description La gestion des polices dynamiques sous iOS est complexe. &lt;/br&gt;Depuis iOS7, il est possible d’utiliser une &lt;abbr&gt;API&lt;/abbr&gt; permettant de modifier dynamiquement la taille des textes d'une application à l’aide du paramétrage du téléphone. &lt;/br&gt;&lt;img alt=\&quot;capture d'écran, option police plus grande sur iPhone\&quot; style=\&quot;max-width: 600px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesTextes_1.png\&quot; /&gt; &lt;/br&gt;Quelques points sont néanmoins essentiels pour la bonne utilisation de cette &lt;abbr&gt;API&lt;/abbr&gt;&amp;nbsp;:  - Utiliser les polices système pour les textes de l’application afin d'éviter les mauvaises surprises même s'il est toutefois possible de définir ses propres polices dérivées de la classe `UIFont` surtout depuis l'arrivée de `UIFontMetrics` avec iOS11.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     __weak IBOutlet UILabel * fontHeadline;     __weak IBOutlet UILabel * fontFootNote;          //Utilisation de la font native pour le titre principal d'un page.     UIFont * myFont = [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline];          //Définition de la font pour le titre principal d'une page.     UIFont * fontHead = [UIFont fontWithName:@\&quot;Chalkduster\&quot; size:30.0];     UIFontMetrics * fontHeadMetrics = [[UIFontMetrics alloc]initForTextStyle:UIFontTextStyleHeadline];     fontHeadline.font = [fontHeadMetrics scaledFontForFont:fontHead]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     @IBOutlet weak var fontHeadline: UILabel!     @IBOutlet weak var fontFootNote: UILabel!          //Utilisation de la police native par défaut pour le titre principal d'une page.     let myFont = UIFont.preferredFont(forTextStyle: .headline)              //Définition personnalisée de la police pour le titre principal d'une page.     let fontHead = UIFont(name: \&quot;Chalkduster\&quot;, size: 30.0)     let fontHeadMetrics = UIFontMetrics(forTextStyle: .headline)     fontHeadline.font = fontHeadMetrics.scaledFont(for: fontHead!) &lt;/code&gt;&lt;/pre&gt;  - Penser à écouter la notification **UIContentSizeCategoryDidChange** qui annonce le changement de la taille du texte à partir des paramètres du téléphone. &lt;/br&gt;Cette tâche est simplifiée depuis iOS11 où l'attribut **adjustsFontForContentSizeCategory** se charge de la mise à jour automatique de la nouvelle taille de police au sein de l'application. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     //Écoute de la notification annonçant le changement de taille de la police.     [[NSNotificationCenter defaultCenter] addObserver:self                                              selector:@selector(methodToBeCalled:)                                                  name:UIContentSizeCategoryDidChangeNotification                                                object:nil];          //Modification automatique de la taille de la police sans utiliser la notification.     fontHeadline.adjustsFontForContentSizeCategory = YES;          - (void)methodToBeCalled:(NSNotification *)notification {              //Il faut de nouveau affecter la police des éléments impactés lors du traitement de cette notification.         fontFootNote.font = [UIFont preferredFontForTextStyle:UIFontTextStyleFootnote];     } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     //Écoute de la notification annonçant le changement de taille de la police.     NotificationCenter.default.addObserver(self,                                            selector:#selector(methodToBeCalled(notification:)),                                            name: .UIContentSizeCategoryDidChange,                                            object: nil)          //Modification automatique de la taille de la police sans utiliser la notification.     fontHeadline.adjustsFontForContentSizeCategory = true          @objc func methodToBeCalled(notification: Notification) {          //Il faut de nouveau affecter la police des éléments impactés lors du traitement de cette notification.         fontFootNote.font = UIFont.preferredFont(forTextStyle: .footnote)     } &lt;/code&gt;&lt;/pre&gt;  - Ne pas oublier d'adapter les contraintes graphiques aux éléments susceptibles de voir leur taille modifiée en privilégiant l'utilisation de valeurs dynamiques. "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [&lt;span lang=\&quot;en\&quot;&gt;Dynamic Type &lt;abbr&gt;API&lt;/abbr&gt;&lt;/span&gt;](https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html#//apple_ref/doc/uid/TP40009542-CH4-SW65) - [`UIContentSizeCategoryDidChange`](https://developer.apple.com/documentation/foundation/nsnotification.name/1622948-uicontentsizecategorydidchange) - [`adjustsFontForContentSizeCategory`](https://developer.apple.com/documentation/uikit/uicontentsizecategoryadjusting/1771731-adjustsfontforcontentsizecategor?language=objc)  "
});

documentTitles["criteria-ios-dev.html#taille-des-elements-graphiques"] = "Taille des éléments graphiques";
index.add({
    url: "criteria-ios-dev.html#taille-des-elements-graphiques",
    title: "Taille des éléments graphiques",    
    body: "## Taille des éléments graphiques "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Tout comme la taille des textes est adaptable selon les réglages d'accessibilité (voir &lt;a href=\&quot;http://a11y-guidelines.orange.com/mobile/criteria-ios-dev.html#taille-des-textes\&quot;&gt;la rubrique précédente&lt;/a&gt;), la taille des images ainsi que celle des éléments d'une barre de tabulation ou d'outils l'est aussi mais **uniquement depuis iOS11 avec Xcode 9**. &lt;/br&gt;&lt;/br&gt;En suivant les différentes étapes ci-dessous, vous obtiendrez l'effet défini précédemment et présenté graphiquement en exemple à la fin de cette rubrique&amp;nbsp;: &lt;/br&gt;&lt;/br&gt;1. Sous Xcode, importer l'image à grossir au format `pdf` à la résolution x1 dans le catalogue `xcassets`. &lt;/br&gt;&lt;/br&gt;2. Dans l'&lt;span lang=\&quot;en\&quot;&gt;Image Set&lt;/span&gt; qui vient d'être créé, cocher la case `Preserve Vector Data` et spécifier `Single Scale` : &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_4.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;3. Si un &lt;span lang=\&quot;en\&quot;&gt;storyboard&lt;/span&gt; est utilisé pour intégrer l'image, cocher `Adjusts Image Size` dans la partie &lt;span lang=\&quot;en\&quot;&gt;Image View&lt;/span&gt;, sinon mettre à `true` la propriété `adjustsImageSizeForAccessibilityContentSizeCategory` de l'image si cette opération se fait de façon programmatique : &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 350px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_5.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;4. Si une **barre de tabulation** ou une **barre d'outils** est aussi à intégrer dans l'application, renouveler les 3 étapes précédentes pour chacune des images à utiliser en grossissement de l'onglet au milieu de l'écran puis associer l'image souhaitée aux différents éléments impactés : &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 350px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_6.png\&quot; /&gt; &lt;/br&gt;**ATTENTION : s'assurer que les contraintes mises en place initialement permettent toujours un affichage cohérent et désiré après grossissement.** "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple De façon à pouvoir tester à la fois le grossissement des images et celui d'un onglet sélectionné, on crée une application contenant une barre de tabulations contenant 2 onglets dont seul le second nous intéresse et affiche l'image du logo Orange. &lt;/br&gt;&lt;/br&gt;Après modification du grossissement de texte dans les réglages (voir &lt;a href=\&quot;http://a11y-guidelines.orange.com/mobile/criteria-ios-dev.html#taille-des-textes\&quot;&gt;la rubrique précédente&lt;/a&gt;), on revient dans l'application pour constater : - Une taille de l'image Orange nettement plus conséquente. - Au milieu de l'écran, l'affichage grossi de l'onglet sur lequel on doit appuyer de façon continue pour provoquer cettte apparition. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1200px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_9.png\&quot; /&gt; "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien - [`adjustsImageSizeForAccessibilityContentSizeCategory`](https://developer.apple.com/documentation/uikit/uiaccessibilitycontentsizecategoryimageadjusting/2890929-adjustsimagesizeforaccessibility)   "
});

documentTitles["criteria-ios-dev.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-ios-dev.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Redéfinir l’ordre de lecture pour &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; s’effectue en respectant le protocole **UIAccessibilityContainer**. &lt;/br&gt;L’idée est d’avoir un tableau des éléments de la vue qui définit l’ordre de lecture des éléments. &lt;/br&gt;Il est bien souvent nécessaire d’utiliser l’attribut **shouldGroupAccessibilityElement** afin d’avoir un ordre précis mais pour une partie seulement de la vue (le reste étant l’ordre naturel de lecture proposé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;). "
});

documentTitles["criteria-ios-dev.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-dev.html#exemple",
    title: "Exemple",    
    body: "### Exemple Le meilleur exemple pour illustrer cette fonctionnalité est le clavier pour lequel les touches sucessives ne suivent pas forcément l'ordre natif proposé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Dans cet exemple, on veut l'ordre suivant : 1, 2, 3, 4, 7, 6, 8, 9, 5. &lt;/br&gt;&lt;span aria-hidden=\&quot;true\&quot;&gt;On crée  les 2 vues grise et bleue au sein desquelles on incorpore les chiffres appropriés comme défini ci-dessous :&lt;/span&gt; &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/OrdreDeLecture_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     __weak IBOutlet UIView * blueBlock;     __weak IBOutlet UIView * greyColumn;      - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Lecture des 3 premiers nombres dans la vue grise.     greyColumn.shouldGroupAccessibilityChildren = YES;          // Lecture des chiffres 6, 8, 9 et 5 au sein du bloc bleu.     blueBlock.isAccessibilityElement = NO;     blueBlock.accessibilityElements = @[key_6,                                         key_8,                                         key_9,                                         key_5]; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     @IBOutlet weak var greyColumn: UIView!     @IBOutlet weak var blueBlock: UIView!          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Lecture des 3 premiers nombres dans la vue grise.         greyColumn.shouldGroupAccessibilityChildren = true                  // Lecture des chiffres 6, 8, 9 et 5 au sein du bloc bleu.         blueBlock.isAccessibilityElement = false         blueBlock.accessibilityElements = [key_6,                                            key_8,                                            key_9,                                            key_5]     } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`UIAccessibilityContainer`](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibilitycontainer?language=objc) - [`shouldGroupAccessibilityChildren`](https://developer.apple.com/documentation/objectivec/nsobject/1615143-shouldgroupaccessibilitychildren)  "
});

documentTitles["criteria-ios-dev.html#date-heure-et-nombres"] = "Date, heure et nombres";
index.add({
    url: "criteria-ios-dev.html#date-heure-et-nombres",
    title: "Date, heure et nombres",    
    body: "## Date, heure et nombres "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description La lecture des date, heure et nombres n'est pas compliquée mais peut très vite devenir un réel casse-tête avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;&amp;nbsp;. "
});

documentTitles["criteria-ios-dev.html#lecture-des-dates-et-des-heures"] = "Lecture des dates et des heures";
index.add({
    url: "criteria-ios-dev.html#lecture-des-dates-et-des-heures",
    title: "Lecture des dates et des heures",    
    body: "#### Lecture des dates et des heures Si on met directement sous forme de texte la date ou l'heure dans le `label`, on s'aperçoit rapidement que le rendu n'est pas naturel à l'écoute. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 800px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_10.png\&quot; /&gt; &lt;/br&gt;Il faut absolument formater les données en entrée pour obtenir une vocalisation descriptive naturelle et compréhensible. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 800px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_4.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSDateFormatter * dateFormatter = [[NSDateFormatter alloc]init];     [dateFormatter setDateFormat:@\&quot;dd/MM/yyyy HH:mm\&quot;];          NSDate * date = [dateFormatter dateFromString:@\&quot;01/04/2015 05:30\&quot;];          dateLabel.text = [NSDateFormatter localizedStringFromDate:date                                                     dateStyle:NSDateFormatterShortStyle                                                     timeStyle:NSDateFormatterNoStyle];          dateLabel.accessibilityLabel = [NSDateFormatter localizedStringFromDate:date                                                                   dateStyle:NSDateFormatterMediumStyle                                                                   timeStyle:NSDateFormatterNoStyle];           hourLabel.text = [NSDateFormatter localizedStringFromDate:date                                                     dateStyle:NSDateFormatterNoStyle                                                     timeStyle:NSDateFormatterShortStyle];          NSDateComponents * hourComponents = [[NSCalendar currentCalendar] components:NSCalendarUnitHour | NSCalendarUnitMinute                                                                         fromDate:date];                                                                              hourLabel.accessibilityLabel = [NSDateComponentsFormatter localizedStringFromDateComponents:hourComponents                                                                                      unitsStyle:NSDateComponentsFormatterUnitsStyleSpellOut]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let dateFormatter = DateFormatter()     dateFormatter.dateFormat = \&quot;dd/MM/yyyy HH:mm\&quot;              let date = dateFormatter.date(from: \&quot;01/04/2015 05:30\&quot;)              dateLabel.text = DateFormatter.localizedString(from: date!,                                                    dateStyle: .short,                                                    timeStyle: .none)                                                             dateLabel.accessibilityLabel = DateFormatter.localizedString(from: date!,                                                                  dateStyle: .medium,                                                                  timeStyle: .none)                       hourLabel.text = DateFormatter.localizedString(from: date!,                                                    dateStyle: .none,                                                    timeStyle: .short)              let hourComponents = Calendar.current.dateComponents([.hour, .minute],                                                          from: date!)     hourLabel.accessibilityLabel = DateComponentsFormatter.localizedString(from: hourComponents,                                                                            unitsStyle: .spellOut) &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lecture-des-nombres"] = "Lecture des nombres";
index.add({
    url: "criteria-ios-dev.html#lecture-des-nombres",
    title: "Lecture des nombres",    
    body: "#### Lecture des nombres En indiquant la valeur d'un nombre directement dans le texte d'un `label`, la vocalisation se fera sur chacun des chiffres présentés rendant la véritable valeur du nombre difficile à deviner. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_8.png\&quot; /&gt; &lt;/br&gt;Comme pour les date et heure, il faut formater la donnée en entrée pour qu'elle puisse être analysée et vocalisée selon la véritable valeur du nombre qu'elle représente. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_5.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSNumber * numberValue = @54038921.7;          NSNumberFormatter * numberFormatter = [[NSNumberFormatter alloc]init];     numberFormatter.numberStyle = NSNumberFormatterDecimalStyle;          numberLabel.text = [numberFormatter stringFromNumber:numberValue];          numberLabel.accessibilityLabel = [NSNumberFormatter localizedStringFromNumber:numberValue                                                                       numberStyle:NSNumberFormatterSpellOutStyle]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let numberValue = NSNumber(value: 54038921.7)              numberLabel.text = NumberFormatter.localizedString(from: numberValue,                                                        number: .decimal)                                                                 numberLabel.accessibilityLabel = NumberFormatter.localizedString(from: numberValue,                                                                      number: .spellOut) &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lecture-des-numeros-de-telephone"] = "Lecture des numéros de téléphone";
index.add({
    url: "criteria-ios-dev.html#lecture-des-numeros-de-telephone",
    title: "Lecture des numéros de téléphone",    
    body: "#### Lecture des numéros de téléphone La problématique liée à la vocalisation d'un numéro de téléphone est identique à celle des nombres puisqu'elle s'appuie entièrement sur le formatage à appliquer avec une prise en compte particulière des chiffres \&quot;0\&quot;. &lt;/br&gt;L'exemple donné ci-dessous concerne la numérotation française avec une logique qui peut se décliner à n'importe quel type de format de numérotation. &lt;/br&gt;&lt;img alt=\&quot;par défaut la vocalisation avec voiceover du numéro de téléphone suivant n'est pas bonne : 06.11.22.33.06\&quot; style=\&quot;max-width: 550px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_11.png\&quot; /&gt; &lt;/br&gt;L'idée est de séparer chaque paire de chiffres par une virgule qui va fournir la ponctuation vocale. &lt;/br&gt;&lt;img alt=\&quot;numéro de téléphone vocalisé correctement si le label contient le même numéro dont les paires de chiffres sont séparées par des virgules\&quot; style=\&quot;max-width: 550px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_6.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSString * phoneNumberValue = @\&quot;06.11.22.33.06\&quot;;     NSArray * phoneNumberElts = [phoneNumberValue componentsSeparatedByString:@\&quot;.\&quot;];          NSNumberFormatter * nbFormatter = [[NSNumberFormatter alloc]init];     nbFormatter.numberStyle = NSNumberFormatterSpellOutStyle;          NSMutableString * spelledOutString = [[NSMutableString alloc]init];          [phoneNumberElts enumerateObjectsUsingBlock:^(id  _Nonnull obj,                                                   NSUInteger idx,                                                   BOOL * _Nonnull stop) {         NSString * elt = (NSString *)obj;                  if (idx != 0) {             [spelledOutString appendString:@\&quot;,\&quot;];         }                  if ([elt hasPrefix:@\&quot;0\&quot;]) {                          NSString * firstFigure = [nbFormatter stringFromNumber:@([[elt substringToIndex:1] integerValue])];             NSString * secondFigure = [nbFormatter stringFromNumber:@([[elt substringFromIndex:1] integerValue])];                          [spelledOutString appendString:firstFigure];             [spelledOutString appendString:secondFigure];                      } else {             [spelledOutString appendString:[nbFormatter stringFromNumber:@([elt integerValue])]];         }     }];          phoneNumberLabel.text = phoneNumberValue;     phoneNumberLabel.accessibilityLabel = spelledOutString; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;         let phoneNumberValue = \&quot;06.11.22.33.06\&quot;         let phoneNumberElts = phoneNumberValue.components(separatedBy: \&quot;.\&quot;)                  let nbFormatter = NumberFormatter()         nbFormatter.numberStyle = .spellOut                  var spelledOutString = String()                  for (index, elt) in phoneNumberElts.enumerated() {                          if (index != 0) {                 spelledOutString.append(\&quot;,\&quot;)             }                          if (elt.hasPrefix(\&quot;0\&quot;)) {                                  let firstFigureValue = Int(String(elt[elt.startIndex]))!                 let firstFigure = nbFormatter.string(from: NSNumber(value:firstFigureValue))                 spelledOutString.append(firstFigure!)                                  let secondFigureValue = Int(String(elt[elt.index(elt.startIndex, offsetBy: 1)]))!                 let secondFigure = nbFormatter.string(from: NSNumber(value:secondFigureValue))                 spelledOutString.append(secondFigure!)                              } else {                                  let figure = nbFormatter.string(from: NSNumber(value:Int(elt)!))                 spelledOutString.append(figure!)             }         }          phoneNumberLabel.text = phoneNumberValue         phoneNumberLabel.accessibilityLabel = spelledOutString &lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-ios-dev.html#liens"] = "Liens";
index.add({
    url: "criteria-ios-dev.html#liens",
    title: "Liens",    
    body: "### Liens - [`UIAccessibilityContainer`](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibilitycontainer?language=objc) - [`shouldGroupAccessibilityChildren`](https://developer.apple.com/documentation/objectivec/nsobject/1615143-shouldgroupaccessibilitychildren)  "
});

documentTitles["criteria-ios-dev.html#controle-de-selection"] = "Contrôle de sélection";
index.add({
    url: "criteria-ios-dev.html#controle-de-selection",
    title: "Contrôle de sélection",    
    body: "## Contrôle de sélection "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description L'utilisation du contrôle de sélection s'articule autour du mode point et du mode élément définis ci-dessous. &lt;/br&gt;&lt;img alt=\&quot;captures d'écran du mode point et mode élément du controle de sélection\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ControlesDeSelection.png\&quot; /&gt; &lt;/br&gt;La sélection des éléments avec le mode élément fonctionne globalement bien quand les éléments proposés sont natifs et que l'application n'est pas trop compliquée graphiquement. &lt;/br&gt;Il peut très bien arriver que ce mode de sélection ne suive pas la logique souhaitée et ne propose pas les éléments dans l'ordre désiré. "
});

documentTitles["criteria-ios-dev.html#personnalisation-du-mode-element"] = "Personnalisation du mode élément";
index.add({
    url: "criteria-ios-dev.html#personnalisation-du-mode-element",
    title: "Personnalisation du mode élément",    
    body: "#### Personnalisation du mode élément La structure utilisée pour l'exemple est présentée ci-dessous grâce à l'&lt;span lang=\&quot;en\&quot;&gt;InterfaceBuilder&lt;/span&gt; de Xcode : &lt;/br&gt;&lt;img alt=\&quot;capture d'écran d'interface builder\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ControleDeSelectionIB_1.png\&quot; /&gt; &lt;/br&gt;Afin de personnaliser la sélection de ces éléments, on souhaite : - Créer 2 groupes {Test_1 + Test_2 ; Btn 5 + Btn 6} sélectionnables en mode élément. - Avoir uniquement les éléments restants Btn 1 et Btn 2 accessibles séparément.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface ViewController2 ()  @property (weak, nonatomic) IBOutlet UIStackView * btnsParentView; @property (weak, nonatomic) IBOutlet UIButton * btn1; @property (weak, nonatomic) IBOutlet UIButton * btn2; @property (weak, nonatomic) IBOutlet UIButton * btn5; @property (weak, nonatomic) IBOutlet UIButton * btn6;  @end   @implementation ViewController2 - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Création du premier groupe 'testWrap' en COMBINANT les boutons 'Test_1' et 'Test_2'.     UIButton * testOneButton = [self.view viewWithTag:1];     UIButton * testTwoButton = [self.view viewWithTag:2];     CGRect testWrapFrame = CGRectUnion(testOneButton.frame, testTwoButton.frame);          UIAccessibilityElement * testWrap = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:self.view];          testWrap.isAccessibilityElement = false;     testWrap.accessibilityFrame = testWrapFrame;     testWrap.accessibilityNavigationStyle = UIAccessibilityNavigationStyleCombined; //Property specifique au contrôle de sélection.     testWrap.accessibilityElements = @[testOneButton, testTwoButton];               //Création du second groupe 'secondGroup' en SÉPARANT les boutons 1 et 2.     CGRect secondGroupRect = CGRectUnion(_btn1.frame, _btn2.frame);     CGRect secondGroupFrame = [_btnsParentView convertRect:secondGroupRect                                                     toView:self.view];     UIAccessibilityElement * secondGroup = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:_btnsParentView];          secondGroup.isAccessibilityElement = false;     secondGroup.accessibilityFrame = secondGroupFrame;     secondGroup.accessibilityNavigationStyle = UIAccessibilityNavigationStyleSeparate;     secondGroup.accessibilityElements = @[_btn1, _btn2];           //Création du troisième groupe 'thirdGroup' en COMBINANT les boutons 5 et 6.     CGRect thirdGroupRect = CGRectUnion(_btn1.frame, _btn2.frame);     CGRect thirdGroupFrame = [_btnsParentView convertRect:thirdGroupRect                                                    toView:self.view];     UIAccessibilityElement * thirdGroup = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:_btnsParentView];          thirdGroup.isAccessibilityElement = false;     thirdGroup.accessibilityFrame = thirdGroupFrame;     thirdGroup.accessibilityNavigationStyle = UIAccessibilityNavigationStyleCombined;     thirdGroup.accessibilityElements = @[_btn5, _btn6];               self.view.accessibilityElements = @[testWrap,                                          secondGroup,                                          thirdGroup]; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ViewController: UIViewController {          @IBOutlet weak var btnsParentView: UIStackView!     @IBOutlet weak var btn1: UIButton!     @IBOutlet weak var btn2: UIButton!     @IBOutlet weak var btn5: UIButton!     @IBOutlet weak var btn6: UIButton!               override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Création du premier groupe 'testWrap' en COMBINANT les boutons 'Test_1' et 'Test_2'.         let testOneButton = self.view.viewWithTag(1) as? UIButton         let testTwoButton = self.view.viewWithTag(2) as? UIButton         let testWrapFrame = testOneButton?.frame.union((testTwoButton?.frame)!)          let testWrap = UIAccessibilityElement(accessibilityContainer: self.view)          testWrap.isAccessibilityElement = false         testWrap.accessibilityFrame = testWrapFrame!         testWrap.accessibilityNavigationStyle = .combined   //Property specifique au contrôle de sélection.         testWrap.accessibilityElements = [testOneButton!, testTwoButton!]           //Création du second groupe 'secondGroup' en SÉPARANT les boutons 1 et 2.         let secondGroupRect = btn1.frame.union(btn2.frame)         let secondGroupFrame = btnsParentView.convert(secondGroupRect,                                                       to: self.view)         let secondGroup = UIAccessibilityElement(accessibilityContainer: btnsParentView)          secondGroup.isAccessibilityElement = false         secondGroup.accessibilityFrame = secondGroupFrame         secondGroup.accessibilityNavigationStyle = .separate         secondGroup.accessibilityElements = [btn1, btn2]           //Création du troisième groupe 'thirdGroup' en COMBINANT les boutons 5 et 6.         let thirdGroupRect = btn5.frame.union(btn6.frame)         let thirdGroupFrame = btnsParentView.convert(thirdGroupRect,                                                      to: self.view)         let thirdGroup = UIAccessibilityElement(accessibilityContainer: btnsParentView)          thirdGroup.isAccessibilityElement = false         thirdGroup.accessibilityFrame = thirdGroupFrame         thirdGroup.accessibilityNavigationStyle = .combined         thirdGroup.accessibilityElements = [btn5, btn6]           self.view.accessibilityElements = [testWrap,                                            secondGroup,                                             thirdGroup]     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;Le rendu de ce code est visualisable ci-dessous : &lt;/br&gt;&lt;img alt=\&quot;capture d'écran rendu du code précédent\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/ControleDeSelection_1.png\&quot; /&gt; &lt;/br&gt;Les groupes créés permettent d'accéder directement aux éléments qu'ils contiennent dès qu'ils sont activés. "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien - [`accessibilityNavigationStyle`](https://developer.apple.com/documentation/objectivec/nsobject/1615200-accessibilitynavigationstyle)  "
});

documentTitles["criteria-ios-dev.html#valeurs-continument-ajustables"] = "Valeurs continûment ajustables";
index.add({
    url: "criteria-ios-dev.html#valeurs-continument-ajustables",
    title: "Valeurs continûment ajustables",    
    body: "## Valeurs continûment ajustables "
});

documentTitles["criteria-ios-dev.html#description"] = "Description";
index.add({
    url: "criteria-ios-dev.html#description",
    title: "Description",    
    body: "### Description Des éléments graphiques comme le `picker`, le `stepper` ou encore le `slider` permettent de changer de façon continue la valeur qu'ils proposent de modifier. &lt;/br&gt;&lt;img alt=\&quot;capture d'écran picker, stepper et slider\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ValeursAjustables_1.png\&quot; /&gt; &lt;/br&gt;Quand on ne voit pas la modification dynamique se faire ou qu'on n'en est pas informé vocalement, il devient très compliqué de pouvoir se rendre compte de ce qui se passe. &lt;/br&gt;La méthodologie utilisée pour solutionner cette problématique pour une personne non voyante utilisant &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; reste la même pour ces trois éléments, c'est pourquoi seul le cas du `stepper` sera traité. &lt;/br&gt;&lt;/br&gt;L'implémentation de cet objet graphique est relativement simple mais son utilisation avec VoiceOver requiert quelques ajustements pour obtenir un meilleur parcours utilisateur. &lt;/br&gt;Si on crée un &lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt; auquel on ajoute un `label` pour afficher sa valeur, on obtient le résultat suivant : &lt;/br&gt;&lt;img alt=\&quot;le stepper est vu par voiceover comme trois éléments distincts\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/ValeursAjustables_2.png\&quot; /&gt; &lt;/br&gt;À partir de là, on s'aperçoit que le focus doit être déplacé pour : - Atteindre chacun des deux éléments permettant d'augmenter ou de diminuer la valeur. - Connaître la valeur obtenue via le `label`.  De plus, il n'y a aucune indication de changement de la valeur en temps réel. &lt;/br&gt;Certes, rien n'est bloquant mais, si l'on souhaite réellement mettre en place cet objet avec un rendu le plus fluide possible, ces quelques remarques conduisent tout naturellement à concevoir différemment cet exemple pourtant si simple. &lt;/br&gt;&lt;/br&gt;L'idée est de pouvoir changer la valeur du &lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt;, être informé de son changement et d'en connaître la valeur par le biais d'un unique objet. &lt;/br&gt;Il faut donc **regrouper le &lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt; et le `label`** *(à l'aide d'une &lt;span lang=\&quot;en\&quot;&gt;StackView&lt;/span&gt; par exemple)* puis associer **`UIAccessibilityTraitAdjustable`** à ce nouveau groupe accessible. &lt;/br&gt;Ce nouveau `trait` va permettre de modifier de façon continue la valeur de l'objet auquel il est associé en implémentant **OBLIGATOIREMENT** les méthodes `accessibilityIncrement()` et `accessibilityDecrement()`. &lt;/br&gt;&lt;/br&gt;On élimine ainsi toutes les contraintes rencontrées initialement et on obtient, en plus, un `hint` lié à ce nouveau `trait` qui indique la manipulation nécessaire au bon fonctionnement. &lt;/br&gt;&lt;img alt=\&quot;le stepper est vocalisé correctement\&quot; style=\&quot;max-width: 1000px; height: auto; \&quot; src=\&quot;./images/iOSdev/ValeursAjustables_3.png\&quot; /&gt; - Pour aboutir à ce résultat, on définit tout d'abord une classe conteneur {&lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt; + `label`} qui va permettre la délégation pour la modification ultérieure de la valeur.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; -===== StepperWrapper.h =====- NS_ASSUME_NONNULL_BEGIN @class StepperWrapper;  @protocol AdjustableForAccessibilityDelegate &lt;NSObject&gt;  - (void)adjustableDecrementForView:(StepperWrapper *)view; - (void)adjustableIncrementForView:(StepperWrapper *)view; @end   @interface StepperWrapper : UIStackView @property(nonatomic,weak) id&lt;AdjustableForAccessibilityDelegate&gt; delegate; @end NS_ASSUME_NONNULL_END           -===== StepperWrapper.m =====- NS_ASSUME_NONNULL_BEGIN @implementation StepperWrapper  - (instancetype)initWithCoder:(NSCoder *)coder {          self = [super initWithCoder:coder];          self.isAccessibilityElement = YES;     self.accessibilityTraits = UIAccessibilityTraitAdjustable;          return self; }  - (void)accessibilityDecrement {     [_delegate adjustableDecrementForView:self]; }  - (void)accessibilityIncrement {     [_delegate adjustableIncrementForView:self]; } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; protocol AdjustableForAccessibilityDelegate: class {     func adjustableDecrementFor(_ view: StepperWrapper)     func adjustableIncrementFor(_ view: StepperWrapper) }   class StepperWrapper: UIStackView {      weak var delegate: AdjustableForAccessibilityDelegate?          override init(frame: CGRect) {         super.init(frame: frame)     }          required init(coder: NSCoder) {         super.init(coder: coder)                  isAccessibilityElement = true         accessibilityTraits = UIAccessibilityTraitAdjustable     }          override func accessibilityDecrement() {         delegate?.adjustableDecrementFor(self)     }          override func accessibilityIncrement() {         delegate?.adjustableIncrementFor(self)     } } &lt;/code&gt;&lt;/pre&gt;  - Ensuite, il faut redéfinir les 2 méthodes du protocole implémenté pour indiquer ce qu'elles doivent réaliser avant de mettre à jour la valeur modifiée et de la présenter vocalement dans le &lt;span lang=\&quot;en\&quot;&gt;ViewController&lt;/span&gt;.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; NS_ASSUME_NONNULL_BEGIN @interface ViewController () &lt;AdjustableForAccessibilityDelegate&gt;  @property (weak, nonatomic) IBOutlet UIStepper * stepperNoAccess; @property (weak, nonatomic) IBOutlet UILabel * stepperValueNoAccess;  @property (weak, nonatomic) IBOutlet StepperWrapper * stepperStackViewAccess; @property (weak, nonatomic) IBOutlet UIStepper * stepperAccess; @property (weak, nonatomic) IBOutlet UILabel * stepperValueAccess; @end   @implementation ViewController - (void)viewDidLoad {     [super viewDidLoad];          _stepperStackViewAccess.delegate = self;     _stepperStackViewAccess.accessibilityLabel = @\&quot;Compteur pour adapter la valeur\&quot;;     _stepperStackViewAccess.accessibilityValue = _stepperValueAccess.text; }  - (void)adjustableDecrementForView:(StepperWrapper *)view {     _stepperAccess.value  -= _stepperAccess.stepValue;     [self updateStepperValue]; }  - (void)adjustableIncrementForView:(StepperWrapper *)view {     _stepperAccess.value  += _stepperAccess.stepValue;     [self updateStepperValue]; }  - (void) updateStepperValue {     _stepperValueAccess.text = [NSString stringWithFormat:@\&quot;Valeur = %0.1f\&quot;,_stepperAccess.value];     _stepperStackViewAccess.accessibilityValue = _stepperValueAccess.text; } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ViewController: UIViewController, AdjustableForAccessibilityDelegate {          @IBOutlet weak var stepperStackViewAccess: StepperWrapper!     @IBOutlet weak var stepperAccess: UIStepper!     @IBOutlet weak var stepperValueAccess: UILabel!               override func viewDidLoad() {         super.viewDidLoad()                  stepperStackViewAccess.delegate = self         stepperStackViewAccess.accessibilityLabel = \&quot;Compteur pour adapter la valeur\&quot;         stepperStackViewAccess.accessibilityValue = stepperValueAccess.text     }          func adjustableDecrementFor(_ view: StepperWrapper) {         stepperAccess.value -= stepperAccess.stepValue         updateStepperValue()     }          func adjustableIncrementFor(_ view: StepperWrapper) {         stepperAccess.value += stepperAccess.stepValue         updateStepperValue()     }          private func updateStepperValue() {         stepperValueAccess.text = \&quot;Valeur = \(stepperAccess.value)\&quot;         stepperStackViewAccess.accessibilityValue = stepperValueAccess.text     } } &lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-ios-dev.html#lien"] = "Lien";
index.add({
    url: "criteria-ios-dev.html#lien",
    title: "Lien",    
    body: "### Lien - [`UIAccessibilityTraitAdjustable`](https://developer.apple.com/documentation/uikit/uiaccessibilitytraitadjustable)  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android-conception.html#les-criteres-incontournables-sous-android-pour-la-conception"] = "Les critères incontournables sous Android pour la conception";
index.add({
    url: "criteria-android-conception.html#les-criteres-incontournables-sous-android-pour-la-conception",
    title: "Les critères incontournables sous Android pour la conception",    
    body: "# Les critères incontournables sous Android pour la conception  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Critères incontournables sous Android\&quot;, \&quot;url\&quot;: \&quot;./criteria-android.html\&quot;},         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;Pour le développement\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;}     ]);         });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différents critères d’accessibilité à respecter pour obtenir une application Android accessible. Chaque critère est présenté en expliquant pour qui ce critère est important, quand on peut le mettre en place, pourquoi il est important et la règle d’accessibilité qui en découle. Les critères sont explicités par des exemples de code et des captures d’exemples réels. Nous vous invitons à installer l’application [mDAN](./mdan.html) pour obtenir des exemples fonctionnels avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;, le lecteur d’écran d’Android, et d’autres outils d’assistance. Pour plus d’information sur l’outil (comment l’activer, comment s’en servir…) nous vous invitons à vous référer à la [section concernant &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](./screen-reader-talkback.html).  "
});

documentTitles["criteria-android-conception.html#images"] = "Images";
index.add({
    url: "criteria-android-conception.html#images",
    title: "Images",    
    body: "## Images **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors de la conception et pendant le développement.  **Description&amp;nbsp;: **  Les images sont très souvent utilisées pour transmettre de nombreuses informations. Comme le dit l’adage, une image vaut mille mots. Les non-voyants ne pouvant voir les images, il est important que celles-ci possèdent une alternative qui donne toutes les informations portées par l’image.   Dans le cas d’une image contenant du texte, l’alternative sera ledit texte. Dans le cas d’une image qui apporte des informations sous la forme d’un graphe, dessin ou autre, l’alternative devra contenir toutes les informations nécessaires présentes dans l’image.  Certaines images sont utilisées à des fins décoratives. Ces images ne nécessitent pas d’alternative. Par défaut sous Android, les images ne sont pas vocalisées par le lecteur d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;.   Les illustrations de l’application sont également considérées comme des images décoratives. La règle est donc la même&amp;nbsp;: il n’y a pas d’alternative textuelle à ajouter.   Les icônes sont, a contrario, largement utilisées en tant que bouton pour des fonctionnalités diverses. Elles ont donc besoin d’alternatives textuelles pertinentes.  L’alternative d’une image est renseignée via l’attribut `contentDescription` (disponible pour tout élément héritant de `View`).  **À vérifier&amp;nbsp;:**  - les images portant de l’information restituent cette information à travers leur alternative textuelle, - les images décoratives n’ont pas d’alternative textuelle.  **Objectif utilisateur&amp;nbsp;: **  Permettre l’accès à l’information incluse dans une image pour des utilisateurs qui n’y ont pas accès. Point bloquant&amp;nbsp;: une image sans description textuelle est inexploitable par des personnes ayant des déficiences visuelles ou celles n’affichant pas les images (mobile, faible bande passante...).  **Exemples&amp;nbsp;:**  &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;exemple complet d’image décorative et d’icône informative\&quot; width=\&quot;400\&quot;&gt;  En décomposant l’image&amp;nbsp;: - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;exemple d’image décorative\&quot; width=\&quot;256\&quot;&gt; pas de `contentDescription` - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;exemple d’icône informative - paramètres\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;paramètres\&quot;)` - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;exemple d’icône informative - édition\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;éditer le nom de l’image\&quot;)`  "
});

documentTitles["criteria-android-conception.html#couleurs"] = "Couleurs";
index.add({
    url: "criteria-android-conception.html#couleurs",
    title: "Couleurs",    
    body: "## Couleurs  **Cible&amp;nbsp;: ** tout le monde, en particulier les personnes malvoyantes, les seniors et les personnes avec des problèmes de vision (daltonisme, vision des contrastes, etc.)   **Quand&amp;nbsp;: **  dès la phase de conception et lors du développement.  **Description&amp;nbsp;: **  Les couleurs jouent un rôle très important dans la transmission des informations. On associe certaines couleurs à des concepts ou à des sensations, mais il ne faut pas oublier qu’une partie de la population ne distingue pas correctement les couleurs.  **À vérifier&amp;nbsp;: **  - La couleur ne doit jamais être le seul canal de transmission d’une information, d’indication d’une action, de sollicitation d’une réponse ou de distinction d’un élément.  - Le contraste entre les couleurs de texte et de fond doit aussi être suffisant (7:1 sur mobile, 4,5:1 pour les textes larges, à calculer avec &lt;span lang=\&quot;en\&quot;&gt;Colour Constrast Analyzer&lt;/span&gt; par exemple).  **Objectif utilisateur&amp;nbsp;: **   Faciliter la lecture à tous les utilisateurs, déficients visuels ou personnes dans un environnement lumineux défavorable (en mobilité).   Permettre aux utilisateurs ne distinguant pas les couleurs (daltoniens, déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure... ) d’accéder tout de même à l’information par d’autres moyens.  **Outil&amp;nbsp;: ** L’application [&lt;span lang=\&quot;en\&quot;&gt;Colour Constrast Analyzer&lt;/span&gt;](http://www.paciellogroup.com/resources/contrastanalyser/) permet de mesurer rapidement des niveaux de contraste de couleurs (gratuit pour Mac et Windows).    L’application [&lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d’accessibilité et notamment les couleurs. Disponible pour Android 6+.   **Exemple de contraste non valide&amp;nbsp;: **   Le texte \&quot;film | 20h40 ...\&quot; ne présente pas un contraste suffisant. Celui-ci ne sera pas lisible par tous les utilisateurs.    ![capture d’écran présentant du texte dont le contraste n’est pas suffisant](images/contraste.png)     **Exemple de passage d’information par la couleur valide et non valide&amp;nbsp;: **   &lt;img src=\&quot;./images/couleur.png\&quot; alt=\&quot;exemple de passage d’information par la couleur valide et non valide\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-android-conception.html#alternative-textuelle"] = "Alternative textuelle";
index.add({
    url: "criteria-android-conception.html#alternative-textuelle",
    title: "Alternative textuelle",    
    body: "## Alternative textuelle  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** dès la conception, à la rédaction du contenu et pendant le développement.  **Description&amp;nbsp;: **    Les alternatives textuelles sont au cœur de l’accessibilité sur mobile. Grâce à elles, un utilisateur non-voyant peut utiliser une application sans perte d’information.      Tout comme pour les images, il est important de renseigner une alternative textuelle lorsque l’information n’est pas disponible pour les personnes malvoyantes/non-voyantes. C’est le cas des composants fournissant de l’information par la couleur, la forme, la position, le son... Sur mobile, tous les composants peuvent recevoir une alternative textuelle, il est donc possible d’enrichir la vocalisation native d’un élément, y compris celle d’un simple texte.      La place sur mobile étant réduite, on utilise bien souvent des abréviations pour les textes. Mais cependant, cela pose un problème aux utilisateurs de synthèse vocale qui restituent les abréviations telles quelles. Pour corriger ces vocalisations, il suffit de placer une alternative textuelle sur le texte. Cette alternative contient le texte non abrégé. À noter que &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; sait reconnaître quelques abréviations courantes. Par exemple, «&amp;nbsp;etc.&amp;nbsp;» et «&amp;nbsp;Dr.&amp;nbsp;» sont bien vocalisées «&amp;nbsp;et cetera&amp;nbsp;» et «&amp;nbsp;Docteur&amp;nbsp;».      Certaines images sont régulièrement associées à du texte pour donner une information. C’est le cas notamment des «&amp;nbsp;messages non lus&amp;nbsp;» où une infobulle donne le nombre de messages à lire et où une image donne l’information «&amp;nbsp;message&amp;nbsp;». Dans ce cas, la solution consiste à placer une alternative textuelle sur le texte qui donne toutes les informations nécessaires. Par exemple&amp;nbsp;: «&amp;nbsp;3 messages non lus&amp;nbsp;». On peut également placer cette alternative sur l’image, mais dans ce cas, il faut penser à rendre le texte «&amp;nbsp;invisible&amp;nbsp;» pour le lecteur d’écran.  L’alternative textuelle d’un élément est renseignée via l’attribut `contentDescription` (disponible pour tout élément héritant de `View`). Pour les boutons présents dans l’`ActionBar` (ou `ToolBar`), c’est l’attribut `title` qu’il faut renseigner.  **À vérifier&amp;nbsp;: **  - Les éléments de l’application qui nécessitent une alternative en possèdent bien une, - Les alternatives textuelles de l’application sont explicites et compréhensibles.  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs ayant des déficiences sensorielles (déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure, en milieu bruyant, malentendant… ) d’accéder aux informations véhiculées par l’application par d’autres biais.  **Exemple&amp;nbsp;: **  Ci-dessous, un exemple fréquent d’une icône qu’on couple avec du texte (infobulle) pour ajouter de l’information. Dans notre cas, l’icône «&amp;nbsp;mail&amp;nbsp;» couplée à l’infobulle de valeur «&amp;nbsp;3&amp;nbsp;» nous fait comprendre que nous avons «&amp;nbsp;3 mails non lus&amp;nbsp;». Si aucune alternative textuelle n’est ajoutée, 2 vocalisations seront lues «&amp;nbsp;bouton sans libellé&amp;nbsp;» et «&amp;nbsp;3&amp;nbsp;». On comprend bien ici l’importance d’ajouter des alternatives textuelles.   &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;exemple d’icône couplée à du texte qui nécessite une alternative textuelle\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code&gt;containerView.setContentDescription(\&quot;3 mails non lus, bouton\&quot;); //On ajoute l’alternative complète (construite dynamiquement au préalable) sur le conteneur containerView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES); //Le conteneur est une View, non visible par l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité par défaut. On le rend visible. mailImageView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //On masque le bouton-icône pour éviter une redondance d’information infobulleTextView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //On masque le texte pour éviter une redondance d’information&lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-android-conception.html#titre-et-en-tete"] = "Titre et en-tête";
index.add({
    url: "criteria-android-conception.html#titre-et-en-tete",
    title: "Titre et en-tête",    
    body: "## Titre et en-tête  **Cible&amp;nbsp;: ** tout le monde   **Quand&amp;nbsp;: ** dès la conception et à la rédaction du contenu.  **Description&amp;nbsp;: **   Le titre de la page est le premier élément qui est vocalisé ou vu sur un écran mobile. Il facilite la navigation pour tout le monde&amp;nbsp;: à tout moment, on sait où on se trouve dans l’application.   Une erreur commune est de mettre un titre unique pour toutes les pages d’une application (ou même pas de titre du tout).  **À vérifier&amp;nbsp;: **   - Chaque écran doit avoir un titre qui lui est propre ou qui permet de se repérer dans la navigation (couplé avec le bouton de retour), - Les éléments identifiés visuellement comme des en-têtes doivent être déclarés à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité comme tels.  ** Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs d’identifier le sujet d’une page, de se repérer et de se faire une idée précise du contenu de la page sans avoir à le lire.  **Exemple non valide&amp;nbsp;: **  &lt;img src=\&quot;./images/header.png\&quot; alt=\&quot;exemple de titre non pertinent (absence de titre)\&quot; width=\&quot;300\&quot;&gt;      "
});

documentTitles["criteria-android-conception.html#etat-des-elements"] = "État des éléments";
index.add({
    url: "criteria-android-conception.html#etat-des-elements",
    title: "État des éléments",    
    body: "## État des éléments  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **  Si un élément ne restitue pas à la vocalisation son statut, sa nature ou son état, l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est dans l’impossibilité de comprendre ce qui se passe à l’écran. Ne pas préciser qu’une zone est dépliée ou que l’on se trouve face à un système d’onglets sont des exemples très fréquents.      Grand classique de ce problème&amp;nbsp;: les onglets. Par défaut, les onglets proposés dans Android ne donnent aucune information sur leur nature et sur leur état. Il est donc à la charge du développeur de donner ces informations à l’utilisateur via les attributs d’accessibilité correspondants (`contentDescription`). En l’occurrence, une bonne alternative pour le titre d’un onglet peut être&amp;nbsp;: \&quot;onglet, titre de l’onglet - 1 sur 3 - sélectionné\&quot;      Autre classique d’élément qui ne restitue pas par défaut son état&amp;nbsp;: les zones dépliables. Encore une fois, c’est grâce à l’alternative textuelle du titre de la zone dépliable que l’on peut donner à l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; le statut de celle-ci.     Pour renseigner ce genre d’information, il faut utiliser l’attribut `contentDescription` (disponible pour tout élément héritant de `View`).  **À vérifier&amp;nbsp;: **  - Tout élément dont le statut est modifié durant l’utilisation de l’application doit restituer son état à travers son alternative textuelle. Par exemple, un élément qui peut être sélectionné/non sélectionné doit restituer son état à travers une alternative textuelle.  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs de lecteurs d’écran d’avoir accès aux informations des composants, leur état, leur nature afin qu’ils puissent les utiliser sans difficultés.  **Exemple&amp;nbsp;: **  &lt;img src=\&quot;./images/tabs.png\&quot; alt=\&quot;exemple d’onglets qui ne restituent pas leur état et nature par défaut\&quot; width=\&quot;400\&quot;&gt;   Pour obtenir un exemple de code qui corrige ce problème, nous vous invitons à vous référer à la page du [guide développeur](./criteria-android-dev.html#alternatives-textuelles) correspondante.     "
});

documentTitles["criteria-android-conception.html#composant-standard"] = "Composant standard";
index.add({
    url: "criteria-android-conception.html#composant-standard",
    title: "Composant standard",    
    body: "## Composant standard  **Cible&amp;nbsp;: ** tout le monde.   **Quand&amp;nbsp;: ** en phase de sélection des briques logicielles et lors des développements.  **Description&amp;nbsp;: **    L’accessibilité est prise en compte dans les composants natifs (la plupart du temps). De plus, l’utilisation de composants standards permet à l’utilisateur de se retrouver dans une situation et un comportement habituels. La navigation dans une interface standard est donc plus confortable.      Utiliser au maximum les composants natifs en modifiant leur apparence. Si aucun composant standard ne permet de répondre au besoin, créer un composant dédié basé sur un composant standard en veillant à conserver la cohérence de navigation et l’accessibilité.      Un exemple fréquent est l’utilisation d’un composant personnalisé pour le menu latéral de navigation (`NavigationDrawer`). Certains des palliatifs disponibles sur Internet ne sont absolument pas accessibles avec un lecteur d’écran. Malheureusement, cela rend de fait toute l’application non accessible.  **Objectif utilisateur&amp;nbsp;: **   Permet à tous les utilisateurs d’interagir plus intuitivement avec l’interface.  **Objectif technique&amp;nbsp;: **  Améliore globalement la maintenabilité. Réduit les temps de développement.      "
});

documentTitles["criteria-android-conception.html#zone-de-clic"] = "Zone de clic";
index.add({
    url: "criteria-android-conception.html#zone-de-clic",
    title: "Zone de clic",    
    body: "## Zone de clic  **Cible&amp;nbsp;: ** pour tous et en particulier les personnes avec des déficiences motrices   **Quand&amp;nbsp;: ** dès la phase de conception et lors du développement.  **Description&amp;nbsp;: **    Une taille insuffisante pour la zone d’action d’un composant peut empêcher certains utilisateurs de profiter pleinement de l’application. Cela peut engendrer des frustrations qui peuvent conduire à la désinstallation de l’application. Chaque élément cliquable de l’application doit donner à l’utilisateur une taille suffisante pour sa zone d’action.  **À vérifier&amp;nbsp;: **  - Google définit pour son système une taille de zone de clic minimum de 48dp (en hauteur ET largeur, avec 8 dp de marge autour de l’élément).  **Objectif utilisateur&amp;nbsp;: **  Améliorer le confort de navigation au toucher (&lt;i lang=\&quot;en\&quot;&gt;touch&lt;/i&gt;).  **Outil&amp;nbsp;: **  L’application [&lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d’accessibilité et notamment la taille des zones de clic. Disponible pour Android 6+.   **Exemple valide&amp;nbsp;: **   Dans les exemples ci-dessous, le cadre noir correspond à la taille de la zone interactive.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction assez large\&quot; width=\&quot;300\&quot;&gt;  **Exemple non-valide&amp;nbsp;: **    &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction trop petite\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android-conception.html#element-fantome"] = "Elément fantôme";
index.add({
    url: "criteria-android-conception.html#element-fantome",
    title: "Elément fantôme",    
    body: "## Elément fantôme  **Cible&amp;nbsp;: ** les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **    Bien qu’invisibles à l’écran, certains éléments peuvent être lus par le lecteur d’écran (éléments positionnés en dehors de la zone visible ou masqués par d’autres éléments). La superposition d’écrans est quelque chose de courant sur mobile, mais cela engendre des problèmes d’accessibilité très lourds à corriger si elle n’est pas faite correctement dès le départ. Un lecteur d’écran tel que &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est capable de lire les informations d’une vue qui est placée «&amp;nbsp;sous&amp;nbsp;» une autre. Mais si l’utilisateur n’est plus capable d’interagir avec cette vue, cela perturbe totalement sa navigation et celle-ci devient vite impossible.      Grand classique du problème&amp;nbsp;: les fragments. Un fragment est un composant qu’on peut facilement superposer par-dessus un autre sous Android. Une mauvaise utilisation des fragments peut aboutir à une navigation impossible avec le lecteur d’écran.      Consulter l’article sur l’[utilisation des fragments](https://developer.android.com/guide/components/fragments.html) pour plus d’informations.  **À vérifier&amp;nbsp;: **  - &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; ne doit pas vocaliser d’éléments indésirables appartenant à un autre écran que celui en cours de consultation.  **Objectif utilisateur&amp;nbsp;: **  Permettre la navigation dans l’application sans avoir d’élément perturbant, non utilisable, sur la vue courante.  **Exemple non-valide&amp;nbsp;: **    Dans l’exemple ci-dessous, le cadre vert correspond au focus de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Ce dernier vocalise (la vocalisation est affichée en bas de l’écran sur la capture) un contenu se trouvant derrière la vue active.   &lt;img src=\&quot;./images/ghost.png\&quot; alt=\&quot;exemple d’élément fantôme\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android-conception.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-android-conception.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors de la conception et lors du développement.  **Description&amp;nbsp;: **   L’utilisateur a la possibilité d’augmenter la taille du texte via une option d’accessibilité. Afin que l’application réagisse correctement à cette option, il est nécessaire d’utiliser des tailles de texte dynamiques qui s’ajusteront en fonction des paramètres utilisateurs. Un texte trop petit sera facilement ignoré par certains utilisateurs malvoyants.      L’application devra mettre en œuvre des tailles de textes dynamiques, s’assurer de la bonne réactivité des zones d’affichage au grossissement de texte (conteneurs qui s’adaptent à la taille de leur contenu). Il faut aussi assurer une taille minimum pour les textes (14sp).      Afin de permettre à l’option «&amp;nbsp;grand caractère&amp;nbsp;» d’interagir correctement avec l’application, plusieurs points sont à respecter durant les développements&amp;nbsp;: - Utiliser une taille de police dynamique&amp;nbsp;: le «&amp;nbsp;sp&amp;nbsp;». Cette unité, spécifique à Android, permet d’obtenir une taille de police en fonction de la densité de pixel de l’écran. Il est plus que recommandé de l’utiliser pour les textes, ne serait-ce que pour obtenir un design uniforme sur tous les types de &lt;i lang=\&quot;en\&quot;&gt;devices&lt;/i&gt; Android.  - Gérer les débordements de contenu&amp;nbsp;: une erreur courante est d’utiliser une taille de texte dynamique («&amp;nbsp;sp&amp;nbsp;» donc) mais de ne pas faire attention au conteneur. Si le texte grossit, le conteneur doit en faire autant pour ne pas qu’il y ait de débordement. On peut parfaitement jouer avec le `min-height` et le `height` des conteneurs pour obtenir un résultat correct (le `height` à `wrap_content` et le `min-height` à la hauteur voulue par défaut).  **À vérifier&amp;nbsp;: **  - L’application réagit correctement à l’option grand caractère, - Les textes de l’application ont une taille minimum de 14sp.  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs (malvoyants, en mobilité, seniors...) d’augmenter la taille du texte sans perte d’information pour accéder plus aisément au contenu.  **Outil&amp;nbsp;: ** L’application [&lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d’accessibilité et notamment la taille des textes. Disponible pour Android 6+.  **Exemple&amp;nbsp;: **  &lt;img src=\&quot;./images/text.png\&quot; alt=\&quot;exemple d’utilisation de taille de police dynamique\&quot; width=\&quot;300\&quot;&gt;    "
});

documentTitles["criteria-android-conception.html#controle-de-contenu"] = "Contrôle de contenu";
index.add({
    url: "criteria-android-conception.html#controle-de-contenu",
    title: "Contrôle de contenu",    
    body: "## Contrôle de contenu  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles et cognitives.   **Quand&amp;nbsp;: ** lors de la conception et lors du développement.  **Description&amp;nbsp;: **   Sur mobile, les lecteurs d’écran essayent de transmettre au maximum à l’utilisateur les changements de contexte. Dans certains cas, cela peut donner des vocalisations permanentes, et donc inaudibles, ou empêcher toute action de l’utilisateur.   L’utilisateur doit rester maître du contenu à tout instant. C’est particulièrement vrai avec le contenu interactif. Il faut donc éviter par exemple qu’une vidéo ne se lance directement en plein écran, qu’une vidéo ne se lance directement sans une action au préalable de l’utilisateur, qu’un carrousel ne défile de manière automatique, etc.  **À vérifier&amp;nbsp;: **  - Les contenus interactifs peuvent être maîtrisés par l’utilisateur (présence d’un bouton pause sur carrousel automatique, bouton accessible pour sortir du mode plein-écran etc)  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs de rester maîtres de l’application. Permettre à l’utilisateur de lecteur d’écran d’éviter une pollution sonore qui peut nuire à sa navigation.   **Objectif technique&amp;nbsp;: **  Améliorer le référencement naturel.   "
});

documentTitles["criteria-android-conception.html#changement-de-contenu"] = "Changement de contenu";
index.add({
    url: "criteria-android-conception.html#changement-de-contenu",
    title: "Changement de contenu",    
    body: "## Changement de contenu  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **   Lorsque du contenu est modifié dynamiquement à la suite d’une action de l’utilisateur, il faut le notifier à la synthèse vocale. Sans retour vocal, l’utilisateur ne sait pas qu’une action a été déclenchée.   Sur une page, si du contenu est modifié dynamiquement suite à une action utilisateur, il est important que le lecteur d’écran soit notifié afin qu’il déclenche une vocalisation. Par exemple, les listes qui se rafraîchissent, ou un compteur de temps.  Une simple vocalisation peut suffire à avertir l’utilisateur. Il est très facile de déclencher des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Attention: nous parlons de la vocalisation si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé et non pas de &lt;abbr&gt;TTS&lt;/abbr&gt; (Text To Speech) qui peut fonctionner indépendamment du statut de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Il suffit de faire appel à la méthode `announceForAccessibility` en lui passant en paramètre l’`id` de la chaîne de caractère à vocaliser. À noter&amp;nbsp;: la méthode `announceForAccessibility` est disponible sur tout élément qui hérite de `View` et se fait dans la langue du système.  Il est également possible de spécifier à une vue qu’elle est une région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;, c’est-à-dire que son contenu est susceptible d’être modifié dynamiquement et qu’elle doit dans ce cas prévenir l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. Cela aura pour conséquence de générer des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; par exemple. Un exemple type d’utilisation&amp;nbsp;: sur un formulaire, si l’utilisateur fait une erreur et qu’un message d’erreur apparaît, la vue contenant le message doit être définie comme une région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;.  Il faut passer par la méthode `setAccessibilityLiveRegion` qui prend en paramètre un mode pour la région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;. Il existe 3 modes&amp;nbsp;: -	`ACCESSIBILITY_LIVE_REGION_NONE`&amp;nbsp;: cette vue n’est pas une région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;. C’est la valeur par défaut de la plupart des vues. -	`ACCESSIBILITY_LIVE_REGION_POLITE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations sont effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;polies&amp;nbsp;»&amp;nbsp;; elles sont moins prioritaires que les vocalisations système par exemple. -	`ACCESSIBILITY_LIVE_REGION_ASSERTIVE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations seront effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;rude&lt;/i&gt;&amp;nbsp;»&amp;nbsp;; elles sont prioritaires et immédiatement vocalisées. À noter, la méthode `setAccessibilityLiveRegion` est disponible sur tout élément qui hérite de `View`.  **À vérifier&amp;nbsp;: **  - Avec un lecteur d’écran, s’assurer que les modifications dynamiques dans les pages sont bien vocalisées.  **Objectif utilisateur&amp;nbsp;: **  Donner accès aux modifications des informations de l’application aux utilisateurs de lecteurs d’écran.   "
});

documentTitles["criteria-android-conception.html#i-langenscrolli-horizontal"] = "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal";
index.add({
    url: "criteria-android-conception.html#i-langenscrolli-horizontal",
    title: "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal",    
    body: "## &lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** dès la phase de conception et lors du développement.  **Description&amp;nbsp;: **  Un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal peut être très difficile à détecter si aucun visuel n’aide l’utilisateur à comprendre qu’il existe plusieurs pages.   Ne pas hésiter à afficher un élément pour indiquer un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal (des «&amp;nbsp;points&amp;nbsp;» par exemple). Quand cela est nécessaire, ajouter également des boutons «&amp;nbsp;suivant&amp;nbsp;» et «&amp;nbsp;précédent&amp;nbsp;».  **À vérifier&amp;nbsp;: **  - Les scrolls horizontaux sont indiqués visuellement - Avec le lecteur d’écran activé, un mécanisme permet de passer de page en page lorsqu’un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal est présent.  **Objectif utilisateur&amp;nbsp;: **  Donner une indication visuelle aux utilisateurs lors de la présence de &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux. Permettre aux utilisateurs de lecteur d’écran d’utiliser les &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_h1.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple non-valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_h2.png\&quot; alt=\&quot;exemple de scroll horizontal non accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-android-conception.html#formulaire"] = "Formulaire";
index.add({
    url: "criteria-android-conception.html#formulaire",
    title: "Formulaire",    
    body: "## Formulaire  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors de la conception et lors du développement.  **Description&amp;nbsp;: **  Lier les champs de formulaires avec leurs labels apporte une vocalisation supplémentaire qui permet à l’utilisateur de comprendre quoi remplir lorsqu’il arrive sur un champ de formulaire.      Il existe 2 grandes techniques pour réaliser cette liaison&amp;nbsp;:  - `labelFor`&amp;nbsp;: permet de spécifier à une vue qu’elle est le label d’une autre vue. Cette méthode prend en paramètre l’`id` de la vue que l’on labellise. On peut utiliser cette méthode avec quasiment tout type de champ de formulaire. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:labelFor` ou le code `setLabelFor`.  - `hint`&amp;nbsp;: permet d’ajouter un texte d’exemple quand le champ de texte est vide. Cette méthode ne marche que pour les `TextView`. Prend en paramètre l’`id` d’une chaîne de caractère. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:hint` ou le code `setHint`.  **À vérifier&amp;nbsp;: **  - les champs de formulaire doivent être liés à un label si celui-ci est visible, sinon un `hint` est présent  **Objectif utilisateur&amp;nbsp;: **  Améliorer la navigation et la compréhension globale de la page, car les champs de formulaires décrivant le contenu attendu  facilitent leur saisie par les utilisateurs déficients visuels.   "
});

documentTitles["criteria-android-conception.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-android-conception.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture  **Cible&amp;nbsp;: ** les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **  L’ordre de lecture permet à l’utilisateur de lecteur d’écran de se repérer dans la navigation et d’assurer une cohérence fonctionnelle. Il est donc important d’y faire attention.      Par défaut, l’ordre de lecture de la synthèse vocale prend en compte plusieurs paramètres&amp;nbsp;: la lecture «&amp;nbsp;logique&amp;nbsp;» (en France), soit de gauche à droite et de haut en bas, et la lecture du &lt;abbr&gt;xml&lt;/abbr&gt; (ordre de déclaration des éléments). Il existe cependant certain cas où le lecteur d’écran n’arrive pas à déterminer un ordre et dans ce cas, il utilise l’ordre de définition des éléments, ce qui peut amener des vocalisations incohérentes.      Il est tout à fait possible de redéfinir cet ordre de lecture avec deux attributs&amp;nbsp;: -	`accessibilityTraversalAfter`&amp;nbsp;: prend un `id` en paramètre et permet de spécifier à la vue qu’elle doit être «&amp;nbsp;vue&amp;nbsp;» par l’accessibilité après la vue passée en paramètre. - `accessibilityTraversalBefore`&amp;nbsp;: prend un `id` en paramètre et permet de spécifier à la vue qu’elle doit être «&amp;nbsp;vue&amp;nbsp;» par l’accessibilité avant la vue passée en paramètre.    À noter&amp;nbsp;: ces attributs peuvent être utilisés directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; mais également dans le code via les méthodes `setAccessibilityTraversalAfter` et `setAccessibilityTraversalBefore`. Ces méthodes sont disponibles pour tout élément qui hérite de `View`.  **À vérifier&amp;nbsp;: **  - L’ordre de lecture (celui de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;) est logique et cohérent.  **Objectif utilisateur&amp;nbsp;: **  Assurer un ordre de lecture logique et cohérent aux utilisateurs de lecteurs d’écran pour leur assurer une complète compréhension du contenu.  **Exemple&amp;nbsp;:**       Dans cet exemple, l’ordre de lecture par défaut dépend complètement de l’implémentation et de l’ordre de déclaration des éléments. Dans ce cas-ci&amp;nbsp;: `vol+, vol-, 1, 2, 3, 4, 5, 6, 7, 8, 9, p+, p-, 0`. Un ordre de lecture plus cohérent serait `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol+, vol-, p+, p-`.    &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt;   &lt;pre&gt;&lt;code&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); chaineplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); chainemoinsButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.chaineplus).getId()); [...]&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-android-conception.html#navigation-au-focus"] = "Navigation au focus";
index.add({
    url: "criteria-android-conception.html#navigation-au-focus",
    title: "Navigation au focus",    
    body: "## Navigation au focus  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes motrices qui utilisent un clavier pour naviguer.   **Quand&amp;nbsp;: ** lors de la conception et lors du développement.  **Description&amp;nbsp;: **  La navigation au focus est très utile pour les personnes qui présentent des difficultés motrices ou cognitives. Cette navigation permet de passer d’élément interactif en élément interactif (élément sur lequel on peut effectuer une action). Elle correspond à la navigation que l’on peut faire avec un clavier Bluetooth lié à un smartphone.  Pour gérer la navigation au focus, il faut s’assurer de 3 choses&amp;nbsp;:   - Permettre le focus sur les éléments interactifs&amp;nbsp;: la navigation au focus ne concerne que les éléments interactifs. Si, par exemple, votre application possède des vues &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; cliquables, il faut s’assurer que ces vues soient focusables en positionnant l’attribut `focusable` à `true`. - Gérer l’ordre du focus&amp;nbsp;: à travers les options `nextFocusDown`, `nextFocusUp`, `nextFocusRight` et `nextFocusLeft`, vous pouvez spécifier quelle vue doit prendre le focus selon l’utilisation des flèches bas, haut, droit et gauche. - Gérer l’affichage du focus&amp;nbsp;: tout élément interactif peut recevoir le focus, il faut donc que le `state_focused` soit défini et permette de distinguer d’un seul coup d’œil quel élément a le focus.  À noter&amp;nbsp;: `nextFocusDown`, `nextFocusUp`, `nextFocusRight`, `nextFocusLeft`, `focusable` ainsi que d’autres options de gestion du focus sont accessibles directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; ou dans le code à travers les méthodes correspondantes.    Pour plus d’information sur la [gestion du focus sous Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav).   **À vérifier&amp;nbsp;: **  - L’ordre de navigation au focus (clavier) est logique et cohérent. - À la navigation au focus (clavier), il est possible de déterminer visuellement l’élément qui a le focus  **Objectif utilisateur&amp;nbsp;: **  Permettre l’utilisation de l’application avec un clavier, dock tablette ou tout autre dispositif de navigation séquentielle.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-conception.html#les-criteres-incontournables-sous-ios-pour-la-conception"] = "Les critères incontournables sous iOS pour la conception";
index.add({
    url: "criteria-ios-conception.html#les-criteres-incontournables-sous-ios-pour-la-conception",
    title: "Les critères incontournables sous iOS pour la conception",    
    body: "# Les critères incontournables sous iOS pour la conception  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Les critères incontournables sous iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;Pour le développement\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différents critères d’accessibilité à respecter pour obtenir une application iOS accessible. Chaque critère est présenté en expliquant pour qui ce critère est important, quand on peut le mettre en place, pourquoi il est important et la règle d’accessibilité qui en découle. Les critères sont explicités par des exemples de code et des captures d’exemples réels. Nous vous invitons à installer l’application [mDAN](./mdan.html) pour obtenir des exemples fonctionnels avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, le lecteur d’écran d’iOS, et d’autres outils d’assistance. Pour plus d’information sur l’outil (comment l’activer, comment s’en servir…) nous vous invitons à vous référer à la [section correspondant à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;](./screen-reader-voiceover.html).    À noter&amp;nbsp;: les quelques exemples de code dans cette section seront présentés en Swift.  "
});

documentTitles["criteria-ios-conception.html#images"] = "Images";
index.add({
    url: "criteria-ios-conception.html#images",
    title: "Images",    
    body: "## Images **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors de la conception et pendant le développement.  **Description&amp;nbsp;: **    Les images sont très souvent utilisées pour transmettre de nombreuses informations. Comme le dit l’adage, une image vaut mille mots. Les non-voyants ne pouvant voir les images, il est important que celles-ci possèdent une alternative qui donne toutes les informations portées par l’image.   Dans le cas d’une image contenant du texte, l’alternative sera ledit texte. Dans le cas d’une image qui apporte des informations sous la forme d’un graphe, dessin ou autre, l’alternative devra contenir toutes les informations nécessaires présentes dans l’image.        Certaines images sont utilisées à des fins décoratives. Ces images ne nécessitent pas d’alternative. Par défaut sous iOS, les images ne sont pas vocalisées par le lecteur d’écran &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;.   Les illustrations de l’application sont également considérées comme des images décoratives. La règle est donc la même&amp;nbsp;: il n’y a pas d’alternative textuelle à ajouter.   Les icônes sont, a contrario, largement utilisées en tant que boutons pour des fonctionnalités diverses. Elles ont donc besoin d’alternatives textuelles pertinentes.      L’alternative d’une image est renseignée via l’attribut `accessibilityLabel` (via le protocole `UIAccessibility` implémenté par tout élément standard dérivant de `UIView`).  **À vérifier&amp;nbsp;: **  - les images portant de l’information restituent cette information à travers leur alternative textuelle, - les images décoratives n’ont pas d’alternative textuelle.  **Objectif utilisateur&amp;nbsp;: **   Permettre l’accès à l’information incluse dans une image pour des utilisateurs qui n’y ont pas accès. Point bloquant&amp;nbsp;: une image sans description textuelle est inexploitable par des personnes ayant des déficiences visuelles ou celles n’affichant pas les images (mobile, faible bande passante…).  **Exemples&amp;nbsp;: **        &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;exemple complet d’image décorative et d’icône informative\&quot; width=\&quot;400\&quot;&gt;      En décomposant l’image&amp;nbsp;:   - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;exemple d’image décorative\&quot; width=\&quot;256\&quot;&gt; pas d’`accessibilityLabel`   - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;exemple d’icône informative - paramètres\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_edit_accessibilityLabel\&quot;.localized`   - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;exemple d’icône informative - édition\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_settings_accessibilityLabel\&quot;.localized`    "
});

documentTitles["criteria-ios-conception.html#couleurs"] = "Couleurs";
index.add({
    url: "criteria-ios-conception.html#couleurs",
    title: "Couleurs",    
    body: "## Couleurs    **Cible&amp;nbsp;: ** tout le monde, en particulier les personnes malvoyantes, les seniors et les personnes avec des problèmes de vision (daltonisme, vision des contrastes, etc.)   **Quand&amp;nbsp;: **  dès la phase de conception et lors du développement.  **Description&amp;nbsp;: **    Les couleurs jouent un rôle très important dans la transmission des informations. On associe certaines couleurs à des concepts ou à des sensations, mais il ne faut pas oublier qu’une partie de la population ne distingue pas correctement les couleurs.  **À vérifier&amp;nbsp;: **  - La couleur ne doit jamais être le seul canal de transmission d’une information, d’indication d’une action, de sollicitation d’une réponse ou de distinction d’un élément.  - Le contraste entre les couleurs de texte et de fond doit aussi être suffisant (7:1 sur mobile, 4,5:1 pour les textes larges, à calculer avec &lt;span lang=\&quot;en\&quot;&gt;Colour Contrast Analyzer&lt;/span&gt; par exemple).  **Objectif utilisateur&amp;nbsp;: **   Faciliter la lecture à tous les utilisateurs, déficients visuels ou personnes dans un environnement lumineux défavorable (en mobilité).   Permettre aux utilisateurs ne distinguant pas les couleurs (daltoniens, déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure…), d’accéder tout de même à l’information par d’autres moyens.  **Outil&amp;nbsp;: ** L’application [&lt;span lang=\&quot;en\&quot;&gt;Colour Contrast Analyzer&lt;/span&gt;](http://www.paciellogroup.com/resources/contrastanalyser/) permet de mesurer rapidement des niveaux de contraste de couleurs (gratuit pour mac et windows).    **Exemple de contraste non valide&amp;nbsp;: **   Le texte «&amp;nbsp;film | 20h40 …&amp;nbsp;» ne présente pas un contraste suffisant. Celui-ci ne sera pas lisible par tous les utilisateurs.    ![capture d’écran présentant du texte dont le contraste n’est pas suffisant](images/contraste.png)     **Exemple de passage d’information par la couleur valide et non valide&amp;nbsp;: **   &lt;img src=\&quot;./images/couleur_ios.png\&quot; alt=\&quot;exemple de passage d’information par la couleur valide et non valide\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-ios-conception.html#alternative-textuelle"] = "Alternative textuelle";
index.add({
    url: "criteria-ios-conception.html#alternative-textuelle",
    title: "Alternative textuelle",    
    body: "## Alternative textuelle  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** dès la conception, à la rédaction du contenu et pendant le développement.  **Description&amp;nbsp;: **    Les alternatives textuelles sont au cœur de l’accessibilité sur mobile. Grâce à elles, un utilisateur non voyant peut utiliser une application sans perte d’information.      Tout comme pour les images, il est important de renseigner une alternative textuelle lorsque l’information n’est pas disponible pour les personnes malvoyantes/non-voyantes. C’est le cas des composants fournissant de l’information par la couleur, la forme, la position, le son… Sur mobile, tous les composants peuvent recevoir une alternative textuelle, il est donc possible d’enrichir la vocalisation native d’un élément, y compris celle d’un simple texte.      La place sur mobile étant réduite, on utilise bien souvent des abréviations pour les textes. Mais cependant, cela pose un problème aux utilisateurs de synthèse vocale qui restitue les abréviations telles quelles. Pour corriger ces vocalisations, il suffit de placer une alternative textuelle sur le texte. Cette alternative contient le texte non abrégé. À noter que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sait reconnaître quelques abréviations courantes. Par exemple, «&amp;nbsp;etc.&amp;nbsp;» est bien vocalisé «&amp;nbsp;et cetera&amp;nbsp;».      Certaines images sont régulièrement associées à du texte pour donner une information. C’est le cas notamment des «&amp;nbsp;messages non lus&amp;nbsp;» où une infobulle donne le nombre de messages à lire et où une image donne l’information «&amp;nbsp;message&amp;nbsp;». Dans ce cas, la solution consiste à placer une alternative textuelle sur le texte qui donne toutes les informations nécessaires. Par exemple&amp;nbsp;: «&amp;nbsp;3 messages non lus&amp;nbsp;». On peut également placer cette alternative sur l’image, mais dans ce cas, il faut penser à rendre le texte «&amp;nbsp;invisible&amp;nbsp;» pour le lecteur d’écran.  L’alternative textuelle d’un élément est renseignée via les attributs `accessibilityLabel`, `accessibilityHint`, `accessibilityValue` et `accessibilityTrait` (via le protocole `UIAccessibility` implémenté par tout élément standard dérivant de `UIView`).   L’ordre de vocalisation est toujours le suivant : `label`, `value`, `trait` et `hint`. Cet ordre ne peut pas être changé et la vocalisation est réalisée en une seule fois, à l’arrivée sur l’élément.   Pour plus d’informations techniques sur ces attributs, nous vous conseillons de lire la section des [alternatives textuelles dans le guide développeur](./criteria-ios-dev.html#alternatives-textuelles).  **À vérifier&amp;nbsp;: **  - Les éléments de l’application qui nécessitent une alternative en possède bien une, - Les alternatives textuelles de l’application sont explicites et compréhensibles.  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs ayant des déficiences sensorielles (déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure, en milieu bruyant, malentendant…) d’accéder aux informations véhiculées par l’application par d’autres biais.  **Exemple&amp;nbsp;: **        Ci-dessous, un exemple fréquent d’une icône qu’on couple avec du texte (infobulle) pour ajouter de l’information. Dans notre cas, l’icône «&amp;nbsp;mail&amp;nbsp;» couplée à l’infobulle de valeur «&amp;nbsp;3&amp;nbsp;» nous fait comprendre que nous avons «&amp;nbsp;3 mails non lus&amp;nbsp;». Si aucune alternative textuelle n’est ajoutée, 2 vocalisations seront lues «&amp;nbsp;bouton sans libellé&amp;nbsp;» et «&amp;nbsp;3&amp;nbsp;». On comprend bien ici l’importance d’ajouter des alternatives textuelles.   &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;exemple d’icône couplée à du texte qui nécessite une alternative textuelle\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;cell.mailImageView.accessibilityLabel = cell.badgeLabel.text! + \&quot; \&quot; + \&quot;exemple_textualAlternative_textImage_accessibilityLabel\&quot;.localized //On ajoute l’alternative complète cell.badgeLabel.isAccessibilityElemement = false //On masque le bouton-icône pour éviter une redondance d’information&lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-ios-conception.html#titre-et-en-tete"] = "Titre et en-tête";
index.add({
    url: "criteria-ios-conception.html#titre-et-en-tete",
    title: "Titre et en-tête",    
    body: "## Titre et en-tête  **Cible&amp;nbsp;: ** tout le monde   **Quand&amp;nbsp;: ** dès la conception et à la rédaction du contenu.  **Description&amp;nbsp;: **   Le titre de la page est le premier élément qui est vocalisé ou vu sur un écran mobile. Il facilite la navigation pour tout le monde&amp;nbsp;: à tout moment, on sait où on se trouve dans l’application.   Une erreur commune est de mettre un titre unique pour toutes les pages d’une application (ou même pas de titre du tout).  Les en-tête iOS permettent des structurer les pages en apportant une information supplémentaire. Cette information est utile à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité car &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est capable de naviguer d’en-tête en en-tête (molette de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, mode en-tête). Cela permet de se déplacer plus rapidement dans la page.   Pour définir un élément en tant qu’en-tête, il faut positionner son attribut `accessibilityTraits` à la valeur `accessibilityTraitHeader`.  **À vérifier&amp;nbsp;: **   - Chaque écran doit avoir un titre qui lui est propre ou qui permet de se repérer dans la navigation (couplé avec le bouton de retour), - Les éléments identifiés visuellement comme des en-têtes doivent être déclarés à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité comme tels.  ** Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs d’identifier le sujet d’une page, de se repérer et se faire une idée précise du contenu de la page sans avoir à le lire. Permettre une navigation plus aisée.  **Exemple non valide&amp;nbsp;: **        &lt;img src=\&quot;./images/header_ios.png\&quot; alt=\&quot;exemple de titre non pertinent (absence de titre)\&quot; width=\&quot;300\&quot;&gt;      "
});

documentTitles["criteria-ios-conception.html#etat-des-elements"] = "État des éléments";
index.add({
    url: "criteria-ios-conception.html#etat-des-elements",
    title: "État des éléments",    
    body: "## État des éléments  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **  Si un élément ne restitue pas à la vocalisation son statut, sa nature ou son état, l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est dans l’impossibilité de comprendre ce qui se passe à l’écran. Ne pas préciser qu’une zone est dépliée ou que l’on se trouve face à un système d’onglets sont des exemples très fréquents.      Par défaut, les onglets proposés dans iOS sont parfaitement accessibles. Cependant, il est fréquent de proposer des onglets personnalisés afin d’avoir un rendu différent. Il est donc à la charge du développeur de donner les informations de nature et d’états des onglets à l’utilisateur via les attributs d’accessibilité correspondants. Notons toutefois qu’il serait possible de rendre accessibles ces onglets personnalisés comme cela est montré avec l’exemple de la section «&amp;nbsp;composants standards&amp;nbsp;».    Autres éléments classiques qui ne restituent pas par défaut leur état&amp;nbsp;: les zones dépliables. Encore une fois, c’est grâce à l’alternative textuelle du titre de la zone dépliable que l’on peut donner à l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; le statut de celle-ci.     Pour renseigner ce genre d’information, il faut utiliser les attributs `accessibilityLabel` et `accessibilityTrait`.  **À vérifier&amp;nbsp;: **  - Tout élément dont le statut est modifié durant l’utilisation de l’application doit restituer son état à travers son alternative textuelle. Par exemple, un élément qui peut être sélectionné/non sélectionné doit restituer son état à travers une alternative textuelle.  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs de lecteurs d’écran d’avoir accès aux informations des composants, leur état, leur nature afin qu’ils puissent les utiliser sans difficultés.  **Exemple&amp;nbsp;: **        &lt;img src=\&quot;./images/expandable_list.png\&quot; alt=\&quot;exemple de liste dépliable qui nécessite une alternative textuelle\&quot; width=\&quot;250\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;if(accessibleIsFold) {    accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_open_accessibilityHint\&quot;.localized //\&quot;Cliquer pour ouvrir la section\&quot; }else{   accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_close_accessibilityHint\&quot;.localized //\&quot;Cliquer pour fermer la section\&quot; }&lt;/code&gt;&lt;/pre&gt;     "
});

documentTitles["criteria-ios-conception.html#composant-standard"] = "Composant standard";
index.add({
    url: "criteria-ios-conception.html#composant-standard",
    title: "Composant standard",    
    body: "## Composant standard  **Cible&amp;nbsp;: ** tout le monde.   **Quand&amp;nbsp;: ** en phase de sélection des briques logicielles et lors des développements.  **Description&amp;nbsp;: **    L’accessibilité est prise en compte dans les composants natifs (la plupart du temps). De plus, l’utilisation de composants standards permet à l’utilisateur de se retrouver dans une situation et un comportement habituels. La navigation dans une interface standard est donc plus confortable.      Utiliser au maximum les composants natifs en modifiant leur apparence. Si aucun composant standard ne permet de répondre au besoin, créer un composant dédié basé sur un composant standard en veillant à conserver la cohérence de navigation et l’accessibilité.    **Objectif utilisateur&amp;nbsp;: **   Permet à tous les utilisateurs d’interagir plus intuitivement avec l’interface.  **Objectif technique&amp;nbsp;: **  Améliore globalement la maintenabilité. Réduit les temps de développement.      "
});

documentTitles["criteria-ios-conception.html#zone-de-clic"] = "Zone de clic";
index.add({
    url: "criteria-ios-conception.html#zone-de-clic",
    title: "Zone de clic",    
    body: "## Zone de clic  **Cible&amp;nbsp;: ** pour tous et en particulier les personnes avec des déficiences motrices   **Quand&amp;nbsp;: ** dès la phase de conception et lors du développement.  **Description&amp;nbsp;: **    Une taille insuffisante pour la zone d’action d’un composant peut empêcher certains utilisateurs de profiter pleinement de l’application. Cela peut engendrer des frustrations qui peuvent conduire à la désinstallation de l’application. Chaque élément cliquable de l’application doit donner à l’utilisateur une taille suffisante pour sa zone d’action.  **À vérifier&amp;nbsp;: **  - Apple définit pour son système une taille de zone de clic minimum de 44pt (en hauteur ET largeur) ; [lien vers les recommandations Apple](https://developer.apple.com/ios/human-interface-guidelines/visual-design/layout/)  **Objectif utilisateur&amp;nbsp;: **  Améliorer le confort de navigation au toucher (&lt;i lang=\&quot;en\&quot;&gt;touch&lt;/i&gt;).  **Exemple valide&amp;nbsp;: **   Dans les exemples ci-dessous, le cadre noir correspond à la taille de la zone interactive.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction assez large\&quot; width=\&quot;300\&quot;&gt;  **Exemple non-valide&amp;nbsp;: **    &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction trop petite\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-ios-conception.html#element-fantome"] = "Elément fantôme";
index.add({
    url: "criteria-ios-conception.html#element-fantome",
    title: "Elément fantôme",    
    body: "## Elément fantôme  **Cible&amp;nbsp;: ** les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **    Bien qu’invisibles à l’écran, certains éléments peuvent être lus par le lecteur d’écran (éléments positionnés en dehors de la zone visible ou masqués par d’autres éléments). La superposition d’écrans est quelque chose de courant sur mobile, mais cela engendre des problèmes d’accessibilité très lourds à corriger si elle n’est pas faite correctement dès le départ. Un lecteur d’écran tel que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est capable de lire les informations d’une vue qui est placée «&amp;nbsp;sous&amp;nbsp;» une autre. Mais si l’utilisateur n’est plus capable d’interagir avec cette vue, cela perturbe totalement sa navigation et celle-ci devient vite impossible.      Un exemple fréquent d’élément fantôme survient lors de la création de composant personnalisé tel que des «&amp;nbsp;&lt;span lang=\&quot;en\&quot;&gt;alert dialog&lt;/span&gt;&amp;nbsp;» (notification utilisateur). Notons toutefois que ce genre de composant personnalisé est tout à fait susceptible d’être accessible. Nous vous invitons à lire la section correspondante dans la [partie développeur](./criteria-ios-dev.html#masquer-des-l-ments-l-accessibilit-).  **À vérifier&amp;nbsp;: **  - &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; ne doit pas vocaliser d’éléments indésirables appartenant à un autre écran que celui en cours de consultation.  **Objectif utilisateur&amp;nbsp;: **  Permettre la navigation dans l’application sans avoir d’élément perturbant, non utilisable, sur la vue courante.   **Exemple non-valide&amp;nbsp;: **    Dans l’exemple ci-dessous, l’alerte personnalisée présente ce problème de vue fantôme. En effet, avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; activé, il est possible de «&amp;nbsp;lire&amp;nbsp;» les éléments situés en dessous, comme nous le montre le focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; (en noir sur l’image)   &lt;img src=\&quot;./images/ghost_ios.png\&quot; alt=\&quot;exemple d’élément fantôme\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-ios-conception.html#controle-de-contenu"] = "Contrôle de contenu";
index.add({
    url: "criteria-ios-conception.html#controle-de-contenu",
    title: "Contrôle de contenu",    
    body: "## Contrôle de contenu  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles et cognitives.   **Quand&amp;nbsp;: ** lors de la conception et lors du développement.  **Description&amp;nbsp;: **   Sur mobile, les lecteurs d’écran essayent de transmettre au maximum à l’utilisateur les changements de contexte. Dans certains cas, cela peut donner des vocalisations permanentes, et donc inaudibles, ou empêcher toute action de l’utilisateur.   L’utilisateur doit rester maître du contenu à tout instant. C’est particulièrement vrai avec le contenu interactif. Il faut donc éviter par exemple qu’une vidéo ne se lance directement en plein écran, qu’une vidéo ne se lance directement sans une action au préalable de l’utilisateur, qu’un carrousel défile de manière automatique, etc.  **À vérifier&amp;nbsp;: **  - Les contenus interactifs peuvent être maîtrisés par l’utilisateur (pause sur carrousel automatique, bouton accessible pour sortir du mode plein-écran etc)  **Objectif utilisateur&amp;nbsp;: **  Permettre aux utilisateurs de rester maître de l’application. Permettre à l’utilisateur de lecteur d’écran d’éviter une pollution sonore qui peut nuire à sa navigation.   **Objectif technique&amp;nbsp;: **  Améliorer le référencement naturel.   "
});

documentTitles["criteria-ios-conception.html#changement-de-contenu"] = "Changement de contenu";
index.add({
    url: "criteria-ios-conception.html#changement-de-contenu",
    title: "Changement de contenu",    
    body: "## Changement de contenu  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **   Lorsque du contenu est modifié dynamiquement à la suite d’une action de l’utilisateur, il faut le notifier à la synthèse vocale. Sans retour vocal, l’utilisateur ne sait pas qu’une action a été déclenchée.   Sur une page, si du contenu est modifié dynamiquement suite à une action utilisateur, il est important que le lecteur d’écran soit notifié afin qu’il déclenche une vocalisation. Par exemple, les listes qui se rafraîchissent, ou un compteur de temps.  Pour déclencher une vocalisation, il faut envoyer une notification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode `UIAccessibilityPostNotification` avec en paramètre la notification permettant de déclencher une vocalisation `UIAccessibilityAnnouncementNotification` et la chaîne de caractère à vocaliser.    Il est également conseillé de notifier l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité lorsqu’un changement de contexte survient. Pour ce faire, il faut envoyer une notification de modification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode `UIAccessibilityPostNotification`.   Il existe plusieurs notifications de modification, mais les deux plus utiles sont&amp;nbsp;:   - `UIAccessibilityLayoutChangedNotification`&amp;nbsp;: permet de spécifier à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité qu’une partie de la page a été modifiée. - `UIAccessibilityScreenChangedNotification`&amp;nbsp;: permet d’annoncer un changement global de la page.  Pour plus d’information technique sur ces méthodes, nous vous invitons à regarder la section correspondante dans le [guide développeur pour iOS](./criteria-ios-dev.html#informer-d-une-modification-sur-la-page).  **À vérifier&amp;nbsp;: **  - Avec un lecteur d’écran, s’assurer que les modifications dynamiques dans les pages sont bien vocalisées.  **Objectif utilisateur&amp;nbsp;: **  Donner accès aux modifications des informations de l’application aux utilisateurs de lecteur d’écran.   "
});

documentTitles["criteria-ios-conception.html#i-langenscrolli-horizontal"] = "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal";
index.add({
    url: "criteria-ios-conception.html#i-langenscrolli-horizontal",
    title: "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal",    
    body: "## &lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** dès la phase de conception et lors du développement.  **Description&amp;nbsp;: **  Un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal peut être très difficile à détecter si aucun visuel n’aide l’utilisateur à comprendre qu’il existe plusieurs pages.   Ne pas hésiter à afficher un élément pour indiquer un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal (les \&quot;points\&quot; d’un `UIPageControl`). Quand cela est nécessaire, ajouter également des boutons «&amp;nbsp;suivant&amp;nbsp;» et «&amp;nbsp;précédent&amp;nbsp;».  **À vérifier&amp;nbsp;: **  - Les &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux sont indiqués visuellement - Avec le lecteur d’écran activé, un mécanisme permet de passer de page en page lorsqu’un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal est présent.  **Objectif utilisateur&amp;nbsp;: **  Donner une indication visuelle aux utilisateurs lors de la présence de &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux. Permettre aux utilisateurs de lecteur d’écran d’utiliser les &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_ios_h1.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple non-valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_ios_h2.png\&quot; alt=\&quot;exemple de scroll horizontal non accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-ios-conception.html#formulaire"] = "Formulaire";
index.add({
    url: "criteria-ios-conception.html#formulaire",
    title: "Formulaire",    
    body: "## Formulaire  **Cible&amp;nbsp;: ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors de la conception et lors du développement.  **Description&amp;nbsp;: **  Lier les champs de formulaires avec leurs labels apporte une vocalisation supplémentaire qui permet à l’utilisateur de comprendre quoi remplir lorsqu’il arrive sur un champ de formulaire.      Sous iOS, on apporte une information supplémentaire sur les champs de formulaire via son alternative textuelle, soit l’attribut `accessibilityLabel`.  **À vérifier&amp;nbsp;: **  - les champs de formulaire doivent restituer leurs labels  **Objectif utilisateur&amp;nbsp;: **  Améliorer la navigation en améliorant la compréhension globale de la page, les champs de formulaires décrivant le contenu attendu.   "
});

documentTitles["criteria-ios-conception.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-ios-conception.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture  **Cible&amp;nbsp;: ** les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **  L’ordre de lecture permet à l’utilisateur de lecteur d’écran de se repérer dans la navigation et d’assurer une cohérence fonctionnelle. Il est donc important d’y faire attention.      Par défaut, l’ordre de lecture de la synthèse vocale prend en compte plusieurs paramètres&amp;nbsp;: la lecture «&amp;nbsp;logique&amp;nbsp;» (en France), soit de gauche à droite et de haut en bas. Il existe cependant certains cas où le lecteur d’écran n’arrive pas à déterminer un ordre et, dans ce cas, il utilise l’ordre de définition des éléments, ce qui peut amener des vocalisations incohérentes.    Redéfinir l’ordre de lecture dans &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; s’effectue en respectant le protocole [`UIAccessibilityContainer`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibilityContainer_Protocol/). L’idée est d’avoir un tableau des éléments de la vue qui définit l’ordre de lecture des éléments. Il est bien souvent nécessaire d’utiliser l’attribut `shouldGroupAccessibilityElement` afin d’avoir un ordre précis, mais pour une partie seulement de la vue (le reste étant l’ordre naturel de lecture).    **À vérifier&amp;nbsp;: **  - L’ordre de lecture (celui de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;) est logique et cohérent.  **Objectif utilisateur&amp;nbsp;: **  Assurer un ordre de lecture logique et cohérent aux utilisateurs de lecteur d’écran  pour leur assurer une complète compréhension du contenu.   **Exemple&amp;nbsp;:**       Dans cet exemple, l’ordre de lecture par défaut dépend complètement de l’implémentation et de l’ordre de déclaration des éléments. Dans ce cas-ci&amp;nbsp;: `1, 4, 7, 2, 5, 8, 0, 3, 6, 9, vol+, vol-, p+, p-`. Un ordre de lecture plus cohérent serait `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol+, vol-, p+, p-`.    &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt;   &lt;pre&gt;&lt;code&gt;remoteView.isAccessibilityElement = false remoteView.shouldGroupAccessibilityChildren = true remoteView.accessibilityElements = [] remoteView.accessibilityElements?.append(oneButton) remoteView.accessibilityElements?.append(twoButton) remoteView.accessibilityElements?.append(threeButton) remoteView.accessibilityElements?.append(fourButton) […]&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-ios-conception.html#langue"] = "Langue";
index.add({
    url: "criteria-ios-conception.html#langue",
    title: "Langue",    
    body: "## Langue  **Cible&amp;nbsp;: ** les personnes déficientes visuelles.   **Quand&amp;nbsp;: ** lors du développement.  **Description&amp;nbsp;: **  La vocalisation donnée par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; s’effectue, par défaut, dans la langue du système du mobile. Il arrive parfois que certain mots/textes d’une application soient dans une langue différente. Afin que la vocalisation soit audible, il faut déclarer ces textes dans la langue correspondante.    Afin de modifier la langue de prononciation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; pour un mot ou un texte, il existe l’attribut `accessibilityLanguage`. Disponible via le protocole `UIAccessibility`.   **À vérifier&amp;nbsp;: **  - Les mots/textes dans une langue différente de celle du reste de l’application sont bien vocalisés dans leur langue  **Objectif utilisateur&amp;nbsp;: **  Assurer une compréhension des textes de l’application.   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android.html#les-criteres-incontournables-sous-android"] = "Les critères incontournables sous Android";
index.add({
    url: "criteria-android.html#les-criteres-incontournables-sous-android",
    title: "Les critères incontournables sous Android",    
    body: "# Les critères incontournables sous Android  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Les critères incontournables sous Android\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Pour le développement\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;}     ]);     });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["criteria-android.html#pour-la-conception"] = "Pour la conception";
index.add({
    url: "criteria-android.html#pour-la-conception",
    title: "Pour la conception",    
    body: "## Pour la conception  Ce socle de critères destiné aux applications mobiles Android Orange permettent d’éviter les erreurs d’accessibilité.    La mise en œuvre de ce socle doit permettre d’obtenir à coup sûr un site accessible. Ce socle pose les fondations qui permettent de s’engager dans une démarche de mise en accessibilité.  Le respect de la charte Orange pour Android, document disponible sur [le site de la marque Orange](http://design.orange.com/) est un prérequis à l’utilisation de ce socle. Certains points déjà présents dans la charte Orange (utilisation des couleurs notamment) n’ont pas été repris dans cette liste de critères.  "
});

documentTitles["criteria-android.html#pour-le-developpement"] = "Pour le développement";
index.add({
    url: "criteria-android.html#pour-le-developpement",
    title: "Pour le développement",    
    body: "## Pour le développement  Les critères incontournables pour le développement ont pour vocation d’aider les développeurs avec les principales options d’accessibilité du &lt;abbr&gt;SDK&lt;/abbr&gt; Android. À travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d’accessibilité et propose des liens vers la documentation officielle de Google. &lt;div class=\&quot;col-xs-12\&quot;&gt;     &lt;div class=\&quot;row\&quot;&gt;         &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;             &lt;h2 class=\&quot;sr-only\&quot;&gt;Critères incontournables sous Android pour la conception&lt;/h2&gt;                       &lt;a href=\&quot;./criteria-android-conception.html\&quot; class=\&quot;btn btn-info\&quot;&gt;                 ![](./images/android.png)                 &lt;div&gt;Critères incontournables sous Android pour la conception&lt;/div&gt;             &lt;/a&gt;         &lt;/div&gt;         &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;             &lt;h2 class=\&quot;sr-only\&quot;&gt;Critères incontournables sous Android pour le développement&lt;/h2&gt;                       &lt;a href=\&quot;./criteria-android-dev.html\&quot; class=\&quot;btn btn-info\&quot;&gt;                 ![](./images/android.png)                 &lt;div&gt;Critères incontournables sous Android pour le développement&lt;/div&gt;             &lt;/a&gt;         &lt;/div&gt;         &lt;/div&gt;     &amp;nbsp;&amp;nbsp; &lt;/div&gt; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios.html#les-criteres-incontournables-sous-ios"] = "Les critères incontournables sous iOS";
index.add({
    url: "criteria-ios.html#les-criteres-incontournables-sous-ios",
    title: "Les critères incontournables sous iOS",    
    body: "# Les critères incontournables sous iOS  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Les critères incontournables sous iOS\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Pour la conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Pour le développement\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;}     ]);     });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["criteria-ios.html#pour-la-conception"] = "Pour la conception";
index.add({
    url: "criteria-ios.html#pour-la-conception",
    title: "Pour la conception",    
    body: "## Pour la conception  Ce socle de critères destiné aux applications mobiles iOS Orange permettent d’éviter les erreurs d’accessibilité.    La mise en œuvre de ce socle doit permettre d’obtenir à coup sûr un site accessible. Ce socle pose les fondations qui permettent de s’engager dans une démarche de mise en accessibilité.  Le respect de la charte Orange pour iOS, document disponible sur [le site de la marque Orange](http://design.orange.com/) est un prérequis à l’utilisation de ce socle. Certains points déjà présents dans la charte Orange (utilisation des couleurs notamment) n’ont pas été repris dans cette liste de critères.  "
});

documentTitles["criteria-ios.html#pour-la-developpement"] = "Pour la développement";
index.add({
    url: "criteria-ios.html#pour-la-developpement",
    title: "Pour la développement",    
    body: "## Pour la développement  Les critères incontournables pour le développement ont pour vocation d’aider les développeurs avec les principales options d’accessibilité du &lt;abbr&gt;SDK&lt;/abbr&gt; iOS. À travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d’accessibilité et propose des liens vers la documentation officielle d'Apple.  &lt;div class=\&quot;col-xs-12\&quot;&gt;     &lt;div class=\&quot;row\&quot;&gt;         &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;             &lt;h2 class=\&quot;sr-only\&quot;&gt;Critères incontournables sous iOS pour la conception&lt;/h2&gt;                       &lt;a href=\&quot;./criteria-ios-conception.html\&quot; class=\&quot;btn btn-info\&quot;&gt;                 ![](./images/iphone.png)                 &lt;div&gt;Critères incontournables sous iOS pour la conception&lt;/div&gt;             &lt;/a&gt;         &lt;/div&gt;         &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;             &lt;h2 class=\&quot;sr-only\&quot;&gt;Critères incontournables sous iOS pour le développement&lt;/h2&gt;                       &lt;a href=\&quot;./criteria-ios-dev.html\&quot; class=\&quot;btn btn-info\&quot;&gt;                 ![](./images/iphone.png)                 &lt;div&gt;Critères incontournables sous iOS pour le développement&lt;/div&gt;             &lt;/a&gt;         &lt;/div&gt;         &lt;/div&gt;     &amp;nbsp;&amp;nbsp; &lt;/div&gt; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["index.html#recommandations-accessibilite-orange-pour-les-mobiles"] = "Recommandations accessibilité Orange pour les mobiles";
index.add({
    url: "index.html#recommandations-accessibilite-orange-pour-les-mobiles",
    title: "Recommandations accessibilité Orange pour les mobiles",    
    body: "# Recommandations accessibilité Orange pour les mobiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Présentation\&quot;}]); });&lt;/script&gt;  *** L’accessibilité, une nécessité pour certains, un avantage pour tous&amp;nbsp;! ***  "
});

documentTitles["index.html#definition-de-laccessibilite-mobile"] = "Définition de l’accessibilité mobile";
index.add({
    url: "index.html#definition-de-laccessibilite-mobile",
    title: "Définition de l’accessibilité mobile",    
    body: "## Définition de l’accessibilité mobile ** C’est une application utilisable par tous **  - personnes valides&amp;nbsp;; - seniors&amp;nbsp;; - personnes en situation de handicap (temporaire ou permanent)&amp;nbsp;;  ** et dans tous les contextes **  - avec tous types de matériel&amp;nbsp;: navigateurs mobiles, Android, iOS, tablette&amp;nbsp;; - dans un contexte dégradé&amp;nbsp;: mauvaise luminosité, etc.&amp;nbsp;; - avec des logiciels spécifiques de compensation du handicap.  "
});

documentTitles["index.html#organisation-de-ce-site"] = "Organisation de ce site";
index.add({
    url: "index.html#organisation-de-ce-site",
    title: "Organisation de ce site",    
    body: "## Organisation de ce site  "
});

documentTitles["index.html#criteres-mobiles"] = "Critères mobiles";
index.add({
    url: "index.html#criteres-mobiles",
    title: "Critères mobiles",    
    body: "### Critères mobiles Liste des différents critères d’accessibilité à respecter pour obtenir une application mobile (Android ou iOS) accessible. Un bon moyen de prendre connaissance des critères à respecter pour s’engager vers une démarche de mise en accessibilité.   "
});

documentTitles["index.html#guide-pour-les-developpeurs"] = "Guide pour les développeurs";
index.add({
    url: "index.html#guide-pour-les-developpeurs",
    title: "Guide pour les développeurs",    
    body: "### Guide pour les développeurs Section à destination des développeurs. Tout ce qu’il faut savoir pour coder accessible sur mobile, sous Android ou iOS.  "
});

documentTitles["index.html#mdan"] = "mDAN";
index.add({
    url: "index.html#mdan",
    title: "mDAN",    
    body: "### mDAN Présentation de l’application mDAN, le démonstrateur d’accessibilité numérique pour mobile. Vous y trouverez également des liens pour télécharger l’application (Android et iOS).  "
});

documentTitles["index.html#lecteur-decran"] = "Lecteur d’écran";
index.add({
    url: "index.html#lecteur-decran",
    title: "Lecteur d’écran",    
    body: "### Lecteur d’écran Un guide simple pour utiliser les lecteurs d’écran d’iOS et d’Android, respectivement &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;.  "
});

documentTitles["index.html#liens-utiles"] = "Liens utiles";
index.add({
    url: "index.html#liens-utiles",
    title: "Liens utiles",    
    body: "### Liens utiles Quelques liens utiles qui pourront compléter les explications de ce site.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["mdan.html#demonstrateur-daccessibilite-sur-mobile-mdan"] = "Démonstrateur d’accessibilité sur mobile mDAN";
index.add({
    url: "mdan.html#demonstrateur-daccessibilite-sur-mobile-mdan",
    title: "Démonstrateur d’accessibilité sur mobile mDAN",    
    body: "# Démonstrateur d’accessibilité sur mobile mDAN     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Démonstrateur d’accessibilité sur mobile mDAN\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;mdan\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["mdan.html#mdan-kesakonbsp"] = "mDAN, kesako&amp;nbsp;?";
index.add({
    url: "mdan.html#mdan-kesakonbsp",
    title: "mDAN, kesako&amp;nbsp;?",    
    body: "## mDAN, kesako&amp;nbsp;?  mDAN est une application mobile (Android et iOS) visant à présenter l’accessibilité d’un système mobile sous toutes ses formes. Ses objectifs sont&amp;nbsp;:  - présentation de l’accessibilité, - critères d’accessibilité mobile, - guide pour les développeurs, - guide d’utilisation du lecteur d’écran (&lt;span lang=\&quot;en\&quot;&gt;Talkback&lt;/span&gt; ou &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;), - présentation des options d’accessibilité par plate-forme, - contact, etc.  "
});

documentTitles["mdan.html#mdan-oui-mais-pour-quinbsp"] = "mDAN, oui, mais pour qui&amp;nbsp;?";
index.add({
    url: "mdan.html#mdan-oui-mais-pour-quinbsp",
    title: "mDAN, oui, mais pour qui&amp;nbsp;?",    
    body: "## mDAN, oui, mais pour qui&amp;nbsp;?  mDAN, de par son contenu riche, cible la plupart des corps de métier susceptibles d’être impactés par l’accessibilité&amp;nbsp;:   - testeurs&amp;nbsp;: avec les critères d’accessibilité et le guide d’utilisation du lecteur d’écran&amp;nbsp;; - développeurs&amp;nbsp;: avec le guide de développement&amp;nbsp;; - managers, designers, etc&amp;nbsp;: pour la sensibilisation à l’accessibilité.  Pour tout le monde en somme&amp;nbsp;!  "
});

documentTitles["mdan.html#je-veux-mdannbsp"] = "Je veux mDAN&amp;nbsp;!";
index.add({
    url: "mdan.html#je-veux-mdannbsp",
    title: "Je veux mDAN&amp;nbsp;!",    
    body: "## Je veux mDAN&amp;nbsp;! [Le code source est disponible sur github](https://github.com/Orange-OpenSource/m-dan)  L'application mDAN sera prochainement disponible pour Android et iOS sur le &lt;span lang=\&quot;en\&quot;&gt;Play Store&lt;/span&gt; et l'&lt;span lang=\&quot;en\&quot;&gt;App Store&lt;/span&gt;.  Vous pouvez déjà [télécharger la version Android](/mDAN_v2.2.0.apk)  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader.html#guide-dutilisation-des-lecteurs-decran-span-langentalkbackspan-et-span-langenvoiceoverspan"] = "Guide d’utilisation des lecteurs d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;";
index.add({
    url: "screen-reader.html#guide-dutilisation-des-lecteurs-decran-span-langentalkbackspan-et-span-langenvoiceoverspan",
    title: "Guide d’utilisation des lecteurs d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;",    
    body: "# Guide d’utilisation des lecteurs d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Lecteur d’écran\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Sous Android\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;},          {\&quot;label\&quot;:\&quot;Sous iOS\&quot;,\&quot;url\&quot;:\&quot;screen-reader-voiceover.html\&quot;}     ]);                 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  À travers cette section, nous allons présenter les gestes de base pour une utilisation des lecteurs d’écran d’Android et iOS. Ces outils sont riches en fonctionnalités mais nécessitent une connaissance minimale pour être utilisés efficacement. C’est cette utilisation standard qui sera présentée ici.  Deux versions sont disponibles&amp;nbsp;: - **&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;** le lecteur d’écran intégré à Android. - **&lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;**  le lecteur d’écran intégré à iOS.  &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;&lt;/h2&gt;               &lt;a href=\&quot;./screen-reader-talkback.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/android.png)         &lt;div&gt;Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt; &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;Voiceover&lt;/h2&gt;               &lt;a href=\&quot;./screen-reader-voiceover.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/iphone.png)         &lt;div&gt;Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt;              &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader-talkback.html#guide-dutilisation-de-span-langentalkbackspan"] = "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;";
index.add({
    url: "screen-reader-talkback.html#guide-dutilisation-de-span-langentalkbackspan",
    title: "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;",    
    body: "# Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([         {\&quot;label\&quot;:\&quot;lecteur d’écran\&quot;, \&quot;url\&quot;: \&quot;./screen-reader.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide d’utilisation de &lt;span lang=\\&quot;en\\&quot;&gt;TalkBack&lt;/span&gt;\&quot;}     ]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Sous Android\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;Sous iOS\&quot;,\&quot;url\&quot;:\&quot;screen-reader-voiceover.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est un lecteur d’écran intégré à Android qui décrit à haute voix les éléments qui apparaissent sur l’écran du téléphone. Il est gratuit et permet à un utilisateur non- ou malvoyant, dyslexique ou illettré de pouvoir vocaliser tous les éléments visibles contenus dans la page. Un outil comme &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est appelé indifféremment lecteur d’écran ou synthèse vocale, même si un lecteur d’écran est en fait un logiciel associé à une synthèse vocale.  Lorsque &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé, les gestes standards effectués sur l’écran tactile donnent des résultats différents. En outre, des gestes supplémentaires permettent de déplacer le focus à l’écran et de contrôler les éléments sélectionnés. &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; comprend des gestes de toucher et de balayage à un, deux et trois doigts. Nous décrivons ici les gestes de base pour une utilisation courante de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. À noter&amp;nbsp;: &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; n’est considéré comme accessible qu’à partir de la version &lt;span lang=\&quot;en\&quot;&gt;JellyBean&lt;/span&gt; (4.1) car on peut naviguer séquentiellement.  Avant toute chose, commencez par mettre à jour &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;&amp;nbsp;: [page de l’application sur le &lt;span lang=\&quot;en\&quot;&gt;PlayStore&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback)  "
});

documentTitles["screen-reader-talkback.html#gestes-de-bases"] = "Gestes de bases";
index.add({
    url: "screen-reader-talkback.html#gestes-de-bases",
    title: "Gestes de bases",    
    body: "## Gestes de bases &lt;ul class=\&quot;list-gesture\&quot;&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;Se déplacer avec un doigt sur l’écran&lt;/h3&gt;     &lt;p&gt;Explorer l’écran et entendre la vocalisation de l’élément qui est touché.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;Double-cliquer n’importe où sur l’écran&lt;/h3&gt;     &lt;p&gt;Ouvrir ou activer l’élément qui a été touché (vocalisé) en dernier.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture3_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;img src=\&quot;./images/gesture3_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le haut ou le bas en utilisant deux doigts&lt;/h3&gt;     &lt;p&gt;Se déplacer verticalement sur une liste ou sur une page à condition qu’elle soit sélectionnée. Correspond à un &lt;span lang=\&quot;en\&quot;&gt;slide&lt;/span&gt; vertical.&lt;/p&gt;               &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture4_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;img src=\&quot;./images/gesture4_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;         &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la gauche ou la droite en utilisant deux doigts&lt;/h3&gt;     &lt;p&gt;Changer de page ou d’écran quand c’est possible. Correspond à un &lt;span lang=\&quot;en\&quot;&gt;slide&lt;/span&gt; horizontal.&lt;/p&gt;               &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la droite en utilisant un doigt&lt;/h3&gt;     &lt;p&gt;Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; sur l’élément suivant.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la gauche en utilisant un doigt&lt;/h3&gt;     &lt;p&gt;Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; sur l’élément précédent.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;         &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le haut en utilisant un doigt&lt;/h3&gt;     &lt;p&gt;Changer de mode de lecture&amp;nbsp;: « pages », « par défaut (éléments) », « caractères », « mots », « lignes » et « paragraphes ».&lt;/p&gt;                 &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;         &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le bas en utilisant un doigt&lt;/h3&gt;     &lt;p&gt;Explorer l’écran et entendre la vocalisation de l’élément qui est touché.&lt;/p&gt;   &lt;/li&gt; &lt;/ul&gt;    &lt;span class=\&quot;licence\&quot; lang=\&quot;en\&quot;&gt;These images are licensed under a Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot; hreflang=\&quot;en\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  Pour plus d’information sur &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et une description détaillée de ses fonctionnalités, nous vous invitons à lire la [documentation officielle de Google sur &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](https://support.google.com/accessibility/android/answer/6283677?hl=fr&amp;ref_topic=3529932).    &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader-voiceover.html#guide-dutilisation-de-span-langenvoiceoverspan"] = "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;";
index.add({
    url: "screen-reader-voiceover.html#guide-dutilisation-de-span-langenvoiceoverspan",
    title: "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;",    
    body: "# Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([         {\&quot;label\&quot;:\&quot;lecteur d’écran\&quot;, \&quot;url\&quot;: \&quot;./screen-reader.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide d’utilisation de &lt;span lang=\\&quot;en\\&quot;&gt;VoiceOver&lt;/span&gt;\&quot;}     ]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Sous Android\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;},          {\&quot;label\&quot;:\&quot;Sous iOS\&quot;,\&quot;url\&quot;:\&quot;screen-reader-voiceover.html\&quot;, \&quot;expanded\&quot;: true}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est un lecteur d’écran intégré qui décrit à haute voix les éléments qui apparaissent sur l’écran de votre téléphone. Il est gratuit et permet à un utilisateur non- ou malvoyant, dyslexique ou illettré de pouvoir vocaliser tous les éléments visibles contenus dans la page. Un outil comme &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est appelé indifféremment lecteur d’écran ou synthèse vocale, même si un lecteur d’écran est en fait un logiciel associé à une synthèse vocale.    Lorsque &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé, les gestes standards effectués sur l’écran tactile donnent des résultats différents ; en outre, des gestes supplémentaires permettent de se déplacer à l’écran et de contrôler des éléments sélectionnés. &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; comprend des gestes de toucher et de balayage à deux, trois et quatre doigts. Nous décrirons ici les gestes de base pour une utilisation courante de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;.  "
});

documentTitles["screen-reader-voiceover.html#gestes-de-bases"] = "Gestes de bases";
index.add({
    url: "screen-reader-voiceover.html#gestes-de-bases",
    title: "Gestes de bases",    
    body: "## Gestes de bases &lt;ul class=\&quot;list-gesture\&quot;&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;         &lt;h3&gt;Se déplacer avec un doigt sur l’écran&lt;/h3&gt;     &lt;p&gt;Explorer l’écran et entendre la vocalisation de l’élément qui est touché.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;Double-cliquer n’importe où sur l’écran&lt;/h3&gt;     &lt;p&gt;Ouvrir ou activer l’élément qui a été touché (vocalisé) en dernier.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture9_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;img src=\&quot;./images/gesture9_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le haut ou le bas en utilisant trois doigts&lt;/h3&gt;     &lt;p&gt;Se déplacer verticalement sur une liste ou sur une page à condition qu’elle soit sélectionnée. Correspond à un &lt;span lang=\&quot;en\&quot;&gt;slide&lt;/span&gt; vertical.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;         &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la gauche ou la droite  en utilisant trois doigts&lt;/h3&gt;       &lt;p&gt;Changer de page ou d’écran quand c’est possible. Correspond à un &lt;span lang=\&quot;en\&quot;&gt;slide&lt;/span&gt; horizontal.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;           &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;         &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la droite en utilisant un doigt&lt;/h3&gt;       &lt;p&gt;Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sur le prochain élément.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;         &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la gauche en utilisant un doigt&lt;/h3&gt;       &lt;p&gt;Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sur l’élément précédent.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;          &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le haut en utilisant un doigt&lt;/h3&gt;       &lt;p&gt;Permet d’augmenter la valeur d’un élément ajustable.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le bas en utilisant un doigt&lt;/h3&gt;       &lt;p&gt;Permet de diminuer la valeur d’un élément ajustable.&lt;/p&gt;   &lt;/li&gt; &lt;/ul&gt;    &lt;span class=\&quot;licence\&quot; lang=\&quot;en\&quot;&gt;These images are licensed under a Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot; hreflang=\&quot;en\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  Pour plus d’informations sur &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; et une description détaillée des fonctionnalités qu’il propose, nous vous invitons à lire la [documentation officielle d’Apple sur &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;](https://help.apple.com/iphone/9/#/iph3e2e415f).    &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["links.html#liens-utiles"] = "Liens utiles";
index.add({
    url: "links.html#liens-utiles",
    title: "Liens utiles",    
    body: "# Liens utiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Liens utiles\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;links\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["links.html#en-complement"] = "En complément";
index.add({
    url: "links.html#en-complement",
    title: "En complément",    
    body: "## En complément Vous trouverez de l’information sur le développement accessible pour iOS et Android sur [le dépôt github de la DISIC](https://github.com/DISIC/guide-mobile_app_dev_natif) (Direction Interministérielle des Systèmes d’Information et de Communication)&amp;nbsp;: - [Guide d’audit d’applications mobiles](https://github.com/DISIC/guide-mobile_app_audit) - [Guide de conception d’applications mobiles accessibles](https://github.com/DISIC/guide-mobile_app_conception) - [Guide de développement d’applications mobiles hybrides accessibles avec Ionic et OnsenUI](https://github.com/DISIC/guide-mobile_app_dev_hybride)  "
});

documentTitles["links.html#pour-android"] = "Pour Android";
index.add({
    url: "links.html#pour-android",
    title: "Pour Android",    
    body: "## Pour Android Présentation de l’accessibilité sous Android et de l’&lt;abbr&gt;API&lt;/abbr&gt; Google   - [Documentation officielle de Google](https://developer.android.com/guide/topics/ui/accessibility/index.html)   - [Guide complet de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](https://support.google.com/accessibility/android/answer/6283677?hl=fr&amp;ref_topic=3529932)  Application &lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt; pour vous aider à tester une partie de l’accessibilité de vos applications rapidement et simplement - [Application &lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr)  "
});

documentTitles["links.html#pour-ios"] = "Pour iOS";
index.add({
    url: "links.html#pour-ios",
    title: "Pour iOS",    
    body: "## Pour iOS Présentation de l’accessibilité sous iOS et de l’&lt;abbr&gt;API&lt;/abbr&gt; Apple - [Documentation officielle de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité Apple](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/iPhoneAccessibility/Introduction/Introduction.html) - [Présentation des options d’accessibilité d’iOS](http://www.apple.com/fr/accessibility/) - [Page officielle de l’accessibilité sous Apple](https://developer.apple.com/accessibility/ios/) - [Utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;](https://help.apple.com/iphone/9/#/iph3e2e415f)   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});


