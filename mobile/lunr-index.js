
var index = lunr(function () {
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["contact.html#votre-avis-compte"] = "Votre avis compte";
index.add({
    url: "contact.html#votre-avis-compte",
    title: "Votre avis compte",    
    body: "# Votre avis compte    &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Contact\&quot;}]); });&lt;/script&gt;  Vous avez une remarque, une suggestion à apporter ?    Vérifiez que ceci n'a pas déjà été remonté par quelqu'un d'autre en consultant [la liste des \&quot;issues\&quot;](https://github.com/Orange-OpenSource/a11y-guidelines/issues) sur notre compte github.   Si vous ne trouvez rien concernant votre remarque, [adressez-nous votre commentaire](https://github.com/Orange-OpenSource/a11y-guidelines/issues/new) via github. &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["about.html#a-propos"] = "A propos";
index.add({
    url: "about.html#a-propos",
    title: "A propos",    
    body: "# A propos     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;A propos\&quot;}]); });&lt;/script&gt;  Documentation sous [licence CC BY SA 3.0](https://github.com/Orange-OpenSource/a11y-guidelines/blob/master/LICENSE). Le code source de ce site ainsi que celui des exemples est disponible [sur notre compte github](https://github.com/Orange-OpenSource/a11y-guidelines).    Le logo Orange ainsi que certaines images et captures sont la propriété d'Orange:    Copyright (C) 2016 Orange SA All rights reserved   [Liste des fichiers concernés](/NOTICE.txt)   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["dev-mobile.html#guide-developpeur-mobile"] = "Guide développeur mobile";
index.add({
    url: "dev-mobile.html#guide-developpeur-mobile",
    title: "Guide développeur mobile",    
    body: "# Guide développeur mobile  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Guide pour les développeurs mobiles\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;dev-mobile\&quot;&gt;&lt;/span&gt;  Le guide pour développeur a pour vocation d'aider les développeurs avec les principales options d'accessibilité du SDK Android/iOS. A travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d'accessibilité et propose des liens vers la documentation officielle de Google/Apple.  Deux versions sont donc disponibles : - **Version Android** concerne le développement d'application destiné à la plateforme de Google, Android. - **Version iOS** concerne le développement d'application destiné à la plateforme d'Apple, iOS.  &lt;p class=\&quot;row\&quot;&gt;     &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;         &lt;h2 class=\&quot;sr-only\&quot;&gt;critères Android&lt;/h2&gt;                   &lt;a href=\&quot;./dev-android.html\&quot; class=\&quot;btn btn-info\&quot;&gt;             ![](./images/android.png)             &lt;div&gt;Guide développeur Android&lt;/div&gt;         &lt;/a&gt;     &lt;/div&gt;     &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;         &lt;h2 class=\&quot;sr-only\&quot;&gt;critères iOS&lt;/h2&gt;                   &lt;a href=\&quot;./dev-ios.html\&quot; class=\&quot;btn btn-info\&quot;&gt;             ![](./images/iphone.png)             &lt;div&gt;Guide développeur iOS&lt;/div&gt;         &lt;/a&gt;     &lt;/div&gt;             &lt;/p&gt;  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["dev-android.html#guide-daccessibilite-android"] = "Guide d'accessibilité Android";
index.add({
    url: "dev-android.html#guide-daccessibilite-android",
    title: "Guide d'accessibilité Android",    
    body: "# Guide d'accessibilité Android  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Guide développeur\&quot;, \&quot;url\&quot;: \&quot;./dev-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide développeur Android\&quot;} 	]);     addSubMenu();      });&lt;/script&gt;  &lt;span data-menuitem=\&quot;dev-mobile\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différentes options d'accessibilité du SDK Android.  travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d'accessibilité et propose des liens vers la documentation officielle de Google. Des exemples de codes sont aussi présents pour illustrer les propos.  "
});

documentTitles["dev-android.html#alternatives-textuelles"] = "Alternatives textuelles";
index.add({
    url: "dev-android.html#alternatives-textuelles",
    title: "Alternatives textuelles",    
    body: "## Alternatives textuelles **Description : **    Sous Android, la vocalisation d'un élément s'effectue à travers un attribut, à savoir le `contentDescription`. Cet attribut qui accepte une simple chaîne de caractère en paramètre (et donc internationalisable) redéfinit complètement le texte qui sera lu par le service d'accessibilité et notamment TalkBack. Cela permet d'avoir un texte de composant plus explicite que celui affiché à l'écran. Par exemple, dans le cas d'un bouton dont le titre est « OK », on pourra indiquer que le bouton sert à valider un choix.    Le `contentDescription` doit aussi être utilisé sur les éléments custom pour indiquer leur nature. Par exemple, un `LinearLayout` que l'on rendrait cliquable doit avoir un `contentDescription` type « nom_du_bouton, bouton » (il faut également permettre le focus du bouton à l'accessibilité, voir la section correspondante).    À noter que le `contentDescription` est disponible sous tout élément qui hérite de `View`. Il est donc possible de positionner un `contentDescription` sur une `TextView` par exemple, comme montré dans la section « guide d'accessibilité – alternative textuelle – abréviations, dates et heures ».     **Exemples : **     Exemple simple (internationalisé) :   `myTextView.setContentDescription(getString(R.string.criteria_alt_ex1_cd_txt2));`  Indiquer l'état et la nature de TabHost (non internationalisé) :   &lt;pre&gt;&lt;code&gt;private class TabHostListener implements TabHost.OnTabChangeListener { 	[...] 	public void onTabChanged(String tabId) {setContentDescription(mTabHost, mTabsLabel);} }  private void setContentDescription(TabHost mTabHost, String[] mTabsLabel) { 	int tab = mTabHost.getCurrentTab(); 	int tabCount = mTabHost.getTabWidget().getTabCount();  	for (int tabNumber = 0; tabNumber &lt; tabCount; tabNumber++) { 		CharSequence contentDescription = mTabsLabel[tabNumber];  		contentDescription = contentDescription + \&quot;, onglet \&quot; + (tabNumber + 1) + \&quot; sur \&quot; + tabCount; 		if (tabNumber == tab) { 			contentDescription = contentDescription + \&quot;, sélectionné\&quot;; 		} 		mTabHost.getTabWidget().getChildAt(tabNumber).setContentDescription(contentDescription); 	} }&lt;/code&gt;&lt;/pre&gt;  **Lien : **  - [contentDescription](http://developer.android.com/reference/android/view/View.html#attr_android:contentDescription)     "
});

documentTitles["dev-android.html#masquer-des-elements-a-laccessibilite"] = "Masquer des éléments à l'accessibilité";
index.add({
    url: "dev-android.html#masquer-des-elements-a-laccessibilite",
    title: "Masquer des éléments à l'accessibilité",    
    body: "## Masquer des éléments à l'accessibilité    **Description : **    Il est possible via un attribut d'accessibilité de masquer des éléments aux outils d'accessibilité (TalkBack par exemple). Par extension, il est possible de forcer certains éléments à être visibles aux outils d'accessibilité.   `ImportantForAccessibility` : suivant la valeur de l'attribut, cela permet d'indiquer qu'un élément est visible ou non de l'API d'accessibilité.   -	`auto` (0) : valeur par défaut, c'est le système qui décide. Par exemple, un `Button` aura sa valeur par défaut à 1 (&lt;i&gt;yes&lt;/i&gt;) et un `LinearLayout` à 2 (&lt;i&gt;no&lt;/i&gt;). -	`yes` (1) : la vue est importante pour l'accessibilité. Elle peut par exemple recevoir le focus de TalkBack. -	`no`(2) : la vue n'est pas importante pour l'accessibilité. Elle ne déclenche plus d'évènement d'accessibilité et est par conséquent ignorée par des services tel que TalkBack. -	`noHideDescendants`  (4) : la vue n'est pas importante pour l'accessibilité, mais également toutes ses vues filles. Cela permet de cacher tous les éléments d'une vue à l'accessibilité en une seule fois. Très utile sur les éléments custom.      À noter : l'attribut « `importantForAccessibility` » est disponible pour tout élément qui hérite de `View`.  **Exemples : **  Depuis le xml :  `android:importantForAccessibility=\&quot;no\&quot;`  Depuis le code : `myView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS);`  **Lien : **       - [importantForAccessibility](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility%28int%29)   "
});

documentTitles["dev-android.html#declencher-une-vocalisation"] = "Déclencher une vocalisation";
index.add({
    url: "dev-android.html#declencher-une-vocalisation",
    title: "Déclencher une vocalisation",    
    body: "## Déclencher une vocalisation  **Description : **    Il est très facile de déclencher des vocalisations avec TalkBack. Déclencher une vocalisation est très utile dans le cas de contenu dynamique, au même titre que les `LiveRegion` (voir la section correspondante). Pour déclencher une vocalisation, il suffit de faire appel à la méthode `announceForAccessibility` en lui passant en paramètre l'id de la chaine de caractère à vocaliser.    À noter : la méthode `announceForAccessibility` est disponible sur tout élément qui hérite de `View` et se fait dans la langue du système.  Attention: nous parlons ici de vocalisation TalkBack et non pas de TTS (Text To Speech) qui peut fonctionner indépendamment du statut de TalkBack.  **Exemple : **  Il est fréquent de tester la version d'Android avant de déclencher une vocalisation TalkBack. En effet, `announceForAccessibility` ne fonctionne que depuis l'arrivée d'Android Jelly Bean. &lt;pre&gt;&lt;code&gt;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) { 	getView().announceForAccessibility(getString(R.string.criteria_contentchange_ex1_announce)); }&lt;/code&gt;&lt;/pre&gt;  **Lien : **  - [announceForAccessibility](https://developer.android.com/reference/android/view/View.html#announceForAccessibility%28java.lang.CharSequence%29)   "
});

documentTitles["dev-android.html#detecter-si-talkback-est-active"] = "Détecter si TalkBack est activé";
index.add({
    url: "dev-android.html#detecter-si-talkback-est-active",
    title: "Détecter si TalkBack est activé",    
    body: "## Détecter si TalkBack est activé  **Description : **   Sous Android, il est possible de savoir si l'API d'accessibilité est activée, et par extension de savoir si TalkBack est activé.  **À l'usage : **   &lt;pre&gt;&lt;code&gt;AccessibilityManager am = (AccessibilityManager) context.getSystemService(ACCESSIBILITY_SERVICE);   boolean isAccessibilityEnabled = am.isEnabled();&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["dev-android.html#regions-live-contenu-dynamique"] = "Régions Live (contenu dynamique)";
index.add({
    url: "dev-android.html#regions-live-contenu-dynamique",
    title: "Régions Live (contenu dynamique)",    
    body: "## Régions Live (contenu dynamique)  **Description : **  Il est possible de spécifier à une vue qu'elle est une région « live », c'est-à-dire que son contenu est susceptible d'être modifié dynamiquement et qu'elle doit dans ce cas prévenir l'API d'accessibilité. Cela aura pour conséquence de générer des vocalisations avec TalkBack. Un exemple type d'utilisation : sur un formulaire, si l'utilisateur fait une erreur et qu'un message d'erreur apparaît, la vue contenant le message doit être définie comme une région « live ».  Il faut passer par la méthode `setAccessibilityLiveRegion` qui prend en paramètre un mode pour la région live. Il existe 3 modes :   -	`ACCESSIBILITY_LIVE_REGION_NONE` : cette vue n'est pas une région « live ». C'est la valeur par défaut de la plupart des vues. -	`ACCESSIBILITY_LIVE_REGION_POLITE` : en cas de changement dans la vue, des vocalisations sont effectuées sur les changements. Ces vocalisations sont « polies » : elles sont moins prioritaires que les vocalisations système par exemple. -	`ACCESSIBILITY_LIVE_REGION_ASSERTIVE` : en cas de changement dans la vue, des vocalisations seront effectuées sur les changements. Ces vocalisations sont « rudes » : elles sont prioritaires et immédiatement vocalisées.    À noter : la méthode `setAccessibilityLiveRegion` est disponible sur tout élément qui hérite de `View`.  **Exemples : **  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView    [...]    android:accessibilityLiveRegion=\&quot;polite\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Lien : **  - [setAccessibilityLiveRegion](https://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion%28int%29)   "
});

documentTitles["dev-android.html#gerer-lordre-de-lecture-talkback"] = "Gérer l'ordre de lecture (TalkBack)";
index.add({
    url: "dev-android.html#gerer-lordre-de-lecture-talkback",
    title: "Gérer l'ordre de lecture (TalkBack)",    
    body: "## Gérer l'ordre de lecture (TalkBack)  **Description : **    L'ordre du focus de la synthèse vocale par défaut prend en compte plusieurs paramètres : la lecture « logique », (en France) soit de gauche à droite et de haut en bas, et la lecture du xml (ordre de déclaration des éléments). Il est tout à fait possible de redéfinir cet ordre de lecture avec deux outils :   -	`accessibilityTraversalAfter` : prend un id en paramètre et permet de spécifier à la vue qu'elle doit être décrite par l'accessibilité après la vue passée en paramètre. - `accessibilityTraversalBefore` : prend un id en paramètre et permet de spécifier à la vue qu'elle doit être décrite par l'accessibilité avant la vue passée en paramètre.  À noter : ces attributs peuvent être utilisés directement dans le xml mais également dans le code via les méthodes `setAccessibilityTraversalAfter` et `setAccessibilityTraversalBefore`. Ces méthodes sont disponibles pour tout élément qui hérite de `View`.  **Exemple : **   &lt;pre&gt;&lt;code&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); chaineplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); chainemoinsButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.chaineplus).getId());&lt;/code&gt;&lt;/pre&gt;  **Liens : **        - [setAccessibilityTraversalAfter](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalAfter%28int%29) - [setAccessibilityTraversalBefore](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalBefore%28int%29)   "
});

documentTitles["dev-android.html#formulaires"] = "Formulaires";
index.add({
    url: "dev-android.html#formulaires",
    title: "Formulaires",    
    body: "## Formulaires  **Description : **    Il est important que les champs de formulaire soient liés à un label. Il existe 2 grandes techniques pour réaliser cette liaison : -	`labelFor` : permet de spécifier à une vue qu'elle est le label d'une autre vue. Cette méthode prend en paramètre l'id de la vue que l'on labellise. On peut utiliser cette méthode avec quasiment tout type de champ de formulaire. Utilisable depuis le xml `android:labelFor` ou le code `setLabelFor`. `LabelFor` est utilisable depuis tout élément qui hérite de `View`. - `hint` : pour les `EditText` ou `TextView`. Permet d'ajouter un texte d'exemple quand le champ de texte est vide. Cette méthode ne marche que pour les `TextView`. Prend en paramètre l'id d'une chaîne de caractère. Utilisable depuis le xml `android:hint` ou le code `setHint`.  **Exemples : **  LabelFor dans le xml :  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView 	[...]   android:labelFor=\&quot;@+id/imageView11\&quot;   android:importantForAccessibility=\&quot;no\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt; 	Remarque : il est très fréquent, une fois le label lié à son champ, de masquer le label à l'accessibilité. En effet, celui ci n'a plus besoin d'être reconnu par l'api d'accessibilité car son champ de formulaire l'utilise déjà (et sera donc restitué vocalement par TalkBack par exemple).&lt;/br&gt; &lt;/br&gt; Hint dans le xml : &lt;pre&gt;&lt;code&gt;&amp;lt;EditText   [...]    android:hint=\&quot;@string/criteria_form_ex1_placeholder\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Liens : **  - [setLabelFor](https://developer.android.com/reference/android/view/View.html#setLabelFor%28int%29) - [setHint](https://developer.android.com/reference/android/widget/TextView.html#setHint%28java.lang.CharSequence%29)   "
});

documentTitles["dev-android.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "dev-android.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes  **Description : **    Afin de permettre à l'option « grands caractères » d'interagir correctement avec l'application, plusieurs points sont à respecter durant les développements. - Utiliser une taille de police dynamique : le « sp ». Cette unité, spécifique à Android, permet d'obtenir une taille de police en fonction de la densité de pixel de l'écran. Il est plus que recommandé de l'utiliser, ne serait-ce que pour obtenir un design uniforme sur tous les types de device Android. - Gérer les débordements de contenu : une erreur courante est d'utiliser une taille de texte dynamique (« sp » donc) mais de ne pas faire attention au conteneur. Si le texte grossit, le conteneur doit en faire autant pour ne pas qu'il y ait de débordement. On peut parfaitement jouer avec le `min-height` et le `height` des conteneurs pour obtenir un résultat correct (un `height` en `wrap_content` permet de laisser au système le soin de s'adapter).  **Lien : **  - [typographie sous Android](https://www.google.com/design/spec/style/typography.html#typography-styles)      "
});

documentTitles["dev-android.html#evenements-daccessibilite-custom-views"] = "Evénements d'accessibilité &amp; custom views";
index.add({
    url: "dev-android.html#evenements-daccessibilite-custom-views",
    title: "Evénements d'accessibilité &amp; custom views",    
    body: "## Evénements d'accessibilité &amp; custom views  **Description : **   Il existe sous Android un bon nombre d'événements liés à l'API d'accessibilité. Vous pouvez manipuler ces événements au même titre que d'autres événements. Ils permettent d'enrichir des composants custom insuffisamment accessibles. L'utilisation des événements d'accessibilité est assez rare dans les applications non dédiées à l'accessibilité, les autres options étant généralement suffisantes. Cependant, il faut savoir qu'ils existent et permettent de surcharger la vocalisation d'un composant.    Pour plus d'informations, nous vous invitons à regarder les liens ci-dessous.  **Exemple : **  Dans cet exemple, on intercepte les événements d'accessibilité. En fonction de leur type (un texte à changé dans la vue ou le composant est focus par TalkBack), nous construisons une vocalisation à destination de TalkBack. &lt;pre&gt;&lt;code&gt;@Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {    boolean result = super.dispatchPopulateAccessibilityEvent(event);    // Detect what type of accessibility event is being passed in.   int eventType = event.getEventType();    // Common case: The user has interacted with our view in some way. State may or may not have been changed. Read out the current status of the view.   if (eventType == AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED) {     event.getText().clear();     event.getText().add(\&quot;Valeur de la cagnotte : \&quot; + getBankValue() + \&quot;.\&quot;);     result = true;   }    // When a user first focuses on our view, we'll also read out some simple instructions to make it clear that this is an interactive element.   if (eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {     event.getText().add(\&quot;Cliquez pour lancer la roue et augmenter vos gains.\&quot;);     result = true;   }    return result; }&lt;/code&gt;&lt;/pre&gt;  **Liens : **  - [AccessibilityEvents](http://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html) - [Construire une vue custom accessible](http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views)     "
});

documentTitles["dev-android.html#webview"] = "WebView";
index.add({
    url: "dev-android.html#webview",
    title: "WebView",    
    body: "## WebView  **Description : **   Les `WebView` ont un traitement un peu particulier sous Android. Pour commencer, si on veut qu'une page soit accessible, il faut que le contenu HTML le soit, à savoir qu'il respecte les normes internationales sur le sujet : les WCAG2. Pour connaitre ces règles et apprendre les techniques de développement pour un web accessible, nous vous invitons à visiter la section de notre site consacrée au sujet : [recommandations accessibilité pour le web](../web/index.html).    Côté Android, il faut s'assurer que la WebView autorise le JavaScript : `mWebView.getSettings.setJavaScriptEnabled(true);`   Dans ces conditions, la page affichée à travers la `WebView`  réagit convenablement à l'API d'accessibilité.    "
});

documentTitles["dev-android.html#vocalisation-des-listes"] = "Vocalisation des listes";
index.add({
    url: "dev-android.html#vocalisation-des-listes",
    title: "Vocalisation des listes",    
    body: "## Vocalisation des listes  **Description : **   Il arrive parfois que les listes soient mal vocalisées : la synthèse vocale tente de vocaliser toute la liste en une seule fois (au moins ce qui est affiché à l'écran dans le cas de liste longue). C'est notamment le cas lorsque l'on utilise des `RecyclerView`. Pour palier à ce problème, une solution simple existe. Il suffit de positionner l'attribut `focusable` à `true` pour chaque item de la liste. Cela a pour effet de forcer la synthèse vocale (TalkBack) à lire les items un par un.   "
});

documentTitles["dev-android.html#navigation-au-focus-clavier"] = "Navigation au focus (clavier)";
index.add({
    url: "dev-android.html#navigation-au-focus-clavier",
    title: "Navigation au focus (clavier)",    
    body: "## Navigation au focus (clavier)  **Description : **  Pour gérer la navigation au focus, il faut s'assurer de 3 choses : - Permettre le focus sur les éléments interactifs : la navigation au focus ne concerne que les éléments interactifs. Si, par exemple, votre application possède des vues custom cliquables, il faut s'assurer que ces vues soient focusables en positionnant l'attribut `focusable` à `true`. - Gérer l'affichage du focus : tout élément interactif peut recevoir le focus, il faut donc que le `state_focused` soit défini et permette de distinguer d'un seul coup d'œil quel élément a le focus. - Gérer l'ordre du focus : à travers les options `nextFocusDown, nextFocusUp, nextFocusRight` et `nextFocusLeft`, vous pouvez spécifier quelle vue doit prendre le focus selon l'utilisation des flèches bas, haut, droit et gauche.    La plupart du temps, seuls les point 1 et 2 sont à prendre la compte. En effet, le système Android est capable de déterminer assez précisément les positions des éléments les uns par rapport aux autres et donc de fournir un ordre de lecture au clavier logique et cohérent.  À noter : `nextFocusDown, nextFocusUp, nextFocusRight, nextFocusLeft, focusable` ainsi que d'autres options de gestion du focus sont accessibles directement dans le xml ou dans le code à travers les méthodes correspondantes.  **Exemple : **  Exemple de sélecteur pour TabHost qui prend en compte l'état `state_focused` &lt;pre&gt;&lt;code&gt;&amp;lt;selector xmlns:android=\&quot;http://schemas.android.com/apk/res/android\&quot;&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_unselected_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_selected_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_unselected_focused_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_selected_focused_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Pressed --&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_unselected_pressed_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_selected_pressed_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_unselected_pressed_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_selected_pressed_tab_selector\&quot; /&amp;gt; &amp;lt;/selector&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Lien : **  - [Gestion du focus sous Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav) &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["dev-ios.html#guide-daccessibilite-ios"] = "Guide d'accessibilité iOS";
index.add({
    url: "dev-ios.html#guide-daccessibilite-ios",
    title: "Guide d'accessibilité iOS",    
    body: "# Guide d'accessibilité iOS  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Guide développeur\&quot;, \&quot;url\&quot;: \&quot;./dev-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide développeur iOS\&quot;} 	]);     addSubMenu();      });&lt;/script&gt;  &lt;span data-menuitem=\&quot;dev-mobile\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différentes options d'accessibilité du SDK iOS. À travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d'accessibilité et propose des liens vers la documentation officielle d'Apple. Des exemples de codes sont aussi présents pour illustrer les propos (la plupart du temps en Swift).  "
});

documentTitles["dev-ios.html#alternatives-textuelles"] = "Alternatives textuelles";
index.add({
    url: "dev-ios.html#alternatives-textuelles",
    title: "Alternatives textuelles",    
    body: "## Alternatives textuelles **Description : **    Sous iOS, la vocalisation d’un élément s’effectue à travers 4 attributs, à savoir le `label`, le `hint`, la `value` et le `trait`.   L’ordre de vocalisation est toujours le suivant : `label`, `value`, `trait` et `hint`. Cet ordre ne peut pas être changé et la vocalisation est réalisée en une seule fois, à l’arrivée sur l’élément.    Une section de ce guide est dédiée au trait, nous décrivons ici les 3 autres :   - `accessibilityLabel` : le `label` permet de préciser le titre spécifique à l’accessibilité qui est lu par VoiceOver en lieu et place du texte du composant si celui-ci en possède un. Cela permet d’avoir un texte de composant plus explicite que celui affiché à l’écran. Par exemple, dans le cas d’un bouton dont le titre est « OK », on peut indiquer que le bouton sert à valider un choix. - `accessibilityValue` : la valeur d’un élément est par défaut le pourcentage de progression (exemple : une barre de progression). À noter que pour la plupart des éléments ajustables disponibles dans le SDK, cette value n’a pas besoin d’être reprécisée (le système restitue automatiquement la valeur à l’utilisateur via VoiceOver). - `accessibilityHint` : le `hint` permet de décrire le comportement du composant. Exemple : « cliquez pour obtenir le résultat ».    Ces attributs d’accessibilité sont disponibles via l’interface builder, mais également via le code. Tout élément dérivant de `UIView` les possède par défaut. Ces attributs acceptent une chaine de caractère en option, et sont, par conséquent, facilement internationalisables.   **Exemples : **     Exemple simple (internationalisé) :   `accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_open_accessibilityHint\&quot;.localized`  Indiquer l'état et la nature d'onglets personnalisés :   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;@IBAction func buttonClicked(sender: AnyObject) { 	for button:UIButton in buttonList {  		if button == sender as! UIButton { 			button.selected = true 			if accessible { 				button.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected 			} 			button.setTitleColor(UIColor.orange_orangeForWhiteBG(), forState: UIControlState.Selected) 			button.tintColor = UIColor.clearColor() 		} 		else { 			button.selected = false 			if accessible { 				button.accessibilityTraits = UIAccessibilityTraitNone 				button.accessibilityTraits = UIAccessibilityTraitButton 			} 			button.setTitleColor(UIColor.orange_blackColor(), forState: UIControlState.Normal) 		} 	} }      func accessibleSegmentedControl() { 	onePageButton.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected 	twoPageButton.accessibilityTraits = UIAccessibilityTraitButton 	threePageButton.accessibilityTraits = UIAccessibilityTraitButton  	onePageButton.accessibilityHint = \&quot;1 \&quot; + \&quot;common_of\&quot;.localized + \&quot; \&quot; + String(buttonList.count) 	twoPageButton.accessibilityHint = \&quot;2 \&quot; + \&quot;common_of\&quot;.localized + \&quot; \&quot; + String(buttonList.count) 	threePageButton.accessibilityHint = \&quot;3 \&quot; + \&quot;common_of\&quot;.localized + \&quot; \&quot; + String(buttonList.count) }&lt;/code&gt;&lt;/pre&gt;  **Liens : **  - [accessibilityLabel](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityLabel) - [accessibilityValue](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityValue) - [accessibilityHint](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityHint)   "
});

documentTitles["dev-ios.html#nature-des-elements"] = "Nature des éléments";
index.add({
    url: "dev-ios.html#nature-des-elements",
    title: "Nature des éléments",    
    body: "## Nature des éléments  **Description : **   L’attribut `accessibilityTraits` permet de donner une information à l'API d'accessibilité sur la nature d’un composant. On peut décider ainsi qu’un item de liste soit pris en compte comme un bouton par VoiceOver car celui-ci est cliquable. De ce fait, l’`accessibilityTrait` joue également sur la vocalisation de l’élément car cette nature est restituée par VoiceOver.     Cet attribut d’accessibilité est disponible via l’interface builder, mais également utilisable directement via le code.    Il existe beaucoup de traits. Ci-après, les principaux (les plus utiles) :   - `accessibilityTraitNone` : supprime toute valeur sémantique à l’élément. - `accessibilityTraitButton` : ajoute le trait « bouton », l’élément est vu comme un bouton par VoiceOver. - `accessibilityTraitLink` : utile pour définir un label en tant que « lien ». - `accessibilityTraitHeader` : permet de définir un élément comme une en-tête (pour plus d’information, voir la section « titres et en-têtes » dans la partie critères de l’application). - `accessibilityTraitAdjustable` : permet de définir un élément comme un élément « ajustable », c’est-à-dire un élément dont la valeur instantanée peut être modifiée via un geste spécifique de VoiceOver.  **Exemples : **     Exemple avec un `UIPageControl` et le trait 'ajustable' :   `pageControl.accessibilityTraits = UIAccessibilityTraitAdjustable`  Exemple pour ajouter un en-tête :   `defaultHeaderViewCell.accessibilityTraits = UIAccessibilityTraitHeader`  On peut également combiner plusieurs trait :   `onePageButton.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected`  **Lien : **       - [accessibilityTraits](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/doc/constant_group/Accessibility_Traits)   "
});

documentTitles["dev-ios.html#masquer-des-elements-a-laccessibilite"] = "Masquer des éléments à l'accessibilité";
index.add({
    url: "dev-ios.html#masquer-des-elements-a-laccessibilite",
    title: "Masquer des éléments à l'accessibilité",    
    body: "## Masquer des éléments à l'accessibilité    **Description : **    Il est possible via des attributs d’accessibilité de masquer des éléments aux outils d’accessibilité (VoiceOver par exemple). Il est aussi possible de forcer certains éléments à être visibles aux outils d’accessibilité.      -	`AccessibilityElement` : booléen qui permet d’indiquer qu’un élément est visible ou non de l’API d’accessibilité (de VoiceOver ou autre). -	`AccessibilityElementIsHidden` : booléen qui permet d’indiquer que les éléments fils de l’élément cible sont visibles ou non de l’API d’accessibilité. -	`AccessibilityViewIsModal` : booléen qui permet de rendre visible ou non les éléments frères de l’élément cible à l’API d’accessibilité. Très utile pour rendre accessible des popin custom par exemple.      L’attribut `accessibilityElement` est disponible via l’interface builder, mais est également utilisable directement via le code. Les deux autres attributs sont utilisables uniquement via le code.  **Exemples : **  Exemple simple :    `pageControl.isAccessibilityElement = true`  Exemple d'alerte custom accessible :   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;@IBAction func displayCustomAlert() { 	popUpVIew.hidden = false //La vue a été créée au préalable, on ne fait que l'afficher et la rendre accessible 	popUpVIew.accessibilityViewIsModal = true //Empêche l'accessibilité de voir ce qui est \&quot;derrière\&quot; l'alerte 	popUpVIew.frame = CGRectMake(0, 0, UIScreen.mainScreen().bounds.width, UIScreen.mainScreen().bounds.height) //Le filtre modal de l'alerte prend tout l'écran  	let window = UIApplication.sharedApplication().keyWindow 	window?.addSubview(popUpVIew)  	UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, popUpVIew) //On informe l'accessibilité de l'affichage de l'alerte afin que celle-ci soit focus si VoiceOver est actif }&lt;/code&gt;&lt;/pre&gt;  **Liens : **       - [accessibilityElement](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/isAccessibilityElement) - [accessibilityElementIsHidden](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityElementsHidden) - [accessibilityViewIsModal](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityViewIsModal)   "
});

documentTitles["dev-ios.html#declencher-une-vocalisation"] = "Déclencher une vocalisation";
index.add({
    url: "dev-ios.html#declencher-une-vocalisation",
    title: "Déclencher une vocalisation",    
    body: "## Déclencher une vocalisation  **Description : **    Il est très facile de déclencher des vocalisations avec VoiceOver. Attention, nous parlons de vocalisation avec VoiceOver (ce qui implique que VoiceOver soit activé) et pas de TTS (&lt;span lang=\&quot;en\&quot;&gt;Text To Speech&lt;/span&gt;) (qui fonctionne indépendamment de l'activation ou non de VoiceOver).    Pour déclencher une vocalisation, il faut envoyer une notification à l’API d’accessibilité via la méthode `UIAccessibilityPostNotification`  avec en paramètre la notification permettant de déclencher une vocalisation `UIAccessibilityAnnouncementNotification` et la chaine de caractère à vocaliser.       La vocalisation se fait dans la langue du système.  **Exemple : **  `UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, speakString);`  **Liens : **  - [UIAccessibilityPostNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/index.html#//apple_ref/c/func/UIAccessibilityPostNotification) - [UIAccessibilityAnnouncementNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityAnnouncementNotification)   "
});

documentTitles["dev-ios.html#connaitre-letat-des-options-daccessibilite"] = "Connaitre l'état des options d'accessibilité";
index.add({
    url: "dev-ios.html#connaitre-letat-des-options-daccessibilite",
    title: "Connaitre l'état des options d'accessibilité",    
    body: "## Connaitre l'état des options d'accessibilité  **Description : **   Sous iOS, il est possible de connaitre les statuts des options d’accessibilité. Est-ce que VoiceOver est activé ? Est-ce que le mode audio-mono est activé ? Plusieurs fonctions permettent de connaitre ces valeurs. Ces fonctions font partie du `UIKit` framework.    La plus utile de ces fonctions est certainement `UIAccessibilityIsVoiceOverRunning` qui permet de savoir si VoiceOver est activé au moment de l’appel.  **Exemple : **   `UIAccessibilityIsVoiceOverRunning() ? 1 : 0`  **Liens : **  - [UIAccessibilityIsVoiceOverRunning](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsVoiceOverRunning) - [UIAccessibilityIsClosedCaptioningEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsClosedCaptioningEnabled) - [UIAccessibilityIsMonoAudioEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsMonoAudioEnabled) - [UIAccessibilityIsBoldTextEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsBoldTextEnabled) - [UIAccessibilityDarkerSystemColorsEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityDarkerSystemColorsEnabled) - [UIAccessibilityIsGrayscaleEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsGrayscaleEnabled) - [UIAccessibilityIsGuidedAccessEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsGuidedAccessEnabled) - [UIAccessibilityIsInvertColorsEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsInvertColorsEnabled) - [UIAccessibilityIsReduceMotionEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsReduceMotionEnabled) - [UIAccessibilityIsReduceTransparencyEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsReduceTransparencyEnabled) - [UIAccessibilityIsSpeakScreenEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsSpeakScreenEnabled) - [UIAccessibilityIsSpeakSelectionEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsSpeakSelectionEnabled) - [UIAccessibilityIsSwitchControlRunning](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsSwitchControlRunning)  "
});

documentTitles["dev-ios.html#informer-dune-modification-sur-la-page"] = "Informer d'une modification sur la page";
index.add({
    url: "dev-ios.html#informer-dune-modification-sur-la-page",
    title: "Informer d'une modification sur la page",    
    body: "## Informer d'une modification sur la page  **Description : **  Lors d’un changement de contenu sur une page, il est possible de notifier l’API d’accessibilité de ce changement à travers différentes notifications. Pour ce faire, il faut envoyer une notification de modification à l’API d’accessibilité via la méthode `UIAccessibilityPostNotification`.    Il existe plusieurs notifications de modification, mais les deux plus utiles sont : - `UIAccessibilityLayoutChangedNotification` : permet de spécifier à l’API d’accessibilité qu’une partie de la page a été modifiée. - `UIAccessibilityScreenChangedNotification` : permet d’annoncer un changement global de la page.    À l’usage, il existe une petite différence entre les deux. `UIAccessibilityLayoutChangedNotification` accepte une `NSString` ou un `UIObject`. Avec le premier paramètre, la notification se comporte comme une `UIAccessibilityAnnouncementNotification` et lance une vocalisation VoiceOver. Avec le second, le focus est repositionné sur l’élément de notre choix.    `UIAccessibilityScreenChangedNotification` accepte soit `nil`, soit l’élément qui doit recevoir le focus.  **Exemples : **   &lt;pre&gt;&lt;code class=\&quot;objectivec\&quot;&gt;UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, @\&quot;speakString\&quot;); UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, aViewObject);  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, nil); UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, aViewObject);&lt;/code&gt;&lt;/pre&gt;  **Liens : **  - [UIAccessibilityPostNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/index.html#//apple_ref/c/func/UIAccessibilityPostNotification) - [UIAccessibilityLayoutChangedNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/c/data/UIAccessibilityLayoutChangedNotification) - [UIAccessibilityScreenChangedNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/c/data/UIAccessibilityScreenChangedNotification) - [UIAccessibilityPageScrolledNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/c/data/UIAccessibilityPageScrolledNotification)   "
});

documentTitles["dev-ios.html#modifier-la-langue-de-vocalisation"] = "Modifier la langue de vocalisation";
index.add({
    url: "dev-ios.html#modifier-la-langue-de-vocalisation",
    title: "Modifier la langue de vocalisation",    
    body: "## Modifier la langue de vocalisation  **Description : **    Afin de modifier la langue de prononciation de VoiceOver pour un mot ou un texte, il existe l’attribut `accessibilityLanguage`. Disponible via le protocole `UIAccessibility`, cet attribut permet de redéfinir la langue de prononciation d’un texte. Par exemple, si on utilise cet attribut sur un `UILabel`, alors celui-ci sera vocalisé par VoiceOver dans la nouvelle langue donnée en valeur de l’attribut.  **Exemple : **   `cell.textLabel?.accessibilityLanguage = \&quot;en_EN\&quot;`  **Lien : **        - [accessibilityLanguage](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityLanguage)   "
});

documentTitles["dev-ios.html#modifier-la-zone-de-focus-de-voiceover"] = "Modifier la zone de focus de VoiceOver";
index.add({
    url: "dev-ios.html#modifier-la-zone-de-focus-de-voiceover",
    title: "Modifier la zone de focus de VoiceOver",    
    body: "## Modifier la zone de focus de VoiceOver  **Description : **    Dans le cas d’objet modifié dynamiquement ou d’élément ne dérivant pas de `UIView`, il est possible de déterminer la zone géographique d’accessibilité de cet élément, c'est-à-dire la zone que VoiceOver met en surbrillance lors du focus.    - `AccessibilityFrame` : permet de définir cette zone via un rectangle (`CGRect`). Par défaut pour un élément dérivant de `UIView`, cette zone est la partie « visible » de la vue. - `AccessibilityPath` : équivalent à `AccessibilityFrame` mais permet de définir la zone via des courbes de Bézier. - `AccessibilityActivationPoint` : le « point » d’activation d’un élément pour les outils d’accessibilité. Par défaut, ce point est au centre de l’élément.  **Liens : **  - [AccessibilityFrame](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityFrame) - [AccessibilityPath](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityPath) - [AccessibilityActivationPoint](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityActivationPoint)   "
});

documentTitles["dev-ios.html#grouper-des-elements"] = "Grouper des éléments";
index.add({
    url: "dev-ios.html#grouper-des-elements",
    title: "Grouper des éléments",    
    body: "## Grouper des éléments  **Description : **    L'attribut `shouldGroupAccessibilityChildren` est un booléen qui permet d’indiquer à VoiceOver qu’il doit grouper les enfants de la vue qui porte l’attribut. Cela permet notamment de faire des vocalisations uniques ou de définir un ordre de lecture VoiceOver particulier pour une partie de la page seulement (voir la section « ordre de lecture »).  **Exemple : **   Très pratique quand on veut redéfinir l'ordre de lecture VoiceOver, ici sur une cellule de tableau qui comporte des éléments de formulaire :   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;class AddressTableViewCell: UITableViewCell {  	@IBOutlet weak var deliveringAddressLabel:  UILabel! 	@IBOutlet weak var addressLabel:            UILabel! 	@IBOutlet weak var switchLabel:             UILabel! 	@IBOutlet weak var addressSwitch:           UISwitch!  	override func awakeFromNib() { 		super.awakeFromNib()  		isAccessibilityElement = false 		shouldGroupAccessibilityChildren = true 		accessibilityElements = [deliveringAddressLabel, addressLabel, addressSwitch] 	} }&lt;/code&gt;&lt;/pre&gt;  **Lien : **        - [shouldGroupAccessibilityChildren](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/shouldGroupAccessibilityChildren)  "
});

documentTitles["dev-ios.html#evenements-daccessibilite"] = "Evènements d'accessibilité";
index.add({
    url: "dev-ios.html#evenements-daccessibilite",
    title: "Evènements d'accessibilité",    
    body: "## Evènements d'accessibilité  **Description : **    Le système iOS envoie un certain nombre d’évènements d’accessibilité à destination des applications. Ces événements sont envoyés lors de la modification des options d’accessibilité. Par exemple, si VoiceOver est désactivé durant l’utilisation de l’application, celle-ci recevra l’évènement `UIAccessibilityVoiceOverStatusChanged`. Cela est très utile couplé à la fonction `UIAccessibilityIsVoiceOverRunning`.    Imaginons que nous ayons un traitement particulier quand VoiceOver est activé. Ceci est détecté grâce à la fonction `UIAccessibilityIsVoiceOverRunning`. Mais que se passe-t-il si VoiceOver est désactivé alors que ce traitement a déjà eu lieu ? C’est là que les évènements système peuvent être utilisés. En restant à l’écoute de ces évènements, il est possible d’appliquer des traitements particuliers de manière dynamique.  **Exemple : **   Ici, on appelle le sélecteur \&quot;voiceOverStatusDidChange\&quot; au moment ou le status change :   `NSNotificationCenter.defaultCenter().addObserver(self, selector: \&quot;voiceOverStatusDidChange:\&quot;, name: UIAccessibilityVoiceOverStatusChanged, object: nil)`  **Lien : **        - [UIAccessibilityVoiceOverStatusChanged](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityVoiceOverStatusChanged) - [UIAccessibilityClosedCaptioningStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityClosedCaptioningStatusDidChangeNotification) - [UIAccessibilityMonoAudioStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityMonoAudioStatusDidChangeNotification) - [UIAccessibilityAnnouncementDidFinishNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityAnnouncementDidFinishNotification) - [UIAccessibilityGuideAccessStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityAnnouncementDidFinishNotification) - [UIAccessibilityInvertColorsStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityInvertColorsStatusDidChangeNotification) - [UIAccessibilityDarkerSystemColorsStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityDarkerSystemColorsStatusDidChangeNotification) - [UIAccessibilityGrayscaleStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityGrayscaleStatusDidChangeNotification) - [UIAccessibilityBoldTextStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityBoldTextStatusDidChangeNotification)  "
});

documentTitles["dev-ios.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "dev-ios.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes  **Description : **    La gestion des polices dynamiques sous iOS est complexe. Il est possible depuis iOS7 d’utiliser une API permettant de rendre la taille des textes de son application dynamiquement modifiable à l’aide du paramétrage du téléphone. Si on résume cette API, il faut :     - Utiliser les polices système pour les textes de l’application, `[UIFont preferredFontForTextStyle:UIFontTextStyle…]`. Il est aussi possible de définir ses propres polices dérivées de la classe `UIFont`. - Traiter l’évènement signalant le changement de la taille du texte dans les paramètres du téléphone `UIContentSizeCategoryDidChangeNotification`, `[[NSNotificationCenter defaultCenter] addObserver:… selector:@selector(…) name: UIContentSizeCategoryDidChangeNotification object:…];` - Lors du traitement de l’évènement signalant le changement de taille, il faut réafficher les éléments concernés.&lt;/li&gt;    Il faut aussi faire attention à ce que les conteneurs s’adaptent à leur contenu : utiliser les contraintes est le meilleur moyen de réaliser cette tâche.  **Lien : **  - [Dynamic Type API](https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html#//apple_ref/doc/uid/TP40009542-CH4-SW65)   "
});

documentTitles["dev-ios.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "dev-ios.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture  **Description : **   Redéfinir l’ordre de lecture VoiceOver s’effectue en respectant le protocole `UIAccessibilityContainer`. L’idée est d’avoir un tableau des éléments de la vue qui définit l’ordre de lecture des éléments. Il est bien souvent nécessaire d’utiliser l’attribut `shouldGroupAccessibilityElement` afin d’avoir un ordre précis, mais pour une partie seulement de la vue (le reste étant l’ordre naturel de lecture).  **Exemple : **   Cellule de tableau qui comporte des éléments de formulaire :   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;class AddressTableViewCell: UITableViewCell {  	@IBOutlet weak var deliveringAddressLabel:  UILabel! 	@IBOutlet weak var addressLabel:            UILabel! 	@IBOutlet weak var switchLabel:             UILabel! 	@IBOutlet weak var addressSwitch:           UISwitch!  	override func awakeFromNib() { 		super.awakeFromNib()  		isAccessibilityElement = false 		shouldGroupAccessibilityChildren = true 		accessibilityElements = [deliveringAddressLabel, addressLabel, addressSwitch] 	} }&lt;/code&gt;&lt;/pre&gt;  **Lien : **  - [UIAccessibilityContainer](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibilityContainer_Protocol/) &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-mobile.html#les-criteres-mobiles"] = "Les critères mobiles";
index.add({
    url: "criteria-mobile.html#les-criteres-mobiles",
    title: "Les critères mobiles",    
    body: "# Les critères mobiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Critères mobiles\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-mobile\&quot;&gt;&lt;/span&gt;  Ces socles de critères destinés aux applications mobiles Android et iOS Orange permettent d'éviter les erreurs d'accessibilité.    La mise en œuvre de ces socles doit permettre d’obtenir à coup sûr un site accessible. Ces socles posent les fondations qui permettent de s'engager dans une démarche de mise en accessibilité.  Le respect de la charte Orange pour Android et iOS, documents disponibles sur [le site de la marque Orange](http://brand.orange.com/) sont des prérequis à l'utilisation de ces socles. Certains points déjà présents dans la charte Orange (utilisation des couleurs notamment) n'ont pas été repris dans cette liste de critères.  Deux versions sont disponibles : - **Version Android** concerne le développement d'applications destinées à la plateforme de Google, Android. - **Version iOS** concerne le développement d'applications destinées à la plateforme d'Apple, iOS.  &lt;p class=\&quot;row\&quot;&gt;     &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;         &lt;h2 class=\&quot;sr-only\&quot;&gt;critères Android&lt;/h2&gt;                   &lt;a href=\&quot;./criteria-android.html\&quot; class=\&quot;btn btn-info\&quot;&gt;             ![](./images/android.png)             &lt;div&gt;Guide d'accessibilité Android&lt;/div&gt;         &lt;/a&gt;     &lt;/div&gt;     &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;         &lt;h2 class=\&quot;sr-only\&quot;&gt;critères iOS&lt;/h2&gt;                   &lt;a href=\&quot;./criteria-ios.html\&quot; class=\&quot;btn btn-info\&quot;&gt;             ![](./images/iphone.png)             &lt;div&gt;Guide d'accessibilité iOS&lt;/div&gt;         &lt;/a&gt;     &lt;/div&gt;             &lt;/p&gt;  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android.html#guide-daccessibilite-android"] = "Guide d'accessibilité Android";
index.add({
    url: "criteria-android.html#guide-daccessibilite-android",
    title: "Guide d'accessibilité Android",    
    body: "# Guide d'accessibilité Android  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Critères mobiles\&quot;, \&quot;url\&quot;: \&quot;./criteria-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide d'accessibilité Android\&quot;} 	]); 	addSubMenu();     });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-mobile\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différents critères d'accessibilité à respecter pour obtenir une application Android accessible. Chaque critère est présenté en expliquant pour qui ce critère est important, quand on peut le mettre en place, pourquoi il est important et la règle d'accessibilité qui en découle. Les critères sont explicités par des exemples de code et des captures d'exemples réels. Nous vous invitons à installer l'application [mDAN](./mdan.html) pour obtenir des exemples fonctionnels avec TalkBack, le lecteur d'écran d'Android, et d'autres outils d'assistance. Pour plus d'information sur l'outil (comment l'activer, comment s'en servir…) nous vous invitons à vous référer à la [section concernant TalkBack](./talkback.html).  "
});

documentTitles["criteria-android.html#images"] = "Images";
index.add({
    url: "criteria-android.html#images",
    title: "Images",    
    body: "## Images **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors de la conception et pendant le développement.  **Description : **    Les images sont très souvent utilisées pour transmettre de nombreuses informations. Comme le dit l'adage, une image vaut mille mots. Les non-voyants ne pouvant voir les images, il est important que celles-ci possèdent une alternative qui donne toutes les informations portées par l'image.   Dans le cas d'une image contenant du texte, l'alternative sera ledit texte. Dans le cas d'une image qui apporte des informations sous la forme d'un graphe, dessin ou autre, l'alternative devra contenir toutes les informations nécessaires présentes dans l'image.        Certaines images sont utilisées à des fins décoratives. Ces images ne nécessitent pas d'alternative. Par défaut sous Android, les images ne sont pas vocalisées par le lecteur d'écran TalkBack.   Les illustrations de l'application sont également considérées comme des images décoratives. La règle est donc la même : il n'y a pas d'alternative textuelle à ajouter.   Les icônes sont, a contrario, largement utilisées en tant que bouton pour des fonctionnalités diverses. Elles ont donc besoin d'alternatives textuelles pertinentes.      L'alternative d'une image est renseignée via l'attribut `contentDescription` (disponible pour tout élément héritant de `View`).  **À vérifier : **  - les images portant de l'information restituent cette information à travers leur alternative textuelle - les images décoratives n'ont pas d'alternative textuelle  **Objectif utilisateur : **   Permettre l'accès à l'information incluse dans une image pour des utilisateurs qui n'y ont pas accès. Point bloquant : une image sans description textuelle est inexploitable par des personnes ayant des déficiences visuelles ou celles n'affichant pas les images (mobile, faible bande passante...).  **Exemples : **        &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;exemple complet d'image décorative et d'icone informative\&quot; width=\&quot;400\&quot;&gt;      En décomposant l'image :   - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;exemple d'image décorative\&quot; width=\&quot;256\&quot;&gt; pas de `contentDescription`   - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;exemple d'icone informative - paramètres\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;paramètres\&quot;)`   - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;exemple d'icone informative - édition\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;éditer le nom de l'image\&quot;)`    "
});

documentTitles["criteria-android.html#couleurs"] = "Couleurs";
index.add({
    url: "criteria-android.html#couleurs",
    title: "Couleurs",    
    body: "## Couleurs    **Cible : ** tout le monde, en particulier, les personnes malvoyantes, les seniors et les personnes avec des problèmes de vision (daltonisme, vision des contrastes, etc.)   **Quand : **  dès la phase de conception et lors du développement.  **Description : **    Les couleurs jouent un rôle très important dans la transmission des informations. On associe certaines couleurs à des concepts ou à des sensations, mais il ne faut pas oublier qu'une partie de la population ne distingue pas correctement les couleurs.  **À vérifier : **  - La couleur ne doit jamais être le seul canal de transmission d'une information, d'indiquer une action, de solliciter une réponse ou de distinguer un élément.  - Le contraste entre les couleurs de texte et de fond doit aussi être suffisant (7:1 sur mobile, 4,5:1 pour les textes larges, à calculer avec Color Constrast Analyzer par exemple).  **Objectif utilisateur : **   Faciliter la lecture à tous les utilisateurs, déficients visuels ou personne dans un environnement lumineux défavorable (en mobilité).   Permettre aux utilisateurs ne distinguant pas les couleurs (les daltoniens, déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure... ), d'accéder tout de même à l'information par d'autres moyens.  **Outil : ** L'application [colour contrast analyser](http://www.paciellogroup.com/resources/contrastanalyser/) permet de mesurer rapidement des niveaux de contraste de couleurs (gratuit pour Mac et Windows).    L'application [AccessibilityScanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d'accessibilité et notamment les couleurs. Disponible pour Android 6+.   **Exemple de contraste non valide : **   Le texte \&quot;film | 20h40 ...\&quot; ne présente pas un contraste suffisant. Celui-ci ne sera pas lisible par tous les utilisateurs.    ![capture d'écran présentant du texte dont le contraste n'est pas suffisant](images/contraste.png)     **Exemple de passage d'information par la couleur valide et non valide : **   &lt;img src=\&quot;./images/couleur.png\&quot; alt=\&quot;exemple de passage d'information par la couleur valide et non valide\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-android.html#alternative-textuelle"] = "Alternative textuelle";
index.add({
    url: "criteria-android.html#alternative-textuelle",
    title: "Alternative textuelle",    
    body: "## Alternative textuelle  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** dès la conception, à la rédaction du contenu et pendant le développement.  **Description : **    Les alternatives textuelles sont au coeur de l'accessibilité sur mobile. Grâce à elles, un utilisateur non-voyant peut utiliser une application sans perte d'information.      Tout comme pour les images, il est important de renseigner une alternative textuelle lorsque l'information n'est pas disponible pour les personnes malvoyantes/non-voyantes. C'est le cas des composants fournissant de l'information par la couleur, la forme, la position, le son... Sur mobile, tous les composants peuvent recevoir une alternative textuelle, il est donc possible d'enrichir la vocalisation native d'un élément, y compris celle d'un simple texte.      La place sur mobile étant réduite, on utilise bien souvent des abréviations pour les textes. Mais Cependant, cela pose un problème aux utilisateurs de synthèse vocale qui restitue les abréviations telles quelles. Pour corriger ces vocalisations, il suffit de placer une alternative textuelle sur le texte. Cette alternative contient le texte non abrégé. À noter que TalkBack sait reconnaitre quelques abréviations courantes. Par exemple, \&quot;etc.\&quot; et \&quot;Dr.\&quot; sont bien vocalisées \&quot;etcetera\&quot; et \&quot;docteur\&quot;.      Certaines images sont régulièrement associées à du texte pour donner une information. C'est le cas notamment des \&quot;messages non lus\&quot; où une infobulle donne le nombre de messages à lire et où une image donne l'information \&quot;message\&quot;. Dans ce cas, la solution consiste à placer une alternative textuelle sur le texte qui donne toutes les informations nécessaires. Par exemple : \&quot;3 messages non lus\&quot;. On peut également placer cette alternative sur l'image, mais dans ce cas, il faut penser à rendre le texte \&quot;invisible\&quot; pour le lecteur d'écran.  L'alternative textuelle d'un élément est renseignée via l'attribut `contentDescription` (disponible pour tout élément héritant de `View`). Pour les boutons présents dans l'`ActionBar` (ou `ToolBar`), c'est l'attribut `title` qu'il faut renseigner.  **À vérifier : **  - Les éléments de l'application qui nécessitent une alternative en possèdent bien une - Les alternatives textuelles de l'application sont explicites et compréhensibles  **Objectif utilisateur : **  Permettre aux utilisateurs ayant des déficiences sensorielles (déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure, en milieu bruyant, malentendant... ) d'accéder aux informations véhiculées par l'application par d'autres biais.  **Exemple : **        Ci-dessous, un exemple fréquent d'une icône qu'on couple avec du texte (infobulle) pour ajouter de l'information. Dans notre cas, l'icone \&quot;mail\&quot; couplée à l'infobulle de valeur \&quot;3\&quot; nous fait comprendre que nous avons \&quot;3 mails non lus\&quot;. Si aucune alternative textuelle n'est ajoutée, 2 vocalisations seront lues \&quot;bouton sans libellé\&quot; et \&quot;3\&quot;. On comprend bien ici l'importance d'ajouter des alternatives textuelles.   &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;exemple d'icône couplée à du texte qui nécessite une alternative textuelle\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code&gt;containerView.setContentDescription(\&quot;3 mails non lus, bouton\&quot;); //On ajoute l'alternative complète (construite dynamiquement au préalable) sur le conteneur containerView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES); //Le conteneur est une View, non visiable par l'API d'accessibilité par défaut. On le rend visible. mailImageView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //On masque le bouton-icône pour éviter une redondance d'information infobulleTextView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //On masque le texte pour éviter une redondance d'information&lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-android.html#titre-et-entete"] = "Titre et entête";
index.add({
    url: "criteria-android.html#titre-et-entete",
    title: "Titre et entête",    
    body: "## Titre et entête  **Cible : ** tout le monde   **Quand : ** dès la conception et à la rédaction du contenu.  **Description : **   Le titre de la page est le premier élément qui est vocalisé ou vu sur un écran mobile. Il facilite la navigation pour tout le monde : à tous moment, on sait où on se trouve dans l'application.   Une erreur commune est de mettre un titre unique pour toutes les pages d'une application (ou même pas de titre du tout).  **À vérifier : **   - Chaque écran doit avoir un titre qui lui est propre ou qui permet de se repérer dans la navigation (couplé avec le bouton de retour) - Les éléments identifiés visuellement comme des en-têtes doivent être déclarés à l'API d'accessibilité comme tel  ** Objectif utilisateur : **  Permettre aux utilisateurs d'identifier le sujet d'une page, de se repérer et se faire une idée précise du contenu de la page sans avoir à le lire.  **Exemple non valide : **        &lt;img src=\&quot;./images/header.png\&quot; alt=\&quot;exemple de titre non pertinent (absence de titre)\&quot; width=\&quot;300\&quot;&gt;      "
});

documentTitles["criteria-android.html#etat-des-elements"] = "État des éléments";
index.add({
    url: "criteria-android.html#etat-des-elements",
    title: "État des éléments",    
    body: "## État des éléments  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **  Si un élément ne restitue pas à la vocalisation, son statut, sa nature ou son état, l'utilisateur de TalkBack est dans l'impossibilité de comprendre ce qu'il se passe à l'écran. Ne pas préciser qu'une zone est dépliée ou que l'on se trouve face à un système d'onglets sont des exemples très fréquents.      Grand classique de ce problème : les onglets. Par défaut, les onglets proposés dans Android ne donnent aucune information sur leur nature et sur leur état. Il est donc à la charge du développeur de donner ces informations à l'utilisateur via les attributs d'accessibilité correspondants (`contentDescription`). En l'occurrence, une bonne alternative pour le titre d'un onglet peut être : \&quot;onglet, titre de l'onglet - 1 sur 3 - sélectionné\&quot;      Autre classique d'élément qui ne restitue pas par défaut son état : les zones dépliables. Encore une fois, c'est grâce à l'alternative textuelle du titre de la zone dépliable que l'on peut donner à l'utilisateur de TalkBack le statut de celle-ci.     Pour renseigner ce genre d'information, il faut utiliser l'attribut `contentDescription` (disponible pour tout élément héritant de `View`).  **À vérifier : **  - Tout élément dont le statut est modifié durant l'utilisation de l'application doit restituer son état à travers son alternative textuelle. Par exemple, un élément qui peut être sélectionné/non sélectionné doit restituer son état à travers une alternative textuelle.  **Objectif utilisateur : **  Permettre aux utilisateurs de lecteur d'écran d'avoir accès aux informations des composants, leur état, leur nature afin qu'ils puissent les utiliser sans difficultés.  **Exemple : **        &lt;img src=\&quot;./images/tabs.png\&quot; alt=\&quot;exemple d'onglets qui ne restituent pas leur état et nature par défaut\&quot; width=\&quot;400\&quot;&gt;   Pour obtenir un exemple de code qui corrige ce problème, nous vous invitons à vous référez à la page du [guide développeur](./dev-android.html#alternatives-textuelles) correspondante.     "
});

documentTitles["criteria-android.html#composant-standard"] = "Composant standard";
index.add({
    url: "criteria-android.html#composant-standard",
    title: "Composant standard",    
    body: "## Composant standard  **Cible : ** tout le monde.   **Quand : ** en phase de sélection des briques logicielles et lors des développements.  **Description : **    L'accessibilité  est prise en compte dans les composants natifs (la plupart du temps). De plus, l'utilisation de composants standards permet à l'utilisateur de se retrouver dans une situation et un comportement habituels. La navigation dans une interface standard est donc plus confortable.      Utiliser au maximum les composants natifs en modifiant leur apparence. Si aucun composant standard ne permet de répondre au besoin, créer un composant dédié basé sur un composant standard en veillant à conserver la cohérence de navigation et l'accessibilité.      Un exemple fréquent est l'utilisation d'un composant personnalisé pour le menu latéral de navigation (`NavigationDrawer`). Certains des palliatifs disponibles sur Internet ne sont absolument pas accessibles avec un lecteur d'écran. Malheureusement, cela rend de fait toute l'application non accessible.  **Objectif utilisateur : **   Permet à tous les utilisateurs de plus intuitivement interagir avec l'interface.  **Objectif technique : **  Améliore globalement la maintenabilité. Réduit les temps de développement.      "
});

documentTitles["criteria-android.html#zone-de-clic"] = "Zone de clic";
index.add({
    url: "criteria-android.html#zone-de-clic",
    title: "Zone de clic",    
    body: "## Zone de clic  **Cible : ** pour tous et en particulier les personnes avec des déficiences motrices   **Quand : ** dès la phase de conception et lors du développement.  **Description : **    Une taille insuffisante pour la zone d'action d'un composant peut empêcher certains utilisateurs de profiter pleinement de l'application. Cela peut engendrer des frustrations qui peuvent conduire à la désinstallation de l'application. Chaque élément cliquable de l'application doit donner à l'utilisateur une taille suffisante pour sa zone d'action.  **À vérifier : **  - Google définit pour son système une taille de zone de clic minimum de 48dp (en hauteur ET largeur, avec 8 dp de marge autour de l'élément).  **Objectif utilisateur : **  Améliorer le confort de navigation au toucher (touch).  **Outil : ** L'application [AccessibilityScanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d'accessibilité et notamment la taille des zones de clic. Disponible pour Android 6+.   **Exemple valide : **   Dans les exemples ci-dessous, le cadre noir correspond à la taille de la zone interactive.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;exemple de composant interractif avec une zone d'interraction assez large\&quot; width=\&quot;300\&quot;&gt;  **Exemple non-valide : **    &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;exemple de composant interractif avec une zone d'interraction trop petite\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android.html#element-fantome"] = "Elément fantôme";
index.add({
    url: "criteria-android.html#element-fantome",
    title: "Elément fantôme",    
    body: "## Elément fantôme  **Cible : ** les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **    Bien qu'invisibles à l'écran, certains éléments peuvent être lus par le lecteur d'écran (éléments positionnés en dehors de la zone visible ou masqués par d'autres éléments). La superposition d'écrans est quelque chose de courant sur mobile, mais cela engendre des problèmes d'accessibilité très lourds à corriger si elle n'est pas faite correctement dès le départ. Un lecteur d'écran tel que TalkBack est capable de lire les informations d'une vue qui est placée \&quot;sous\&quot; une autre. Mais si l'utilisateur n'est plus capable d'interagir avec cette vue, cela perturbe totalement sa navigation et celle-ci devient vite impossible.      Grand classique du problème : les fragments. Un fragment est un composant qu'on peut facilement superposer par-dessus un autre sous Android. Une mauvaise utilisation des fragments peut aboutir à une navigation impossible avec le lecteur d'écran.      Consulter l'article sur l'[utilisation des fragments](https://developer.android.com/guide/components/fragments.html) pour plus d'informations.  **À vérifier : **  - Talkback ne doit pas vocaliser d'éléments indésirables appartenant à un autre écran que celui en cours de consultation.  **Objectif utilisateur : **  Permettre la navigation dans l'application sans avoir d'élément perturbant, non utilisable, sur la vue courante.  **Exemple non-valide : **    Dans l'exemple ci-dessous, le cadre vert correspond au focus de TalkBack. Ce dernier vocalise (la vocalisation est affichée en bas de l'écran sur la capture) un contenu se trouvant derrière la vue active.   &lt;img src=\&quot;./images/ghost.png\&quot; alt=\&quot;exemple d'élément fantôme\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-android.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors de la conception et lors du développement.  **Description : **   L'utilisateur a la possibilité d'augmenter la taille du texte via une option d'accessibilité. Afin que l'application réagisse correctement à cette option, il est nécessaire d'utiliser des tailles de texte dynamiques qui s'ajusteront en fonction des paramètres utilisateurs. Un texte trop petit sera facilement ignoré par certains utilisateurs malvoyants.      L'application devra mettre en oeuvre des tailles de textes dynamiques, s'assurer de la bonne réactivité des zones d'affichage au grossissement de texte (conteneurs qui s'adaptent à la taille de leur contenu). Il faut aussi assurer une taille minimum pour les textes (14sp).      Afin de permettre à l'option « grand caractère » d'interagir correctement avec l'application, plusieurs points sont à respecter durant les développements : - Utiliser une taille de police dynamique : le « sp ». Cette unité, spécifique à Android, permet d'obtenir une taille de police en fonction de la densité de pixel de l'écran. Il est plus que recommandé de l'utiliser pour les textes, ne serait-ce que pour obtenir un design uniforme sur tous les types de device Android.  - Gérer les débordements de contenu : une erreur courante est d'utiliser une taille de texte dynamique (« sp » donc) mais de ne pas faire attention au conteneur. Si le texte grossit, le conteneur doit en faire autant pour ne pas qu'il y ait de débordement. On peut parfaitement jouer avec le `min-height` et le `height` des conteneurs pour obtenir un résultat correct (le `height` à `wrap_content` et le `min-height` à la hauteur voulue par défaut).  **À vérifier : **  - L'application réagit correctement à l'option grand caractère - Les textes de l'application ont une taille minimum de 14sp  **Objectif utilisateur : **  Permettre aux utilisateurs (malvoyants, en mobilité, seniors...) d'augmenter la taille du texte sans perte d'information pour plus aisément accéder au contenu.  **Outil : ** L'application [AccessibilityScanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d'accessibilité et notamment la taille des textes. Disponible pour Android 6+.  **Exemple : **  &lt;img src=\&quot;./images/text.png\&quot; alt=\&quot;exemple d'utilisation de taille de police dynamique\&quot; width=\&quot;300\&quot;&gt;    "
});

documentTitles["criteria-android.html#controle-de-contenu"] = "Contrôle de contenu";
index.add({
    url: "criteria-android.html#controle-de-contenu",
    title: "Contrôle de contenu",    
    body: "## Contrôle de contenu  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles et cognitives.   **Quand : ** lors de la conception et lors du développement.  **Description : **   Sur mobile, les lecteurs d'écran essayent de transmettre au maximum à l'utilisateur les changements de contexte. Dans certains cas, cela peut donner des vocalisations permanentes, et donc inaudibles, ou empêcher toute action de l'utilisateur.   L'utilisateur doit rester maître du contenu à tout instant. C'est particulièrement vrai avec le contenu interactif. Il faut donc éviter par exemple qu'une vidéo ne se lance directement en plein écran, qu'une vidéo ne se lance directement sans une action au préalable de l'utilisateur, qu'un carrousel défile de manière automatique, etc.  **À vérifier : **  - Les contenus interactifs peuvent être maitrisés par l'utilisateur (présence d'un bouton pause sur carrousel automatique, bouton accessible pour sortir du mode plein-écran etc)  **Objectif utilisateur : **  Permettre aux utilisateurs de rester maître de l'application. Permettre à l'utilisateur de lecteur d'écran d'éviter une pollution sonore qui peut nuire à sa navigation.   **Objectif technique : **  Améliorer le référencement naturel.   "
});

documentTitles["criteria-android.html#changement-de-contenu"] = "Changement de contenu";
index.add({
    url: "criteria-android.html#changement-de-contenu",
    title: "Changement de contenu",    
    body: "## Changement de contenu  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **   Lorsque du contenu est modifié dynamiquement à la suite d'une action de l'utilisateur, il faut le notifier à la synthèse vocale. Sans retour vocal, l'utilisateur ne sait pas qu'une action a été déclenchée.   Sur une page, si du contenu est modifié dynamiquement suite à une action utilisateur, il est important que le lecteur d'écran soit notifié afin qu'il déclenche une vocalisation. Par exemple, les listes qui se rafraîchissent, ou un compteur de temps.  Une simple vocalisation peut suffire à avertir l'utilisateur. Il est très facile de déclencher des vocalisations avec TalkBack. Attention: nous parlons de la vocalisation si TalkBack est activé et non pas de TTS (Text To Speech) qui peut fonctionner indépendamment du statut de TalkBack. Il suffit de faire appel à la méthode `announceForAccessibility` en lui passant en paramètre l'id de la chaine de caractère à vocaliser. À noter : la méthode `announceForAccessibility` est disponible sur tout élément qui hérite de `View` et se fait dans la langue du système.  Il est également possible de spécifier à une vue qu'elle est une région live, c'est-à-dire que son contenu est susceptible d'être modifié dynamiquement et qu'elle doit dans ce cas prévenir l'API d'accessibilité. Cela aura pour conséquence de générer des vocalisations avec TalkBack par exemple. Un exemple type d'utilisation : sur un formulaire, si l'utilisateur fait une erreur et qu'un message d'erreur apparaît, la vue contenant le message doit être définie comme une région live.  Il faut passer par la méthode `setAccessibilityLiveRegion` qui prend en paramètre un mode pour la région live. Il existe 3 modes : -	`ACCESSIBILITY_LIVE_REGION_NONE` : cette vue n'est pas une région live. C'est la valeur par défaut de la plupart des vues. -	`ACCESSIBILITY_LIVE_REGION_POLITE` : en cas de changement dans la vue, des vocalisations sont effectuées sur les changements. Ces vocalisations sont « polies » ; elles sont moins prioritaires que les vocalisations système par exemple. -	`ACCESSIBILITY_LIVE_REGION_ASSERTIVE` : en cas de changement dans la vue, des vocalisations seront effectuées sur les changements. Ces vocalisations sont « rudes » ; elles sont prioritaires et immédiatement vocalisées. À noter, la méthode `setAccessibilityLiveRegion` est disponible sur tout élément qui hérite de `View`.  **À vérifier : **  - Avec un lecteur d'écran, s'assurer que les modifications dynamiques dans les pages sont bien vocalisées.  **Objectif utilisateur : **  Donner accès aux modifications des informations de l'application aux utilisateurs de lecteur d'écran.   "
});

documentTitles["criteria-android.html#scroll-horizontal"] = "Scroll horizontal";
index.add({
    url: "criteria-android.html#scroll-horizontal",
    title: "Scroll horizontal",    
    body: "## Scroll horizontal  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** dès la phase de conception et lors du développement.  **Description : **  Un scroll horizontal peut être très difficile à détecter si aucun visuel n'aide l'utilisateur à comprendre qu'il existe plusieurs pages.   Ne pas hésiter à afficher un élément pour indiquer un scroll horizontal (des \&quot;points\&quot; par exemple). Quand cela est nécessaire, ajouter également des boutons \&quot;suivant\&quot; et \&quot;précédent\&quot;.  **À vérifier : **  - Les scrolls horizontaux sont indiqués visuellement - Avec le lecteur d'écran activé, un mécanisme permet de passer de page en page lorsqu'un scroll horizontal est présent.  **Objectif utilisateur : **  Donner une indication visuelle aux utilisateurs lors de la présence de scrolls horizontaux. Permettre aux utilisateurs de lecteur d'écran d'utiliser les scrolls horizontaux.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple valide :**  &lt;img src=\&quot;./images/scroll_h1.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple non-valide :**  &lt;img src=\&quot;./images/scroll_h2.png\&quot; alt=\&quot;exemple de scroll horizontal non accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-android.html#formulaire"] = "Formulaire";
index.add({
    url: "criteria-android.html#formulaire",
    title: "Formulaire",    
    body: "## Formulaire  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors de la conception et lors du développement.  **Description : **  Lier les champs de formulaires avec leurs labels apporte une vocalisation supplémentaire qui permet à l'utilisateur de comprendre quoi remplir lorsqu'il arrive sur un champ de formulaire.      Il existe 2 grandes techniques pour réaliser cette liaison :  - `labelFor` : permet de spécifier à une vue qu'elle est le label d'une autre vue. Cette méthode prend en paramètre l'id de la vue que l'on labellise. On peut utiliser cette méthode avec quasiment tout type de champ de formulaire. Utilisable depuis le xml `android:labelFor` ou le code `setLabelFor`.  - `hint` : permet d'ajouter un texte d'exemple quand le champ de texte est vide. Cette méthode ne marche que pour les `TextView`. Prend en paramètre l'id d'une chaîne de caractère. Utilisable depuis le xml `android:hint` ou le code `setHint`.  **À vérifier : **  - les champs de formulaire doivent être liés à un label si celui-ci est visible, sinon un `hint` est présent  **Objectif utilisateur : **  Améliorer la navigation et la compréhension globale de la page, car les champs de formulaires décrivant le contenu attendu  facilitent leur saisie par les utilisateurs déficients visuels.   "
});

documentTitles["criteria-android.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-android.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture  **Cible : ** les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **  L'ordre de lecture permet à l'utilisateur de lecteur d'écran de se repérer dans la navigation et d'assurer une cohérence fonctionnelle. Il est donc important d'y faire attention.      Par défaut, l'ordre de lecture de la synthèse vocale prend en compte plusieurs paramètres : la lecture « logique » (en France), soit de gauche à droite et de haut en bas, et la lecture du xml (ordre de déclaration des éléments). Il existe cependant certain cas ou le lecteur d'écran n'arrive pas à déterminer un ordre et dans ce cas, il utilise l'ordre de définition des éléments ce qui peut amener des vocalisations incohérentes.      Il est tout à fait possible de redéfinir cet ordre de lecture avec deux attributs : -	`accessibilityTraversalAfter` : prend un id en paramètre et permet de spécifier à la vue qu'elle doit être « vue » par l'accessibilité après la vue passée en paramètre. - `accessibilityTraversalBefore` : prend un id en paramètre et permet de spécifier à la vue qu'elle doit être « vue » par l'accessibilité avant la vue passée en paramètre.    À noter : ces attributs peuvent être utilisés directement dans le xml mais également dans le code via les méthodes `setAccessibilityTraversalAfter` et `setAccessibilityTraversalBefore`. Ces méthodes sont disponibles pour tout élément qui hérite de `View`.  **À vérifier : **  - L'ordre de lecture (celui de TalkBack) est logique et cohérent.  **Objectif utilisateur : **  Assurer un ordre de lecture logique et cohérent aux utilisateurs de lecteur d'écran pour leur assurer une complète compréhension du contenu.  **Exemple :**       Dans cet exemple, l'ordre de lecture par défaut dépend complétement de l'implémentation et de l'ordre de déclaration des éléments. Dans ce cas-ci : `vol+, vol-, 1, 2, 3, 4, 5, 6, 7, 8, 9, p+, +-, 0`. Un ordre de lecture plus consistent serait `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol+, vol-, p+, p-`.    &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt;   &lt;pre&gt;&lt;code&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); chaineplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); chainemoinsButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.chaineplus).getId()); [...]&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-android.html#navigation-au-focus"] = "Navigation au focus";
index.add({
    url: "criteria-android.html#navigation-au-focus",
    title: "Navigation au focus",    
    body: "## Navigation au focus  **Cible : ** tout le monde et en particulier les personnes déficientes motrices qui utilisent un clavier pour naviguer.   **Quand : ** lors de la conception et lors du développement.  **Description : **  La navigation au focus est très utile pour les personnes qui présentent des difficultés motrices ou cognitives. Cette navigation permet de passer d'élément interactif en élément interactif (élément sur lequel on peut effectuer une action). Elle correspond à la navigation que l'on peut faire avec un clavier Bluetooth lié à un smartphone.  Pour gérer la navigation au focus, il faut s'assurer de 3 choses :   - Permettre le focus sur les éléments interactifs : la navigation au focus ne concerne que les éléments interactifs. Si, par exemple, votre application possède des vues custom cliquables, il faut s'assurer que ces vues soient focusables en positionnant l'attribut `focusable` à `true`. - Gérer l'ordre du focus : à travers les options `nextFocusDown, nextFocusUp, nextFocusRight` et `nextFocusLeft`, vous pouvez spécifier quelle vue doit prendre le focus selon l'utilisation des flèches bas, haut, droit et gauche. - Gérer l'affichage du focus : tout élément interactif peut recevoir le focus, il faut donc que le `state_focused` soit défini et permette de distinguer d'un seul coup d'œil quel élément a le focus.  À noter : `nextFocusDown, nextFocusUp, nextFocusRight, nextFocusLeft, focusable` ainsi que d'autres options de gestion du focus sont accessibles directement dans le xml ou dans le code à travers les méthodes correspondantes.    Pour plus d'information sur la [gestion du focus sous Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav).   **À vérifier : **  - L'ordre de navigation au focus (clavier) est logique et cohérent. - À la navigation au focus (clavier), il est possible de déterminer visuellement l'élément qui a le focus  **Objectif utilisateur : **  Permettre l'utilisation de l'application avec un clavier, dock tablette ou tout autre dispositif de navigation séquentiel.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt; "
});



documentTitles["criteria-ios.html#guide-daccessibilite-ios"] = "Guide d'accessibilité iOS";
index.add({
    url: "criteria-ios.html#guide-daccessibilite-ios",
    title: "Guide d'accessibilité iOS",    
    body: "# Guide d'accessibilité iOS  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Critères mobiles\&quot;, \&quot;url\&quot;: \&quot;./criteria-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide d'accessibilité iOS\&quot;} 	]);     addSubMenu(); 	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-mobile\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différents critères d'accessibilité à respecter pour obtenir une application iOS accessible. Chaque critère est présenté en expliquant pour qui ce critère est important, quand on peut le mettre en place, pourquoi il est important et la règle d'accessibilité qui en découle. Les critères sont explicités par des exemples de code et des captures d'exemples réels. Nous vous invitons à installer l'application [mDAN](./mdan.html) pour obtenir des exemples fonctionnels avec VoiceOver, le lecteur d'écran d'iOS, et d'autres outils d'assistance. Pour plus d'information sur l'outil (comment l'activer, comment s'en servir…) nous vous invitons à vous référer à la [section correspondante à VoiceOver](./voiceover.html).    À noter : les quelques exemples de code dans cette section seront présentés en Swift.  "
});

documentTitles["criteria-ios.html#images"] = "Images";
index.add({
    url: "criteria-ios.html#images",
    title: "Images",    
    body: "## Images **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors de la conception et pendant le développement.  **Description : **    Les images sont très souvent utilisées pour transmettre de nombreuses informations. Comme le dit l'adage, une image vaut mille mots. Les non-voyants ne pouvant voir les images, il est important que celles-ci possèdent une alternative qui donne toutes les informations portées par l'image.   Dans le cas d'une image contenant du texte, l'alternative sera ledit texte. Dans le cas d'une image qui apporte des informations sous la forme d'un graphe, dessin ou autre, l'alternative devra contenir toutes les informations nécessaires présentes dans l'image.        Certaines images sont utilisées à des fins décoratives. Ces images ne nécessitent pas d'alternative. Par défaut sous iOS, les images ne sont pas vocalisées par le lecteur d'écran VoiceOver.   Les illustrations de l'application sont également considérées comme des images décoratives. La règle est donc la même : il n'y a pas d'alternative textuelle à ajouter.   Les icônes sont, a contrario, largement utilisées en tant que bouton pour des fonctionnalités diverses. Elles ont donc besoin d'alternatives textuelles pertinentes.      L'alternative d'une image est renseignée via l'attribut `accessibilityLabel` (via le protocole `UIAccessibility` implémenté par tout élément standard dérivant de `UIView`).  **À vérifier : **  - les images portant de l'information restitue cette information à travers leur alternative textuelle - les images décoratives n'ont pas d'alternative textuelle  **Objectif utilisateur : **   Permettre l'accès à l'information incluse dans une image pour des utilisateurs qui n'y ont pas accès. Point bloquant : une image sans description textuelle est inexploitable par des personnes ayant des déficiences visuelles ou celles n'affichant pas les images (mobile, faible bande passante...).  **Exemples : **        &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;exemple complet d'image décorative et d'icone informative\&quot; width=\&quot;400\&quot;&gt;      En décomposant l'image :   - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;exemple d'image décorative\&quot; width=\&quot;256\&quot;&gt; pas d'`accessibilityLabel`   - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;exemple d'icone informative - paramètres\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_edit_accessibilityLabel\&quot;.localized`   - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;exemple d'icone informative - édition\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_settings_accessibilityLabel\&quot;.localized`    "
});

documentTitles["criteria-ios.html#couleurs"] = "Couleurs";
index.add({
    url: "criteria-ios.html#couleurs",
    title: "Couleurs",    
    body: "## Couleurs    **Cible : ** tout le monde, en particulier, les personnes malvoyantes, les seniors et les personnes avec des problèmes de vision (daltonisme, vision des contrastes, etc.)   **Quand : **  dès la phase de conception et lors du développement.  **Description : **    Les couleurs jouent un rôle très important dans la transmission des informations. On associe certaines couleurs à des concepts ou à des sensations, mais il ne faut pas oublier qu'une partie de la population ne distingue pas correctement les couleurs.  **À vérifier : **  - La couleur ne doit jamais être le seul canal de transmission d'une information, d'indiquer une action, de solliciter une réponse ou de distinguer un élément.  - Le contraste entre les couleurs de texte et de fond doit aussi être suffisant (7:1 sur mobile, 4,5:1 pour les textes larges, à calculer avec Color Constrast Analyzer par exemple).  **Objectif utilisateur : **   Faciliter la lecture à tous les utilisateurs, déficients visuels ou personne dans un environnement lumineux défavorable (en mobilité).   Permettre aux utilisateurs ne distinguant pas les couleurs (les daltoniens, déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure... ), d'accéder tout de même à l'information par d'autres moyens.  **Outil : ** L'application [colour contrast analyser](http://www.paciellogroup.com/resources/contrastanalyser/) permet de mesurer rapidement des niveaux de contraste de couleurs (gratuit pour mac et windows).    **Exemple de contraste non valide : **   Le texte \&quot;film | 20h40 ...\&quot; ne présente pas un contraste suffisant. Celui-ci ne sera pas lisible par tous les utilisateurs.    ![capture d'écran présentant du texte dont le contraste n'est pas suffisant](images/contraste.png)     **Exemple de passage d'information par la couleur valide et non valide : **   &lt;img src=\&quot;./images/couleur_ios.png\&quot; alt=\&quot;exemple de passage d'information par la couleur valide et non valide\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-ios.html#alternative-textuelle"] = "Alternative textuelle";
index.add({
    url: "criteria-ios.html#alternative-textuelle",
    title: "Alternative textuelle",    
    body: "## Alternative textuelle  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** dès la conception, à la rédaction du contenu et pendant le développement.  **Description : **    Les alternatives textuelles sont au coeur de l'accessibilité sur mobile. Grâce à elles, un utilisateur non voyant peut utiliser une application sans perte d'information.      Tout comme pour les images, il est important de renseigner une alternative textuelle lorsque l'information n'est pas disponible pour les personnes malvoyantes/non-voyantes. C'est le cas des composants fournissant de l'information par la couleur, la forme, la position, le son... Sur mobile, tous les composants peuvent recevoir une alternative textuelle, il est donc possible d'enrichir la vocalisation native d'un élément, y compris celle d'un simple texte.      La place sur mobile étant réduite, on utilise bien souvent des abréviations pour les textes. Mais Cependant, cela pose un problème aux utilisateurs de synthèse vocale qui restitue les abréviations telles quelles. Pour corriger ces vocalisations, il suffit de placer une alternative textuelle sur le texte. Cette alternative contient le texte non abrégé. À noter que VoiceOver sait reconnaitre quelques abréviations courantes. Par exemple, \&quot;etc.\&quot; est bien vocalisé \&quot;et cetera\&quot;.      Certaines images sont régulièrement associées à du texte pour donner une information. C'est le cas notamment des \&quot;messages non lus\&quot; où une infobulle donne le nombre de messages à lire et où une image donne l'information \&quot;message\&quot;. Dans ce cas, la solution consiste à placer une alternative textuelle sur le texte qui donne toutes les informations nécessaires. Par exemple : \&quot;3 messages non lus\&quot;. On peut également placer cette alternative sur l'image, mais dans ce cas, il faut penser à rendre le texte \&quot;invisible\&quot; pour le lecteur d'écran.  L'alternative textuelle d'un élément est renseignée via les attribut `accessibilityLabel, accessibilityHint, accessibilityValue` et `accessibilityTrait` (via le protocole `UIAccessibility` implémenté par tout élément standard dérivant de `UIView`).   L’ordre de vocalisation est toujours le suivant : label, value, trait et hint. Cet ordre ne peut pas être changé et la vocalisation est réalisée en une seule fois, à l’arrivée sur l’élément.   Pour plus d'informations techniques sur ces attributs, nous vous conseillons de lire la section des [alternatives textuelles dans le guide développeur](./dev-ios.html#alternatives-textuelles).  **À vérifier : **  - Les éléments de l'application qui nécessitent une alternative en possède bien une - Les alternatives textuelles de l'application sont explicites et compréhensibles  **Objectif utilisateur : **  Permettre aux utilisateurs ayant des déficiences sensorielles (déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure, en milieu bruyant, malentendant... ) d'accéder aux informations véhiculées par l'application par d'autres biais.  **Exemple : **        Ci-dessous, un exemple fréquent d'une icône qu'on couple avec du texte (infobulle) pour ajouter de l'information. Dans notre cas, l'icone \&quot;mail\&quot; couplé à l'infobulle de valeur \&quot;3\&quot; nous fait comprendre que nous avons \&quot;3 mails non lus\&quot;. Si aucune alternative textuelle n'est ajoutée, 2 vocalisations seront lues \&quot;bouton sans libellé\&quot; et \&quot;3\&quot;. On comprend bien ici l'importance d'ajouter des alternatives textuelles.   &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;exemple d'icône couplée à du texte qui nécessite une alternative textuelle\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;cell.mailImageView.accessibilityLabel = cell.badgeLabel.text! + \&quot; \&quot; + \&quot;exemple_textualAlternative_textImage_accessibilityLabel\&quot;.localized //On ajoute l'alternative complète cell.badgeLabel.isAccessibilityElemement = false //On masque le bouton-icône pour éviter une redondance d'information&lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-ios.html#titre-et-entete"] = "Titre et entête";
index.add({
    url: "criteria-ios.html#titre-et-entete",
    title: "Titre et entête",    
    body: "## Titre et entête  **Cible : ** tout le monde   **Quand : ** dès la conception et à la rédaction du contenu.  **Description : **   Le titre de la page est le premier élément qui est vocalisé ou vu sur un écran mobile. Il facilite la navigation pour tout le monde : à tous moment, on sait où on se trouve dans l'application.   Une erreur commune est de mettre un titre unique pour toutes les pages d'une application (ou même pas de titre du tout).  Les en-tête iOS permettent des structurer les pages en apportant une information supplémentaire. Cette information est utile à l'API d'accessibilité car VoiceOver est capable de naviguer d'en-tête en en-tête (molette de VoiceOver, mode en-tête). Cela permet de se déplacer plus rapidement dans la page.   Pour définir un élément en tant qu'en-tête, il faut positionner son attribut `accessibilityTraits` à la valeur `accessibilityTraitHeader`.  **À vérifier : **   - Chaque écran doit avoir un titre qui lui est propre ou qui permet de se repérer dans la navigation (couplé avec le bouton de retour) - Les éléments identifiés visuellement comme des en-têtes doivent être déclarés à l'API d'accessibilité comme tel  ** Objectif utilisateur : **  Permettre aux utilisateurs d'identifier le sujet d'une page, de se repérer et se faire une idée précise du contenu de la page sans avoir à le lire. Permettre une navigation plus aisée.  **Exemple non valide : **        &lt;img src=\&quot;./images/header_ios.png\&quot; alt=\&quot;exemple de titre non pertinent (absence de titre)\&quot; width=\&quot;300\&quot;&gt;      "
});

documentTitles["criteria-ios.html#etat-des-elements"] = "État des éléments";
index.add({
    url: "criteria-ios.html#etat-des-elements",
    title: "État des éléments",    
    body: "## État des éléments  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **  Si un élément ne restitue pas à la vocalisation, son statut, sa nature ou son état, l'utilisateur de VoiceOver est dans l'impossibilité de comprendre ce qu'il se passe à l'écran. Ne pas préciser qu'une zone est dépliée ou que l'on se trouve face à un système d'onglets sont des exemples très fréquents.      Par défaut, les onglets proposés dans iOS sont parfaitement accessible. Cependant, il est fréquent de proposer des onglets personnalisés afin d’avoir un rendu différent. Il est donc à la charge du développeur de donner les informations de nature et d’états des onglets à l'utilisateur via les attributs d'accessibilité correspondants. Notons toutefois qu'il serait possible de rendre accessibles ces onglets personnalisés comme cela est montré avec l'exemple de la section \&quot;composants standards\&quot;.    Autres éléments classiques qui ne restituent pas par défaut leur état : les zones dépliables. Encore une fois, c'est grâce à l'alternative textuelle du titre de la zone dépliable que l'on peut donner à l'utilisateur de VoiceOver le statut de celle-ci.     Pour renseigner ce genre d'information, il faut utiliser les attributs `accessibilityLabel` et `accessibilityTrait`.  **À vérifier : **  - Tout élément dont le statut est modifié durant l'utilisation de l'application doit restituer son état à travers son alternative textuelle. Par exemple, un élément qui peut être sélectionné/non sélectionné doit restituer son état à travers une alternative textuelle.  **Objectif utilisateur : **  Permettre aux utilisateurs de lecteur d'écran d'avoir accès aux informations des composants, leur état, leur nature afin qu'ils puissent les utiliser sans difficultés.  **Exemple : **        &lt;img src=\&quot;./images/expandable_list.png\&quot; alt=\&quot;exemple de liste dépliable qui nécessite une alternative textuelle\&quot; width=\&quot;250\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;if(accessibleIsFold) {    accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_open_accessibilityHint\&quot;.localized //\&quot;Cliquer pour ouvrir la section\&quot; }else{   accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_close_accessibilityHint\&quot;.localized //\&quot;Cliquer pour fermer la section\&quot; }&lt;/code&gt;&lt;/pre&gt;     "
});

documentTitles["criteria-ios.html#composant-standard"] = "Composant standard";
index.add({
    url: "criteria-ios.html#composant-standard",
    title: "Composant standard",    
    body: "## Composant standard  **Cible : ** tout le monde.   **Quand : ** en phase de sélection des briques logicielles et lors des développements.  **Description : **    L'accessibilité  est prise en compte dans les composants natifs (la plupart du temps). De plus, l'utilisation de composants standards permet à l'utilisateur de se retrouver dans une situation et un comportement habituels. La navigation dans une interface standard est donc plus confortable.      Utiliser au maximum les composants natifs en modifiant leur apparence. Si aucun composant standard ne permet de répondre au besoin, créer un composant dédié basé sur un composant standard en veillant à conserver la cohérence de navigation et l'accessibilité.    **Objectif utilisateur : **   Permet à tous les utilisateurs de plus intuitivement interagir avec l'interface.  **Objectif technique : **  Améliore globalement la maintenabilité. Réduit les temps de développement.      "
});

documentTitles["criteria-ios.html#zone-de-clic"] = "Zone de clic";
index.add({
    url: "criteria-ios.html#zone-de-clic",
    title: "Zone de clic",    
    body: "## Zone de clic  **Cible : ** pour tous et en particulier les personnes avec des déficiences motrices   **Quand : ** dès la phase de conception et lors du développement.  **Description : **    Une taille insuffisante pour la zone d'action d'un composant peut empêcher certains utilisateurs à profiter pleinement de l'application. Cela peut engendrer des frustrations qui peuvent conduire à la désinstallation de l'application. Chaque élément cliquable de l'application doit donner à l'utilisateur une taille suffisante pour sa zone d'action.  **À vérifier : **  - Apple définit pour son système une taille de zone de clic minimum de 44pt (en hauteur ET largeur) ; [lien vers les recommandations Apple](https://developer.apple.com/ios/human-interface-guidelines/visual-design/layout/)  **Objectif utilisateur : **  Améliorer le confort de navigation au toucher (touch).  **Exemple valide : **   Dans les exemples ci-dessous, le cadre noir correspond à la taille de la zone interactive.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;exemple de composant interractif avec une zone d'interraction assez large\&quot; width=\&quot;300\&quot;&gt;  **Exemple non-valide : **    &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;exemple de composant interractif avec une zone d'interraction trop petite\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-ios.html#element-fantome"] = "Elément fantôme";
index.add({
    url: "criteria-ios.html#element-fantome",
    title: "Elément fantôme",    
    body: "## Elément fantôme  **Cible : ** les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **    Bien qu'invisibles à l'écran, certains éléments peuvent être lus par le lecteur d'écran (éléments positionnés en dehors de la zone visible ou masqués par d'autres éléments). La superposition d'écrans est quelque chose de courant sur mobile, mais cela engendre des problèmes d'accessibilité très lourds à corriger si elle n'est pas faite correctement dès le départ. Un lecteur d'écran tel que VoiceOver est capable de lire les informations d'une vue qui est placée \&quot;sous\&quot; une autre. Mais si l'utilisateur n'est plus capable d'interagir avec cette vue, cela perturbe totalement sa navigation et celle-ci devient vite impossible.      Un exemple fréquent d'élément fantôme survient lors de la création de composant personnalisé tel que des \&quot;alert dialog\&quot; (notification utilisateur). Notons toutefois que ce genre de composant personnalisé est tout à fait susceptible d'être accessible. Nous vous invitons à lire la section correspondante dans la [partie développeur](./dev-ios.html#masquer-des-l-ments-l-accessibilit-).  **À vérifier : **  - Voiceover ne doit pas vocaliser d'éléments indésirables appartenant à un autre écran que celui en cours de consultation.  **Objectif utilisateur : **  Permettre la navigation dans l'application sans avoir d'élément perturbant, non utilisable, sur la vue courante.   **Exemple non-valide : **    Dans l’exemple ci-dessous, l’alerte personnalisée présente ce problème de vue fantôme. En effet, avec VoiceOver activé, il est possible de \&quot;lire\&quot; les éléments situés en dessous, comme nous le montre le focus de VoiceOver (en noir sur l'image)   &lt;img src=\&quot;./images/ghost_ios.png\&quot; alt=\&quot;exemple d'élément fantôme\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-ios.html#controle-de-contenu"] = "Contrôle de contenu";
index.add({
    url: "criteria-ios.html#controle-de-contenu",
    title: "Contrôle de contenu",    
    body: "## Contrôle de contenu  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles et cognitives.   **Quand : ** lors de la conception et lors du développement.  **Description : **   Sur mobile, les lecteurs d'écran essayent de transmettre au maximum à l'utilisateur les changements de contexte. Dans certains cas, cela peut donner des vocalisations permanentes, et donc inaudibles, ou empêcher toute action de l'utilisateur.   L'utilisateur doit rester maître du contenu à tout instant. C'est particulièrement vrai avec le contenu interactif. Il faut donc éviter par exemple qu'une vidéo ne se lance directement en plein écran, qu'une vidéo ne se lance directement sans une action au préalable de l'utilisateur, qu'un carrousel défile de manière automatique, etc.  **À vérifier : **  - Les contenus interactifs peuvent être maitrisés par l'utilisateur (pause sur carrousel automatique, bouton accessible pour sortir du mode plein-écran etc)  **Objectif utilisateur : **  Permettre aux utilisateurs de rester maître de l'application. Permettre à l'utilisateur de lecteur d'écran d'éviter une pollution sonore qui peut nuire à sa navigation.   **Objectif technique : **  Améliorer le référencement naturel.   "
});

documentTitles["criteria-ios.html#changement-de-contenu"] = "Changement de contenu";
index.add({
    url: "criteria-ios.html#changement-de-contenu",
    title: "Changement de contenu",    
    body: "## Changement de contenu  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **   Lorsque du contenu est modifié dynamiquement à la suite d'une action de l'utilisateur, il faut le notifier à la synthèse vocale. Sans retour vocal, l'utilisateur ne sait pas qu'une action a été déclenchée.   Sur une page, si du contenu est modifié dynamiquement suite à une action utilisateur, il est important que le lecteur d'écran soit notifié afin qu'il déclenche une vocalisation. Par exemple, les listes qui se rafraîchissent, ou un compteur de temps.  Pour déclencher une vocalisation, il faut envoyer une notification à l’API d’accessibilité via la méthode `UIAccessibilityPostNotification` avec en paramètre la notification permettant de déclencher une vocalisation `UIAccessibilityAnnouncementNotification` et la chaine de caractère à vocaliser.    Il est également conseillé de notifier l’API d’accessibilité lorsqu'un changement de contexte survient. Pour ce faire, il faut envoyer une notification de modification à l’API d’accessibilité via la méthode `UIAccessibilityPostNotification`.   Il existe plusieurs notifications de modification, mais les deux plus utiles sont :   - `UIAccessibilityLayoutChangedNotification` : permet de spécifier à l’API d’accessibilité qu’une partie de la page a été modifiée. - `UIAccessibilityScreenChangedNotification` : permet d’annoncer un changement global de la page.  Pour plus d'information technique sur ces méthodes, nous vous invitons à regarder la section correspondante dans le [guide développeur pour iOS](./dev-ios.html#informer-d-une-modification-sur-la-page).  **À vérifier : **  - Avec un lecteur d'écran, s'assurer que les modifications dynamiques dans les pages sont bien vocalisées.  **Objectif utilisateur : **  Donner accès aux modifications des informations de l'application aux utilisateurs de lecteur d'écran.   "
});

documentTitles["criteria-ios.html#scroll-horizontal"] = "Scroll horizontal";
index.add({
    url: "criteria-ios.html#scroll-horizontal",
    title: "Scroll horizontal",    
    body: "## Scroll horizontal  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** dès la phase de conception et lors du développement.  **Description : **  Un scroll horizontal peut être très difficile à détecter si aucun visuel n'aide l'utilisateur à comprendre qu'il existe plusieurs pages.   Ne pas hésiter à afficher un élément pour indiquer un scroll horizontal (les \&quot;points\&quot; d'un `UIPageControl`). Quand cela est nécessaire, ajouter également des boutons \&quot;suivant\&quot; et \&quot;précédent\&quot;.  **À vérifier : **  - Les scrolls horizontaux sont indiqués visuellement - Avec le lecteur d'écran activé, un mécanisme permet de passer de page en page lorsqu'un scroll horizontal est présent.  **Objectif utilisateur : **  Donner une indication visuelle aux utilisateurs lors de la présence de scrolls horizontaux. Permettre aux utilisateurs de lecteur d'écran d'utiliser les scrolls horizontaux.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple valide :**  &lt;img src=\&quot;./images/scroll_ios_h1.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple non-valide :**  &lt;img src=\&quot;./images/scroll_ios_h2.png\&quot; alt=\&quot;exemple de scroll horizontal non accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-ios.html#formulaire"] = "Formulaire";
index.add({
    url: "criteria-ios.html#formulaire",
    title: "Formulaire",    
    body: "## Formulaire  **Cible : ** tout le monde et en particulier les personnes déficientes visuelles.   **Quand : ** lors de la conception et lors du développement.  **Description : **  Lier les champs de formulaires avec leurs labels apporte une vocalisation supplémentaire qui permet à l'utilisateur de comprendre quoi remplir lorsqu'il arrive sur un champ de formulaire.      Sous iOS, on apporte une information supplémentaire sur les champs de formulaire via son alternative textuelle, soit l'attribut `accessibilityLabel`.  **À vérifier : **  - les champs de formulaire doivent restituer leurs labels  **Objectif utilisateur : **  Améliorer la navigation en améliorant la compréhension globale de la page, les champs de formulaires décrivant le contenu attendu.   "
});

documentTitles["criteria-ios.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-ios.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture  **Cible : ** les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **  L'ordre de lecture permet à l'utilisateur de lecteur d'écran de se repérer dans la navigation et d'assurer une cohérence fonctionnelle. Il est donc important d'y faire attention.      Par défaut, l'ordre de lecture de la synthèse vocale prend en compte plusieurs paramètres : la lecture « logique » (en France), soit de gauche à droite et de haut en bas. Il existe cependant certain cas ou le lecteur d'écran n'arrive pas à déterminer un ordre et dans ce cas, il utilise l'ordre de définition des éléments ce qui peut amener des vocalisations incohérentes.    Redéfinir l’ordre de lecture VoiceOver s’effectue en respectant le protocole [`UIAccessibilityContainer`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibilityContainer_Protocol/). L’idée est d’avoir un tableau des éléments de la vue qui définit l’ordre de lecture des éléments. Il est bien souvent nécessaire d’utiliser l’attribut `shouldGroupAccessibilityElement` afin d’avoir un ordre précis, mais pour une partie seulement de la vue (le reste étant l’ordre naturel de lecture).    **À vérifier : **  - L'ordre de lecture (celui de VoiceOver) est logique et cohérent.  **Objectif utilisateur : **  Assurer un ordre de lecture logique et cohérent aux utilisateurs de lecteur d'écran  pour leur assurer une complète compréhension du contenu.   **Exemple :**       Dans cet exemple, l'ordre de lecture par défaut est dépend complétement de l'implémentation et de l'ordre de déclaration des éléments. Dans ce cas-ci : `1, 4, 7, 2, 5, 8, 0, 3, 6, 9, vol+, vol-, p+, p-`. Un ordre de lecture plus consistent serait `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol+, vol-, p+, p-`.    &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt;   &lt;pre&gt;&lt;code&gt;remoteView.isAccessibilityElement = false remoteView.shouldGroupAccessibilityChildren = true remoteView.accessibilityElements = [] remoteView.accessibilityElements?.append(oneButton) remoteView.accessibilityElements?.append(twoButton) remoteView.accessibilityElements?.append(threeButton) remoteView.accessibilityElements?.append(fourButton) [...]&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-ios.html#langue"] = "Langue";
index.add({
    url: "criteria-ios.html#langue",
    title: "Langue",    
    body: "## Langue  **Cible : ** les personnes déficientes visuelles.   **Quand : ** lors du développement.  **Description : **  La vocalisation donnée par VoiceOver s'effectue, par défaut, dans la langue du système du mobile. Il arrive parfois que certain mots/textes d'une application soient dans une langue différente. Afin que la vocalisation soit audible, il faut déclarer ces textes dans la langue correspondante.    Afin de modifier la langue de prononciation de VoiceOver pour un mot ou un texte, il existe l’attribut `accessibilityLanguage`. Disponible via le protocole `UIAccessibility`.   **À vérifier : **  - Les mots/textes dans une langue différente de celle du reste de l'application sont bien vocalisés dans leur langue  **Objectif utilisateur : **  Assurer une compréhension des textes de l'application.   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["index.html#recommandations-accessibilite-orange-pour-les-mobiles"] = "Recommandations accessibilité Orange pour les mobiles";
index.add({
    url: "index.html#recommandations-accessibilite-orange-pour-les-mobiles",
    title: "Recommandations accessibilité Orange pour les mobiles",    
    body: "# Recommandations accessibilité Orange pour les mobiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Présentation\&quot;}]); });&lt;/script&gt;  *** L'accessibilité, une nécessité pour certains, un avantage pour tous ! ***  "
});

documentTitles["index.html#definition-de-laccessibilite-mobile"] = "Définition de l’accessibilité mobile";
index.add({
    url: "index.html#definition-de-laccessibilite-mobile",
    title: "Définition de l’accessibilité mobile",    
    body: "## Définition de l’accessibilité mobile ** C’est une application utilisable par tous **  - Personnes valides - Seniors - Personnes en situation de handicap (temporaire ou permanent)  ** et dans tous les contextes **  - Avec tous types de matériel : navigateurs mobiles, Android, iOS, tablette - Dans un contexte dégradé : mauvaise luminosité, etc. - Avec des logiciels spécifiques de compensation du handicap  "
});

documentTitles["index.html#organisation-de-ce-site"] = "Organisation de ce site";
index.add({
    url: "index.html#organisation-de-ce-site",
    title: "Organisation de ce site",    
    body: "## Organisation de ce site  "
});

documentTitles["index.html#criteres-mobiles"] = "Critères mobiles";
index.add({
    url: "index.html#criteres-mobiles",
    title: "Critères mobiles",    
    body: "### Critères mobiles Liste des différents critères d'accessibilité à respecter pour obtenir une application mobile (Android ou iOS) accessible. Un bon moyen de prendre connaissance des critères à respecter pour s'engager vers une démarche de mise en accessibilité.   "
});

documentTitles["index.html#guide-pour-les-developpeurs"] = "Guide pour les développeurs";
index.add({
    url: "index.html#guide-pour-les-developpeurs",
    title: "Guide pour les développeurs",    
    body: "### Guide pour les développeurs Section à destination des développeurs. Tout ce qu'il faut savoir pour coder accessible sur mobile, sous Android ou iOS.  "
});

documentTitles["index.html#mdan"] = "mDAN";
index.add({
    url: "index.html#mdan",
    title: "mDAN",    
    body: "### mDAN Présentation de l'application mDAN, le démonstrateur d'accessibilité numérique pour mobile. Vous y trouverez également des liens pour télécharger l'application (Android et iOS)  "
});

documentTitles["index.html#lecteur-decran"] = "Lecteur d'écran";
index.add({
    url: "index.html#lecteur-decran",
    title: "Lecteur d'écran",    
    body: "### Lecteur d'écran Un guide simple pour utiliser les lecteurs d'écran d'iOS et d'Android, respectivement VoiceOver et TalkBack.  "
});

documentTitles["index.html#liens-utiles"] = "Liens utiles";
index.add({
    url: "index.html#liens-utiles",
    title: "Liens utiles",    
    body: "### Liens utiles Quelques liens utiles qui pourront compléter les explications de ce site. &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["mdan.html#mdan"] = "mDAN";
index.add({
    url: "mdan.html#mdan",
    title: "mDAN",    
    body: "# mDAN     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;mDAN\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;mdan\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["mdan.html#mdan-kesako"] = "mDAN, kesako?";
index.add({
    url: "mdan.html#mdan-kesako",
    title: "mDAN, kesako?",    
    body: "## mDAN, kesako?  mDAN est une application mobile (Android et iOS) visant à présenter l’accessibilité d’un système mobile sous toutes ses formes. Ses objectifs sont :  - présentation de l’accessibilité - critères d’accessibilité mobile - guide pour les développeurs - guide d’utilisation du lecteur d’écran (Talkback ou VoiceOver) - présentation des options d’accessibilité par plateforme - contact, etc.  "
});

documentTitles["mdan.html#mdan-oui-mais-pour-qui"] = "mDAN, oui, mais pour qui?";
index.add({
    url: "mdan.html#mdan-oui-mais-pour-qui",
    title: "mDAN, oui, mais pour qui?",    
    body: "## mDAN, oui, mais pour qui?  mDAN, de part son contenu riche, cible la plupart des corps de métier susceptibles d’être impactés par l’accessibilité :   - testeurs : avec les critères d’accessibilité et le guide d’utilisation du lecteur d’écran - développeurs : avec le guide de développement - managers, designers, etc : pour la sensibilisation à l’accessibilité  Pour tout monde en somme !  "
});

documentTitles["mdan.html#je-veux-mdan"] = "Je veux mDAN !";
index.add({
    url: "mdan.html#je-veux-mdan",
    title: "Je veux mDAN !",    
    body: "## Je veux mDAN !  L'application mDAN sera prochainement disponible pour Android et iOS sur le play store et l'app store. &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader.html#guide-dutilisation-des-lecteurs-decran-talkback-et-voiceover"] = "Guide d'utilisation des lecteurs d'écran TalkBack et VoiceOver";
index.add({
    url: "screen-reader.html#guide-dutilisation-des-lecteurs-decran-talkback-et-voiceover",
    title: "Guide d'utilisation des lecteurs d'écran TalkBack et VoiceOver",    
    body: "# Guide d'utilisation des lecteurs d'écran TalkBack et VoiceOver  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Lecteur d'écran\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  A travers cette section, nous allons présenter les gestes de base pour une utilisation des lecteurs d'écran d'Android et iOS. Ces outils sont riches en fonctionalités mais nécessitent une connaissance minimale pour être utilisé efficacement. C'est cette utilisation standard qui sera présentée ici.  Deux versions sont disponibles : - **TalkBack** le lecteur d'écran intégré à Android. - **VoiceOver**  le lecteur d'écran intégré à iOS.  &lt;p class=\&quot;row\&quot;&gt;     &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;         &lt;h2 class=\&quot;sr-only\&quot;&gt;TalkBack&lt;/h2&gt;                   &lt;a href=\&quot;./talkback.html\&quot; class=\&quot;btn btn-info\&quot;&gt;             ![](./images/android.png)             &lt;div&gt;Guide d'utilisation de Talkback&lt;/div&gt;         &lt;/a&gt;     &lt;/div&gt;     &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;         &lt;h2 class=\&quot;sr-only\&quot;&gt;Voiceover&lt;/h2&gt;                   &lt;a href=\&quot;./voiceover.html\&quot; class=\&quot;btn btn-info\&quot;&gt;             ![](./images/iphone.png)             &lt;div&gt;Guide d'utilisation de VoiceOver&lt;/div&gt;         &lt;/a&gt;     &lt;/div&gt;             &lt;/p&gt;  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["talkback.html#guide-dutilisation-de-talkback"] = "Guide d'utilisation de TalkBack";
index.add({
    url: "talkback.html#guide-dutilisation-de-talkback",
    title: "Guide d'utilisation de TalkBack",    
    body: "# Guide d'utilisation de TalkBack  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;lecteur d'écran\&quot;, \&quot;url\&quot;:\&quot;./screen-reader.html\&quot;},{\&quot;label\&quot;:\&quot;Guide d'utilisation de TalkBack\&quot;}]);     });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  TalkBack est un lecteur d'écran intégré à Android qui décrit à haute voix les éléments qui apparaissent sur l'écran du téléphone. Il est gratuit et permet à un utilisateur non ou mal voyant, dyslexique ou illettré de pouvoir vocaliser tous les éléments visibles contenus dans la page. Un outil comme TalkBack est appelé indifféremment lecteur d'écran ou synthèse vocale, même si un lecteur d'écran est en fait un logiciel associé à une synthèse vocale.  Lorsque TalkBack est activé, les gestes standards effectués sur l'écran tactile donnent des résultats différents. En outre, des gestes supplémentaires permettent de déplacer le focus à l'écran et de contrôler les éléments sélectionnés. TalkBack comprend des gestes de toucher et de balayage à un, deux et trois doigts. Nous décrivons ici les gestes de base pour une utilisation courante de TalkBack. A noter : TalkBack n'est considéré comme accessible qu'à partir de la version JellyBean (4.1) car on peut naviguer séquentiellement.  Avant toute chose, commencez par mettre à jour TalkBack : [page de l'application sur le PlayStore](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback)  "
});

documentTitles["talkback.html#gestes-de-bases"] = "Gestes de bases";
index.add({
    url: "talkback.html#gestes-de-bases",
    title: "Gestes de bases",    
    body: "## Gestes de bases &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Se déplacer avec un doigt sur l'écran&lt;/h3&gt;       	Explorer l'écran et entendre la vocalisation de l'élément qui est touché.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Double-cliquer n'importe où sur l'écran&lt;/h3&gt;       	Ouvrir ou activer l'élément qui a été touché (vocalisé) en dernier.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture3_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture3_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers le haut ou le bas en utilisant deux doigts&lt;/h3&gt;       	Se déplacer verticalement sur une liste ou sur une page à condition qu'elle soit sélectionnée. Correspond à un slide vertical.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture4_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture4_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       	&lt;h3&gt;Slider vers la gauche ou la droite en utilisant deux doigts&lt;/h3&gt;       	Changer de page ou d'écran quand c'est possible. Correspond à un slide horizontal.     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers la droite en utilisant un doigt&lt;/h3&gt;       	Déplacer le focus TalkBack sur l'élément suivant.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers la gauche en utilisant un doigt&lt;/h3&gt;       	Déplacer le focus TalkBack sur l'élément précédent.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers le haut en utilisant un doigt&lt;/h3&gt;       	Changer de mode de lecture : \&quot;pages\&quot;, \&quot;par défaut (éléments)\&quot;, \&quot;caractères\&quot;, \&quot;mots\&quot;, \&quot;lignes\&quot; et \&quot;paragraphes\&quot;.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers le bas en utilisant un doigt&lt;/h3&gt;       	Explorer l'écran et entendre la vocalisation de l'élément qui est touché.       &lt;/p&gt;     &lt;/div&gt; &lt;/div&gt;    &lt;span class=\&quot;licence\&quot;&gt;These images are licensed under a Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  Pour plus d'information sur TalkBack et une description détaillée de ses fonctionnalités, nous vous invitons à lire la [documentation officielle de Google sur TalkBack](https://support.google.com/accessibility/android/answer/6283677?hl=fr&amp;ref_topic=3529932).    &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["voiceover.html#guide-dutilisation-de-voiceover"] = "Guide d'utilisation de VoiceOver";
index.add({
    url: "voiceover.html#guide-dutilisation-de-voiceover",
    title: "Guide d'utilisation de VoiceOver",    
    body: "# Guide d'utilisation de VoiceOver  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;lecteur d'écran\&quot;, \&quot;url\&quot;:\&quot;./screen-reader.html\&quot;},{\&quot;label\&quot;:\&quot;Guide d'utilisation de VoiceOver\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  VoiceOver est un lecteur d’écran intégré qui décrit à haute voix les éléments qui apparaissent sur l’écran de votre téléphone. Il est gratuit et permet à un utilisateur non ou mal voyant, dyslexique et illettré de pouvoir vocaliser tous les éléments visibles contenus dans la page. Un outil comme VoiceOver est appelé indifféremment lecteur d'écran ou synthèse vocale, même si un lecteur d'écran est en fait un logiciel associé à une synthèse vocale.    Lorsque VoiceOver est activé, les gestes standards effectués sur l’écran tactile donnent des résultats différents ; en outre, des gestes supplémentaires permettent de se déplacer à l’écran et de contrôler des éléments sélectionnés. VoiceOver comprend des gestes de toucher et de balayage à deux, trois et quatre doigts. Nous décrirons ici les gestes de base pour une utilisation courante de VoiceOver.  "
});

documentTitles["voiceover.html#gestes-de-bases"] = "Gestes de bases";
index.add({
    url: "voiceover.html#gestes-de-bases",
    title: "Gestes de bases",    
    body: "## Gestes de bases &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Se déplacer avec un doigt sur l'écran&lt;/h3&gt;       	Explorer l'écran et entendre la vocalisation de l'élément qui est touché.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Double-cliquer n'importe où sur l'écran&lt;/h3&gt;       	Ouvrir ou activer l'élément qui a été touché (vocalisé) en dernier.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture9_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture9_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers le haut ou le bas en utilisant trois doigts&lt;/h3&gt;       	Se déplacer verticalement sur une liste ou sur une page à condition qu'elle soit sélectionnée. Correspond à un slide vertical.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       	&lt;h3&gt;Slider vers la gauche ou la droite  en utilisant trois doigts&lt;/h3&gt;       	Changer de page ou d'écran quand c'est possible. Correspond à un slide horizontal.     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers la droite en utilisant un doigt&lt;/h3&gt;       	Déplacer le focus VoiceOver sur le prochain élément.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers la gauche en utilisant un doigt&lt;/h3&gt;       	Déplacer le focus VoiceOver sur l’élément précédent.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers le haut en utilisant un doigt&lt;/h3&gt;       	Permet d’augmenter la valeur d’un élément ajustable.       &lt;/p&gt;     &lt;/div&gt;             &lt;/div&gt; &lt;div class=\&quot;row screenreaderContent\&quot;&gt;     &lt;div class=\&quot;hidden-xs col-sm-3 col-md-2 vcenter\&quot;&gt;       &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;/div&gt;&lt;!--     --&gt;&lt;div class=\&quot;col-xs-12 col-sm-9 col-md-10 vcenter\&quot;&gt;       &lt;p&gt;       	&lt;h3&gt;Slider vers le bas en utilisant un doigt&lt;/h3&gt;       	Permet de diminuer la valeur d’un élément ajustable.       &lt;/p&gt;     &lt;/div&gt; &lt;/div&gt;    &lt;span class=\&quot;licence\&quot;&gt;These images are licensed under a Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  Pour plus d’informations sur VoiceOver et une description détaillée des fonctionnalités qu’il propose, nous vous invitons à lire la [documentation officielle d'Apple sur VoiceOver](https://help.apple.com/iphone/9/#/iph3e2e415f).    &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["links.html#liens-utiles"] = "Liens utiles";
index.add({
    url: "links.html#liens-utiles",
    title: "Liens utiles",    
    body: "# Liens utiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Liens utiles\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;links\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["links.html#en-complement"] = "En complément";
index.add({
    url: "links.html#en-complement",
    title: "En complément",    
    body: "## En complément Vous trouverez de l'information sur le développement accessible pour iOS et Android sur [le dépôt github de la DISIC](https://github.com/DISIC/guide-mobile_app_dev_natif) (Direction Interministérielle des Systèmes d'Information et de Communication): - [Guide d'audit d'applications mobiles](https://github.com/DISIC/guide-mobile_app_audit) - [Guide de conception d'applications mobiles accessibles](https://github.com/DISIC/guide-mobile_app_conception) - [Guide de développement d'applications mobiles hybrides accessibles avec Ionic et OnsenUI](https://github.com/DISIC/guide-mobile_app_dev_hybride)  "
});

documentTitles["links.html#pour-android"] = "Pour Android";
index.add({
    url: "links.html#pour-android",
    title: "Pour Android",    
    body: "## Pour Android Présentation de l'accessibilité sous Android et de l'API Google   - [documentation officielle de Google](https://developer.android.com/guide/topics/ui/accessibility/index.html)   - [guide complet de TalkBack](https://support.google.com/accessibility/android/answer/6283677?hl=fr&amp;ref_topic=3529932)  Application AccessibilityScanner pour vous aider à tester une partie de l'accessibilité de vos applications rapidement et simplement - [application AccessibilityScanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr)  "
});

documentTitles["links.html#pour-ios"] = "Pour iOS";
index.add({
    url: "links.html#pour-ios",
    title: "Pour iOS",    
    body: "## Pour iOS Présentation de l'accessibilité sous iOS et de l'API Apple - [documentation officielle de l'API d'accessiblité Apple](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/iPhoneAccessibility/Introduction/Introduction.html) - [présentation des options d'accessibilité d'iOS](http://www.apple.com/fr/accessibility/) - [page officielle de l'accessibilité sous Apple](https://developer.apple.com/accessibility/ios/) - [utilisation de VoiceOver](https://help.apple.com/iphone/9/#/iph3e2e415f)   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});


