
var index = lunr(function () {
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["contact.html#your-opinion-matters"] = "Your opinion matters ...";
index.add({
    url: "contact.html#your-opinion-matters",
    title: "Your opinion matters ...",    
    body: "# Your opinion matters ...    &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Contact\&quot;}]); });&lt;/script&gt;  Have a bug or a feature request?    Please first check [the issues](https://github.com/Orange-OpenSource/a11y-guidelines/issues) and search for existing and closed issues. If your problem or idea is not addressed yet, please [open a new issue](https://github.com/Orange-OpenSource/a11y-guidelines/issues/new).  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["about.html#about"] = "About";
index.add({
    url: "about.html#about",
    title: "About",    
    body: "# About     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;About\&quot;}]); });&lt;/script&gt;  Documentation under the [CC BY SA 3.0 license](/LICENSE.txt), source code of this site and examples are available [on github](https://github.com/Orange-OpenSource/a11y-guidelines).    The Orange logo and some images or screenshots are property of Orange:  Copyright (C) 2016 Orange SA All rights reserved   [List of the concerned files](/NOTICE.txt)  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["dev-mobile.html#guide-for-developers"] = "Guide for developers";
index.add({
    url: "dev-mobile.html#guide-for-developers",
    title: "Guide for developers",    
    body: "# Guide for developers  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Guide for mobile developers\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;dev-android.html\&quot;},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;dev-ios.html\&quot;}     ]);         });&lt;/script&gt;  &lt;span data-menuitem=\&quot;dev-mobile\&quot;&gt;&lt;/span&gt;  The developer guide is intended to help developers with the major Android / iOS accessibility options. Through different categories, this guide explains how to use the accessibility attributes / methods and provides links to the official documentation of Google / Apple.  Two versions are available: - **Android version** is about the application development for the Google platform: Android. - **iOS version** is about the application development for the Apple platform: iOS.  &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;critères Android&lt;/h2&gt;               &lt;a href=\&quot;./dev-android.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/android.png)         &lt;div&gt;Android developer guide&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt; &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;critères iOS&lt;/h2&gt;               &lt;a href=\&quot;./dev-ios.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/iphone.png)         &lt;div&gt;iOS developer guide&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt;              &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["dev-android.html#android-developer-guide"] = "Android developer guide";
index.add({
    url: "dev-android.html#android-developer-guide",
    title: "Android developer guide",    
    body: "# Android developer guide  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Guide for developers\&quot;, \&quot;url\&quot;: \&quot;./dev-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;Android developer guide\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;dev-mobile.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;dev-ios.html\&quot;}     ]);             });&lt;/script&gt;  &lt;span data-menuitem=\&quot;dev-mobile\&quot;&gt;&lt;/span&gt;  This guide aims to present the various accessibility options available on the Android SDK. Through different categories, this guide explains how to use the accessibility attributes / methods and provides links to the official Google documentation. Code snippets are also available to show you how to implemente it.    "
});

documentTitles["dev-android.html#text-alternative"] = "Text alternative";
index.add({
    url: "dev-android.html#text-alternative",
    title: "Text alternative",    
    body: "## Text alternative **Description: **    On Android, the vocalization of an element is made through an attribute, named `contentDescription`. This attribute accepting a single string parameter (and therefore localizable) completely redefines the text to be read by the accessibility service like TalkBack. This allows a component to be more explicit than the text displayed on the screen. For example, in the case of a button whose title is \&quot;OK\&quot;, the `contentDescription` attribute can indicate that the button is used to confirm an action.  The `contentDescription` attribule must also be used on custom elements to indicate their nature. For example, a clickable `LinearLayout` must have a `contentDescription` like \&quot;button_name, button\&quot; (it should also be accessible with the focus, see the corresponding section).   Note that the `contentDescription` is available in any element that inherits from `View`. It is therefore possible to set a `contentDescription` on a `TextView` for example, as shown in the \&quot;accessibility guide - text alternative - abbreviations, dates and times\&quot; section.   **Examples: **     Simple example (localized):   `myTextView.setContentDescription(getString(R.string.criteria_alt_ex1_cd_txt2));`  Example indicating the state and nature of a TabHost (not localized):   &lt;pre&gt;&lt;code&gt;private class TabHostListener implements TabHost.OnTabChangeListener { 	[...] 	public void onTabChanged(String tabId) {setContentDescription(mTabHost, mTabsLabel);} }  private void setContentDescription(TabHost mTabHost, String[] mTabsLabel) { 	int tab = mTabHost.getCurrentTab(); 	int tabCount = mTabHost.getTabWidget().getTabCount();  	for (int tabNumber = 0; tabNumber &lt; tabCount; tabNumber++) { 		CharSequence contentDescription = mTabsLabel[tabNumber];  		contentDescription = contentDescription + \&quot;, tab \&quot; + (tabNumber + 1) + \&quot; on \&quot; + tabCount; 		if (tabNumber == tab) { 			contentDescription = contentDescription + \&quot;, selected\&quot;; 		} 		mTabHost.getTabWidget().getChildAt(tabNumber).setContentDescription(contentDescription); 	} }&lt;/code&gt;&lt;/pre&gt;  **Link: **  - [contentDescription](https://developer.android.com/reference/android/view/View.html#attr_android:contentDescription)     "
});

documentTitles["dev-android.html#hiding-elements-from-accessibility"] = "Hiding elements from accessibility";
index.add({
    url: "dev-android.html#hiding-elements-from-accessibility",
    title: "Hiding elements from accessibility",    
    body: "## Hiding elements from accessibility    **Description: **    It is possible via an accessibility attribute to hide elements from accessibility tools (e.g. TalkBack). By extension, it is possible to force some elements to be visible to accessibility tools. `ImportantForAccessibility`: depending on the value of the attribute, it indicates if an element is whether visible or not to the Accessibility API. - `Auto` (0): this is the default, it is the system that decides. For example, a `Button` will have its default value set to 1 (&lt;i&gt;yes&lt;/i&gt;) and a `LinearLayout` set to 2 (&lt;i&gt;no&lt;/i&gt;). - `Yes` (1): the view is important for accessibility. For example, it can receive the TalkBack focus. - `No` (2): the view is not important for accessibility. It does not trigger accessibility events and is therefore ignored by accessibility services such as TalkBack. - `NoHideDescendants` (4): the view is not important for accessibility, but also his children views. This will hide all the items in a view to accessibility at once. Very useful on custom elements.    Note: the \&quot;`importantForAccessibility`\&quot; attribute is available to any element that inherits from `View`.  **Examples: **  From xml:  `android:importantForAccessibility=\&quot;no\&quot;`  Programmatically: `myView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS);`  **Link: **       - [importantForAccessibility](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility%28int%29)   "
});

documentTitles["dev-android.html#trigger-a-vocalization"] = "Trigger a vocalization";
index.add({
    url: "dev-android.html#trigger-a-vocalization",
    title: "Trigger a vocalization",    
    body: "## Trigger a vocalization  **Description: **    It is very easy to trigger vocalizations with TalkBack. Triggering a vocalization is very useful for dynamic content, just like a `LiveRegion` (see corresponding section). To trigger a vocalization, just call the `announceForAccessibility` method with the id parameter of the string to vocalize.  Note: the `announceForAccessibility` method is available on any item that inherits from `View` and is made in the system language.  Warning: we are talking about TalkBack vocalization and not TTS (Text To Speech) that can operate whether TalkBack is on or off.  ** Example: **  It is common to check the Android version before triggering TalkBack vocalization. This is because `announceForAccessibility` has been introduced in Jelly Bean. &lt;pre&gt;&lt;code&gt;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) { 	getView().announceForAccessibility(getString(R.string.criteria_contentchange_ex1_announce)); }&lt;/code&gt;&lt;/pre&gt;  **Link: **  - [announceForAccessibility](https://developer.android.com/reference/android/view/View.html#announceForAccessibility%28java.lang.CharSequence%29)   "
});

documentTitles["dev-android.html#check-if-talkback-is-on"] = "Check if Talkback is on";
index.add({
    url: "dev-android.html#check-if-talkback-is-on",
    title: "Check if Talkback is on",    
    body: "## Check if Talkback is on  **Description: **   On Android, it is possible to know whether the Accessibility API is enabled, thus whether TalkBack is enabled.  **Usage: **   &lt;pre&gt;&lt;code&gt;AccessibilityManager am = (AccessibilityManager) context.getSystemService(ACCESSIBILITY_SERVICE);   boolean isAccessibilityEnabled = am.isEnabled();&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["dev-android.html#live-region-dynamic-content"] = "Live region (dynamic content)";
index.add({
    url: "dev-android.html#live-region-dynamic-content",
    title: "Live region (dynamic content)",    
    body: "## Live region (dynamic content)  **Description  **  You can specify to a view that it is an \&quot;live\&quot; region, it means that its content is subject to change dynamically and should in this case notify the Accessibility API. This will generate TalkBack vocalizations. A typical use case: on a form, if the user makes a mistake and an error message appears, the view containing the error message must be defined as a \&quot;live\&quot; region.  We must use the `setAccessibilityLiveRegion` method that takes a mode parameter for the live region. There are 3 modes: - `ACCESSIBILITY_LIVE_REGION_NONE`: this view is not a live region. This is the default for most views. - `ACCESSIBILITY_LIVE_REGION_POLITE`: when a change occurs, vocalizations are triggered on the changes. These vocalizations are \&quot;polite\&quot;; they have lower priority than system vocalizations for example. - `ACCESSIBILITY_LIVE_REGION_ASSERTIVE`: when a change occurs, vocalizations are triggered on the changes. These vocalizations are \&quot;assertive\&quot;; they have the highest priority and are immediately vocalized.   Note the `setAccessibilityLiveRegion` method is available on any class that inherits from `View`.  **Examples: **  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView    [...]    android:accessibilityLiveRegion=\&quot;polite\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Link: **  - [setAccessibilityLiveRegion](https://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion%28int%29)   "
});

documentTitles["dev-android.html#reading-order-talkback"] = "Reading order (TalkBack)";
index.add({
    url: "dev-android.html#reading-order-talkback",
    title: "Reading order (TalkBack)",    
    body: "## Reading order (TalkBack)  **Description: **    By default, the reading order of voice synthesis depends on: the 'logical' reading (in France), from left to right and top to bottom, and xml reading (order of elements declaration). It is quite possible to redefine the reading order with two attributes:   - `AccessibilityTraversalAfter`: sets the id of a view after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other view before the content of this one. - `AccessibilityTraversalBefore`: sets the id of a view before which this one is visited in accessibility traversal. A screen-reader must visit the content of this view before the content of the one it precedes.  Note: These attributes can be used directly in the xml but also in the code via the `setAccessibilityTraversalBefore` and `setAccessibilityTraversalAfter` methods. These methods are available for any element that inherits from `View`.  **Example: **   &lt;pre&gt;&lt;code&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); channelplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); channelminusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.channelplus).getId());&lt;/code&gt;&lt;/pre&gt;  **Link: **        - [setAccessibilityTraversalAfter](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalAfter%28int%29) - [setAccessibilityTraversalBefore](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalBefore%28int%29)   "
});

documentTitles["dev-android.html#form"] = "Form";
index.add({
    url: "dev-android.html#form",
    title: "Form",    
    body: "## Form  **Description: **    It is very important to bind the form fields with their labels. There are 2 major techniques to achieve this:  - `LabelFor`: allow to specify a label to a view. This method takes the id of the view that it is associated. This method can be used any almost type of form field. We can also use xml `android:labelFor` or programmatically `setLabelFor`.  - `Hint`: add an example text when the text field is empty. This method only works for `TextView`. Supports setting the id to a string. Can be used in xml `android:hint` or programmatically 'setHint`.  **Examples: **  LabelFor in XML:  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView 	[...]   android:labelFor=\&quot;@+id/imageView11\&quot;   android:importantForAccessibility=\&quot;no\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt; 	Note: It is very common, once the label is bound to its field, to hide the label from the accessibility service. This is because this one does not need to be vocalized by the Accessibility API anymore as its already associated with the form field (and will be vocalized by TalkBack for example).&lt;/br&gt; &lt;/br&gt; Hint in xml: &lt;pre&gt;&lt;code&gt;&amp;lt;EditText   [...]    android:hint=\&quot;@string/criteria_form_ex1_placeholder\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Links: **  - [setLabelFor](https://developer.android.com/reference/android/view/View.html#setLabelFor%28int%29) - [setHint](https://developer.android.com/reference/android/widget/TextView.html#setHint%28java.lang.CharSequence%29)   "
});

documentTitles["dev-android.html#text-size"] = "Text size";
index.add({
    url: "dev-android.html#text-size",
    title: "Text size",    
    body: "## Text size  **Description: **    To enable the \&quot;Huge font size\&quot; option to properly interact with the application, several points are to be respected during the development: - Use dynamic font size: the \&quot;sp\&quot;. This unit, specific to Android, allows to have a font size proportional to the pixel density of the display. It is highly recommended to use it for text, if only for a uniform design on all types of Android device. - Manage content overflows: A common mistake is to use a dynamic text size (\&quot;sp\&quot;) but not to pay attention to the container size. If the text gets bigger, the container must adapt so there is no overflow. One can perfectly play with the `min-height` and `height` attributes for correct result (the `height`set to `wrap_content` and `min-height` set to the default desired height).  **Link: **  - [typography](https://www.google.com/design/spec/style/typography.html#typography-styles)      "
});

documentTitles["dev-android.html#accessibility-events-custom-views"] = "Accessibility events &amp; custom views";
index.add({
    url: "dev-android.html#accessibility-events-custom-views",
    title: "Accessibility events &amp; custom views",    
    body: "## Accessibility events &amp; custom views  **Description: **   On Android there are several events available for accessibility. You can manipulate them just like any event. They can enhance custom views that are not accessible enough. Using accessible events is not common on applications that are not intended to be used by disabled people, because other options are in most cases enough. Meanwhile, one must know they exist and they let you redefine the vocalization of a component.    For more information, please refer to the following links:  **Example: **  In this example, the accessibility events are intercepted. Depending on their type (text has been changed in the view or the component has the TalkBack focus), we construct a vocalization to TalkBack. &lt;pre&gt;&lt;code&gt;@Override @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {    boolean result = super.dispatchPopulateAccessibilityEvent(event);    // Detect what type of accessibility event is being passed in.   int eventType = event.getEventType();    // Common case: The user has interacted with our view in some way. State may or may not have been changed. Read out the current status of the view.   if (eventType == AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED) {     event.getText().clear();     event.getText().add(\&quot;Possible reward: \&quot; + getBankValue() + \&quot;.\&quot;);     result = true;   }    // When a user first focuses on our view, we'll also read out some simple instructions to make it clear that this is an interactive element.   if (eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {     event.getText().add(\&quot;Click here to play again.\&quot;);     result = true;   }    return result; }&lt;/code&gt;&lt;/pre&gt;  **Links: **  - [AccessibilityEvents](http://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html) - [Creating a custom view](http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views)     "
});

documentTitles["dev-android.html#webview"] = "WebView";
index.add({
    url: "dev-android.html#webview",
    title: "WebView",    
    body: "## WebView  **Description: **   `WebView`s behave particularly on Android. First, if you want a page to be accessible, its HTML content must be accessible as well, it must follow the international standards: the WCAG2. To know the requirements and learn techniques for developing an accessible web, please visit the following section of our site: [accessibility recommendations for web](../web/index.html).  Second, on Android you must ensure that the WebView allows JavaScript `mWebView.getSettings.setJavaScriptEnabled(true);` In these conditions, the page displayed through the `WebView` properly responds to the Accessibility API.    "
});

documentTitles["dev-android.html#list-vocalization"] = "List vocalization";
index.add({
    url: "dev-android.html#list-vocalization",
    title: "List vocalization",    
    body: "## List vocalization  **Description: **   Sometimes the lists are not vocalized correctly: the speech synthesis is trying to vocalize the whole list at once (only the items displayed on the screen). This is especially the case when using the `RecyclerView`. To overcome this problem, there is a simple fix. Just set the `focusable` attribute to `true` for each item in the list. This has the effect of forcing the speech synthesis (TalkBack) to read the items one by one.   "
});

documentTitles["dev-android.html#navigating-via-the-focus-keyboard"] = "Navigating via the focus (keyboard)";
index.add({
    url: "dev-android.html#navigating-via-the-focus-keyboard",
    title: "Navigating via the focus (keyboard)",    
    body: "## Navigating via the focus (keyboard)  **Description: **  To handle focus navigation, make sure to: - Allow interactive elements to receive the focus: focus navigation only concerns interactive elements. If, for example, your application has clickable custom views, it must be ensured that these views are focusable setting the `focusable` attribute to `true`. - Managing the focus display: interactive elements must have the `state_focused` defined and must be easily distinguishable when having the focus. - Managing the focus order: through the `nextFocusDown, nextFocusUp, nextFocusRight,nextFocusLeft` options, you can specify what view should take the focus when using the down, up, right and left arrow.  Most of the time, only the two first points must be taken care of. Android is able to determine very precisely the positions of the elements between them and therefore to provide a logical and coherent reading order for the keyboard.  Note: `nextFocusDown, nextFocusUp, nextFocusRight, nextFocusLeft, focusable` and other focus management options are available either in the xml or programmatically.  **Example: **  Tabhost selector handling the `state_focused` &lt;pre&gt;&lt;code&gt;&amp;lt;selector xmlns:android=\&quot;http://schemas.android.com/apk/res/android\&quot;&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_unselected_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_selected_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_unselected_focused_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/tab_selected_focused_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Pressed --&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_unselected_pressed_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_selected_pressed_tab_selector\&quot; /&amp;gt;  	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_unselected_pressed_tab_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/tab_selected_pressed_tab_selector\&quot; /&amp;gt; &amp;lt;/selector&amp;gt;&lt;/code&gt;&lt;/pre&gt;  **Link: **  - [Focus navigation](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav) &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["dev-ios.html#ios-developer-guide"] = "iOS developer guide";
index.add({
    url: "dev-ios.html#ios-developer-guide",
    title: "iOS developer guide",    
    body: "# iOS developer guide  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Developer guide\&quot;, \&quot;url\&quot;: \&quot;./dev-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;iOS developer guide\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;dev-android.html\&quot;},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;dev-mobile.html\&quot;, \&quot;expanded\&quot;: true}     ]);         });&lt;/script&gt;  &lt;span data-menuitem=\&quot;dev-mobile\&quot;&gt;&lt;/span&gt;  This guide aims to present the various iOS SDK accessibility options. Through different categories, this guide explains how to use the accessibility attributes / methods and provides links to the official documentation from Apple. Code snippets are also available to show you how to implement it (mostly in Swift).  "
});

documentTitles["dev-ios.html#text-alternatives"] = "Text alternatives";
index.add({
    url: "dev-ios.html#text-alternatives",
    title: "Text alternatives",    
    body: "## Text alternatives **Description: **    On iOS, the vocalization of an element is done through four attributes: `label`, `hint`, `value` and `trait`. The order of vocalization is always as follows: `label`, `value`, `trait` and `hint`. This order cannot be changed and the vocalization is performed only once.  A section of this guide is dedicated to the trait, we describe here the other three: - `AccessibilityLabel`: the `label` redefines the text read by VoiceOver. This allows a component to be more explicit than the text displayed on the screen. For example, for a button whose title is \&quot;OK\&quot;, this attribute can indicate that the button is used to confirm an action. - `AccessibilityValue`: the `value` of an element is by default the completion percentage (e.g. a progress bar percentage). Note that for most elements available in the SDK, this value does not need to be set (the system automatically sets the value). - `AccessibilityHint`: the` hint` describes the component behavior. Example: \&quot;click here to get the result\&quot;.  These accessibility attributes are available via the builder interface but also programatically. Anything inheriting from `UIView` has these attributes by default. These attributes accept an optional string, and are therefore easily localizable.   **Examples: **     Simple example (localized):   `accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_open_accessibilityHint\&quot;.localized`  Example of custom tabs indicating their trait and state:   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;@IBAction func buttonClicked(sender: AnyObject) { 	for button:UIButton in buttonList {  		if button == sender as! UIButton { 			button.selected = true 			if accessible { 				button.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected 			} 			button.setTitleColor(UIColor.orange_orangeForWhiteBG(), forState: UIControlState.Selected) 			button.tintColor = UIColor.clearColor() 		} 		else { 			button.selected = false 			if accessible { 				button.accessibilityTraits = UIAccessibilityTraitNone 				button.accessibilityTraits = UIAccessibilityTraitButton 			} 			button.setTitleColor(UIColor.orange_blackColor(), forState: UIControlState.Normal) 		} 	} }      func accessibleSegmentedControl() { 	onePageButton.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected 	twoPageButton.accessibilityTraits = UIAccessibilityTraitButton 	threePageButton.accessibilityTraits = UIAccessibilityTraitButton  	onePageButton.accessibilityHint = \&quot;1 \&quot; + \&quot;common_of\&quot;.localized + \&quot; \&quot; + String(buttonList.count) 	twoPageButton.accessibilityHint = \&quot;2 \&quot; + \&quot;common_of\&quot;.localized + \&quot; \&quot; + String(buttonList.count) 	threePageButton.accessibilityHint = \&quot;3 \&quot; + \&quot;common_of\&quot;.localized + \&quot; \&quot; + String(buttonList.count) }&lt;/code&gt;&lt;/pre&gt;  **Links: **  - [accessibilityLabel](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityLabel) - [accessibilityValue](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityValue) - [accessibilityHint](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityHint)   "
});

documentTitles["dev-ios.html#element-trait"] = "Element trait";
index.add({
    url: "dev-ios.html#element-trait",
    title: "Element trait",    
    body: "## Element trait  **Description:**    The `accessibilityTraits` attribute allows to specify the trait of an element to the accessibility API. Thus, it is possible to make a list item be considered as a button because it is clickable. Therefore, the `accessibilityTrait` attribute plays an important role on the element vocalization because the trait is vocalized by VoiceOver.     This accessibility attribute is available via the builder interface but also programmatically.  There are many available traits. The more commonly used are:   - `AccessibilityTraitNone`: removes any semantic value to the element. - `AccessibilityTraitButton`: adds the \&quot;button\&quot; trait, the element is seen as a button by VoiceOver. - `AccessibilityTraitLink`: useful to define a label as a \&quot;link\&quot;. - `AccessibilityTraitHeader`: defines an element as a header (for more information, see the \&quot;titles and headers\&quot; section). - `AccessibilityTraitAdjustable`: defines an element as an \&quot;adjustable\&quot; element, that is to say an element that users can adjust in a continuous manner, such as a slider or a picker view.  **Examples: **     Example with a `UIPageControl` and the 'adjustable' trait:   `pageControl.accessibilityTraits = UIAccessibilityTraitAdjustable`  Example with a `header` trait :   `defaultHeaderViewCell.accessibilityTraits = UIAccessibilityTraitHeader`  We can also combine traits:   `onePageButton.accessibilityTraits = UIAccessibilityTraitButton + UIAccessibilityTraitSelected`  **Link: **       - [accessibilityTraits](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/doc/constant_group/Accessibility_Traits)   "
});

documentTitles["dev-ios.html#hide-elements-from-accessibility"] = "Hide elements from accessibility";
index.add({
    url: "dev-ios.html#hide-elements-from-accessibility",
    title: "Hide elements from accessibility",    
    body: "## Hide elements from accessibility  **Description: **    It is possible via an accessibility attribute to hide elements from accessibility tools (e.g. VoiceOver). By extension, it is possible to force some elements to be visible to accessibility tools.    - `AccessibilityElement`: boolean to specify that an element is visible or not to the Accessibility API (VoiceOver or other). - `AccessibilityElementIsHidden`: boolean to indicate that the children elements of the target element are visible or not to the Accessibility API. - `AccessibilityViewIsModal`: boolean that can make visible or not the sibling elements of the target element to the Accessibility API. Very useful for making accessible custom popin for example.    The `accessibilityElement` attribute is available via the interface builder but can also be used directly through the code. The other two attributes are available only through the code.  **Examples: **  Simple example:    `pageControl.isAccessibilityElement = true`  Example of an accessible custom alert:   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;@IBAction func displayCustomAlert() { 	popUpVIew.hidden = false //The view has been created before, we only make it visible and accessible 	popUpVIew.accessibilityViewIsModal = true //Prevent VoiceOver seeing what is behind the popin 	popUpVIew.frame = CGRectMake(0, 0, UIScreen.mainScreen().bounds.width, UIScreen.mainScreen().bounds.height) //The modal filter of the alert covers the hole screen  	let window = UIApplication.sharedApplication().keyWindow 	window?.addSubview(popUpVIew)  	UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, popUpVIew) //We notify that a popin is shown in order to be focused by VoiceOver, if enabled }&lt;/code&gt;&lt;/pre&gt;  **Links: **       - [accessibilityElement](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/isAccessibilityElement) - [accessibilityElementIsHidden](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityElementsHidden) - [accessibilityViewIsModal](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityViewIsModal)   "
});

documentTitles["dev-ios.html#trigger-a-vocalization"] = "Trigger a vocalization";
index.add({
    url: "dev-ios.html#trigger-a-vocalization",
    title: "Trigger a vocalization",    
    body: "## Trigger a vocalization  **Description: **    It is very easy to trigger vocalizations with VoiceOver. Note that we are talking about VoiceOver vocalization and not TTS (Text To Speech) that can operate whether VoiceOver is on or off.   To trigger a vocalization, just call the `UIAccessibilityPostNotification` method passing the notification allowing to trigger a vocalization (`UIAccessibilityAnnouncementNotification`) and the string to vocalize as parameters.  Note: the vocalization is done in the system language.  **Example: **  `UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, speakString);`  **Links : **  - [UIAccessibilityPostNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/index.html#//apple_ref/c/func/UIAccessibilityPostNotification) - [UIAccessibilityAnnouncementNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityAnnouncementNotification)   "
});

documentTitles["dev-ios.html#check-accessibility-options-state"] = "Check accessibility options state";
index.add({
    url: "dev-ios.html#check-accessibility-options-state",
    title: "Check accessibility options state",    
    body: "## Check accessibility options state  **Description: **   On iOS, it is possible to check the accessibility options state. Is VoiceOver activated? Is the audio-mono mode activated? Several methods can help you to check with that. They are part of the `UIKit` framework.    The most useful method is `UIAccessibilityIsVoiceOverRunning` which allows to know wether VoiceOver is activated.  **Exemple: **   `UIAccessibilityIsVoiceOverRunning() ? 1 : 0`  **Links: **  - [UIAccessibilityIsVoiceOverRunning](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsVoiceOverRunning) - [UIAccessibilityIsClosedCaptioningEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsClosedCaptioningEnabled) - [UIAccessibilityIsMonoAudioEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsMonoAudioEnabled) - [UIAccessibilityIsBoldTextEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsBoldTextEnabled) - [UIAccessibilityDarkerSystemColorsEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityDarkerSystemColorsEnabled) - [UIAccessibilityIsGrayscaleEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsGrayscaleEnabled) - [UIAccessibilityIsGuidedAccessEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsGuidedAccessEnabled) - [UIAccessibilityIsInvertColorsEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsInvertColorsEnabled) - [UIAccessibilityIsReduceMotionEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsReduceMotionEnabled) - [UIAccessibilityIsReduceTransparencyEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsReduceTransparencyEnabled) - [UIAccessibilityIsSpeakScreenEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsSpeakScreenEnabled) - [UIAccessibilityIsSpeakSelectionEnabled](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsSpeakSelectionEnabled) - [UIAccessibilityIsSwitchControlRunning](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIAccessibilityIsSwitchControlRunning)  "
});

documentTitles["dev-ios.html#notify-a-content-change"] = "Notify a content change";
index.add({
    url: "dev-ios.html#notify-a-content-change",
    title: "Notify a content change",    
    body: "## Notify a content change  **Description: **  When there is a content change in the current page, it is possible to notify the accessibility API using several types of notifications. To do that, we must send the change notification to the accessibility API using the following method: `UIAccessibilityPostNotification`.    There are several types of change notification but the two most commonly used are: - `UIAccessibilityLayoutChangedNotification`: notifies that a part of the page has changed. - `UIAccessibilityScreenChangedNotification` : notifies that the whole page has changed.    There is a small difference between them. We can pass a `NSString` or a `UIObject` to the `UIAccessibilityLayoutChangedNotification` method. With a `NSString` it behaves like a `UIAccessibilityAnnouncementNotification` and triggers a VoiceOver vocalization. With a `UIObject` the focus is set on the `UIObject`.    `UIAccessibilityScreenChangedNotification`'s parameter can be either `nil` or the elements to set the focus on.  **Examples: **   &lt;pre&gt;&lt;code class=\&quot;objectivec\&quot;&gt;UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, @\&quot;speakString\&quot;); UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, aViewObject);  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, nil); UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, aViewObject);&lt;/code&gt;&lt;/pre&gt;  **Links: **  - [UIAccessibilityPostNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/index.html#//apple_ref/c/func/UIAccessibilityPostNotification) - [UIAccessibilityLayoutChangedNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/c/data/UIAccessibilityLayoutChangedNotification) - [UIAccessibilityScreenChangedNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/c/data/UIAccessibilityScreenChangedNotification) - [UIAccessibilityPageScrolledNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/c/data/UIAccessibilityPageScrolledNotification)   "
});

documentTitles["dev-ios.html#change-the-vocalization-language"] = "Change the vocalization language";
index.add({
    url: "dev-ios.html#change-the-vocalization-language",
    title: "Change the vocalization language",    
    body: "## Change the vocalization language  **Description: **    To change the vocalization language of VoiceOver for a word or a sentence, one can use the `accessibilityLanguage` attribute. Available using the `UIAccessibility`, this attributes allows to specify a language for a specific text. E.g. if we use this attribute on a `UILabel`, it will be vocalized by VoiceOver in the language set on this attribute.  **Exemple: **   `cell.textLabel?.accessibilityLanguage = \&quot;fr_FR\&quot;`  **Link: **        - [accessibilityLanguage](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityLanguage)   "
});

documentTitles["dev-ios.html#modify-the-focus-area-of-voiceover"] = "Modify the focus area of VoiceOver";
index.add({
    url: "dev-ios.html#modify-the-focus-area-of-voiceover",
    title: "Modify the focus area of VoiceOver",    
    body: "## Modify the focus area of VoiceOver  **Description: **    In the case of dynamically modified element or component not inheriting from `UIView`, it is possible to modify the focus area of accessibility of this element, i.e. the area VoiceOver highlights when focusing an element.  - `AccessibilityFrame`: sets the area via a rectangle (`CGRect`). Generally, for an element inheriting from `UIView`, this area is the \&quot;visible\&quot; part of the view. - `AccessibilityPath`: equivalent to `AccessibilityFrame` but sets the area via Bezier curves. - `AccessibilityActivationPoint`: the activation \&quot;point\&quot; of an element for accessibility tools. By default, this point is at the center of the element.  **Links: **  - [AccessibilityFrame](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityFrame) - [AccessibilityPath](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityPath) - [AccessibilityActivationPoint](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/accessibilityActivationPoint)   "
});

documentTitles["dev-ios.html#grouping-elements"] = "Grouping elements";
index.add({
    url: "dev-ios.html#grouping-elements",
    title: "Grouping elements",    
    body: "## Grouping elements  **Description: **    The `shouldGroupAccessibilityChildren` attribute is a Boolean that indicates if VoiceOver must group its view children. This allows making unique vocalizations or define a particular VoiceOver reading order for a part of the page (see \&quot;Reading order\&quot; section).  **Example: **   Very useful when we want the customize the VoiceOver reading order, like here on a table cell containing form data:   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;class AddressTableViewCell: UITableViewCell {  	@IBOutlet weak var deliveringAddressLabel:  UILabel! 	@IBOutlet weak var addressLabel:            UILabel! 	@IBOutlet weak var switchLabel:             UILabel! 	@IBOutlet weak var addressSwitch:           UISwitch!  	override func awakeFromNib() { 		super.awakeFromNib()  		isAccessibilityElement = false 		shouldGroupAccessibilityChildren = true 		accessibilityElements = [deliveringAddressLabel, addressLabel, addressSwitch] 	} }&lt;/code&gt;&lt;/pre&gt;  **Link: **        - [shouldGroupAccessibilityChildren](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/occ/instp/NSObject/shouldGroupAccessibilityChildren)  "
});

documentTitles["dev-ios.html#accessibility-events"] = "Accessibility events";
index.add({
    url: "dev-ios.html#accessibility-events",
    title: "Accessibility events",    
    body: "## Accessibility events  **Description: **    iOS sends several accessibility events to the applications. They are sent when accessibility options are changed. For example, if VoiceOver is deactivated, the running applications will receive the `UIAccessibilityVoiceOverStatusChanged` event. This is very useful when used simultaneously with `UIAccessibilityIsVoiceOverRunning`.  Let's say the application behaves differently when VoiceOver is turned on. This is detected by the `UIAccessibilityIsVoiceOverRunning` method. What happens if VoiceOver is disabled? This is when the system events can be used. By listening to these events, it is possible to dynamically change how the application behaves.  **Example: **   We call the \&quot;voiceOverStatusDidChange\&quot; method when the VoiceOver state changes:   `NSNotificationCenter.defaultCenter().addObserver(self, selector: \&quot;voiceOverStatusDidChange:\&quot;, name: UIAccessibilityVoiceOverStatusChanged, object: nil)`  **Link: **        - [UIAccessibilityVoiceOverStatusChanged](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityVoiceOverStatusChanged) - [UIAccessibilityClosedCaptioningStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityClosedCaptioningStatusDidChangeNotification) - [UIAccessibilityMonoAudioStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityMonoAudioStatusDidChangeNotification) - [UIAccessibilityAnnouncementDidFinishNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityAnnouncementDidFinishNotification) - [UIAccessibilityGuideAccessStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityAnnouncementDidFinishNotification) - [UIAccessibilityInvertColorsStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityInvertColorsStatusDidChangeNotification) - [UIAccessibilityDarkerSystemColorsStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityDarkerSystemColorsStatusDidChangeNotification) - [UIAccessibilityGrayscaleStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityGrayscaleStatusDidChangeNotification) - [UIAccessibilityBoldTextStatusDidChangeNotification](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/#//apple_ref/c/data/UIAccessibilityBoldTextStatusDidChangeNotification)  "
});

documentTitles["dev-ios.html#text-size"] = "Text size";
index.add({
    url: "dev-ios.html#text-size",
    title: "Text size",    
    body: "## Text size  **Description: **    Dynamic font size on iOS is very tricky. Since iOS7, it is possible to use an API to make the text size dynamic according to the phone settings. If we summarize this API, you must:   - Use the system fonts for the application, `[UIFont preferredFontForTextStyle:UIFontTextStyle…]`. You can also use custom fonts only if they inherit from `UIFont`.  - Listen the font size settings change events `UIContentSizeCategoryDidChangeNotification`, `[[NSNotificationCenter defaultCenter] addObserver:… selector:@selector(…) name: UIContentSizeCategoryDidChangeNotification object:…];`  - When handling the font size change event, you must redisplay the affected elements.&lt;/li&gt;    We must also be careful that the containers fit their content: using constraints is the best way to perform this task.  **Link: **  - [Dynamic Type API](https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html#//apple_ref/doc/uid/TP40009542-CH4-SW65)   "
});

documentTitles["dev-ios.html#reading-order"] = "Reading order";
index.add({
    url: "dev-ios.html#reading-order",
    title: "Reading order",    
    body: "## Reading order  **Description: **   Redefining the VoiceOver reading order is done using the `UIAccessibilityContainer` protocol. The idea is to have a table of elements that defines the reading order of the elements. It is often very useful to use the `shouldGroupAccessibilityElement` attribute so we have a precise order but for a part if the view only (the rest of the view will be read using the 'logical' order)  **Example: **   Table cell containing form elements:   &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;class AddressTableViewCell: UITableViewCell {  	@IBOutlet weak var deliveringAddressLabel:  UILabel! 	@IBOutlet weak var addressLabel:            UILabel! 	@IBOutlet weak var switchLabel:             UILabel! 	@IBOutlet weak var addressSwitch:           UISwitch!  	override func awakeFromNib() { 		super.awakeFromNib()  		isAccessibilityElement = false 		shouldGroupAccessibilityChildren = true 		accessibilityElements = [deliveringAddressLabel, addressLabel, addressSwitch] 	} }&lt;/code&gt;&lt;/pre&gt;  **Link: **  - [UIAccessibilityContainer](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibilityContainer_Protocol/) &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-mobile.html#mobile-criteria"] = "Mobile criteria";
index.add({
    url: "criteria-mobile.html#mobile-criteria",
    title: "Mobile criteria",    
    body: "# Mobile criteria  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Mobile criteria\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;criteria-android.html\&quot;},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;criteria-ios.html\&quot;}     ]);     });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-mobile\&quot;&gt;&lt;/span&gt;  This base criteria for the Android and iOS Orange mobile applications  avoids the major accessibility errors. Its implementation does not give you the guarantee to be 100% accessible, but is a clean bedrock so you can engage in a progressive accessibility implementation process.  Following the Orange guidelines (Design for digital platforms Guideline), available on the [Orange brand site](http://brand.orange.com/) is a prerequisite to the use of this base criteria. Some elements already present in the Orange Brand (such as the use of colors) have not been included in this list of criteria.  Two versions are available: - ** Android version ** focused on the development of applications for the Google platform, Android. - ** iOS version ** focused on the development of applications for the Apple platform, iOS.  &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;Android criteria&lt;/h2&gt;               &lt;a href=\&quot;./criteria-android.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/android.png)         &lt;div&gt;Android accessibility guide&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt; &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;iOS criteria&lt;/h2&gt;               &lt;a href=\&quot;./criteria-ios.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/iphone.png)         &lt;div&gt;iOS accessibility guide&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt;              &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android.html#android-accessibility-guide"] = "Android accessibility guide";
index.add({
    url: "criteria-android.html#android-accessibility-guide",
    title: "Android accessibility guide",    
    body: "# Android accessibility guide  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Mobile criteria\&quot;, \&quot;url\&quot;: \&quot;./criteria-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;Android accessibility guide\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;criteria-mobile.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;criteria-ios.html\&quot;}     ]);        	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-mobile\&quot;&gt;&lt;/span&gt;  This guide aims to present the different accessibility criteria for getting an accessible Android application. Each criterion explains for whom it is important, when it can be implemented, why it is important and the corresponding accessibility rule. The criteria are explained through code snippets and real cases examples. We invite you to install the [mDAN](./mdan.html) application for working examples of TalkBack, the screen reader for Android, and other assistive tools. For more information on the tool (how to activate it, how to use it…) please refer to the [TalkBack section](./talkback.html).  "
});

documentTitles["criteria-android.html#images"] = "Images";
index.add({
    url: "criteria-android.html#images",
    title: "Images",    
    body: "## Images **Target : ** everyone and especially people with visual impairments.   **When: ** from design and during development.  **Description: **  The images are often used to convey a lot of information. As the saying goes, a picture is worth a thousand words. The blind cannot see the images, it is important that they have an alternative that gives all the information carried by the image. In the case of an image containing text, this text will be the alternative. In the case of an image that provides information as a graph, drawing or other, the alternative will contain all necessary information in the image.    Some images are used for decorative purposes. These pictures do not require alternative. By default, on Android the pictures are not vocalized by the TalkBack screen reader. The illustrations in the application are also considered decorative images. The rule is the same: there is no alternative text to add. Icons are, conversely, widely used as a button for various features. So they need relevant text alternatives.    The alternative of an image is set via the `contentDescription` attribute (available to any children of `View`).  **Checklist: **  - The images with information must convey this information through their text alternative - Decorative images have no alternative text  **Users' goal: **  Access the information included in images for users who cannot access it. Blocking point: an image without textual description is unusable by people with visual impairments or those that cannot display images (mobile, low bandwidth...).  ** Examples: **  &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;complete example of decorative picture and informative icon\&quot; width=\&quot;400\&quot;&gt;      By decomposing the image:   - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;example of decorative picture\&quot; width=\&quot;256\&quot;&gt; no `contentDescription`   - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;example of informative icon - parameters\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;parameters\&quot;)`   - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;example of informative icon - edition\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;edit the image name\&quot;)`    "
});

documentTitles["criteria-android.html#colors"] = "Colors";
index.add({
    url: "criteria-android.html#colors",
    title: "Colors",    
    body: "## Colors  **Target: ** everyone, especially people with visual impairments, elderly people and people with vision problems (color blindness, vision contrasts etc.)   ** When: ** from the design phase and during development.  **Description: **  Colors have a very important role in the transmission of information. Some colors are associated with concepts or feelings but we must never forget the part of the population that does not correctly distinguish colors.  **Checklist: **  - Do not use color as the only way of conveying information, indicating an action, requesting a response or distinguishing an element. - The contrast between the color of the background and the text must be at least 7:1 and 4.5:1 for large font (can be measured with the color contrast analyzer tool).  **Users' goal: **   Ease of reading for all users especially the visually impaired, or people in a very bright environment (outdoors). Allow users not distinguishing colors or sensory information (color blind, visually impaired, hearing impaired, mobile users in bright environment or in noisy environments...), access the same information by other means.  ** Tools: ** The [color contrast analyzer](http://www.paciellogroup.com/resources/contrastanalyser/) application can quickly measure color contrast levels (free for Windows and Mac).    The [AccessibilityScanner application](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) allows you to test quickly and simply the accessibility of your apps on some criteria including the color contrast. Available for Android 6+.   ** Example of invalid contrast **   The label \&quot;film | 8:40 PM ...\&quot; does not have enough contrast. It will not be readable by all users.    ![screenshot showing text with poor contrast](images/contraste.png)  ** Example of information passing through the valid and invalid color: **   &lt;img src=\&quot;./images/couleur.png\&quot; alt=\&quot;example of information passing through the valid and invalid color\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-android.html#alternative-text"] = "Alternative text";
index.add({
    url: "criteria-android.html#alternative-text",
    title: "Alternative text",    
    body: "## Alternative text  **Target: ** everyone and especially people with visual impairments.   ** When: ** from design, content writing and during development.  **Description: **  Text alternatives are at the core of mobile accessibility. Thanks to them, a visually impaired user can use an application without loss of information.    As for the images, it is important to add a text alternative when information is not available for the visually impaired/blind. This is the case of components that provide information by color, shape, position, sound... On mobile, all components can have a text alternative, it is possible to enrich the native vocalization of an element, including a simple text.    Space on mobile is reduced, we often use abbreviations for text. But However, this raise an issue for voice synthesis users that vocalize abbreviations as is. To correct these vocalizations, simply place a text alternative on the text. This alternative contains the unshorten text. Note that TalkBack can recognize some common abbreviations. For example, \&quot;etc.\&quot; and \&quot;Dr.\&quot; are vocalized \&quot;etcetera\&quot; and \&quot;doctor\&quot;.    Some images are regularly associated with text to give information. This is the case of \&quot;unread messages\&quot; when a badge shows the number of messages to read and which describes a \&quot;message\&quot;. In this case, the solution is to set a text alternative on the text that gives all the necessary information. For example: \&quot;3 unread messages\&quot;. One can also set this alternative on the images but in this case we must make the text \&quot;invisible\&quot; to the screen reader.  The text alternative of an element is set via the `contentDescription` attribute (available to any children of `View`). For the buttons in the `ActionBar` (or `ToolBar`) the `title` attribute must be set.  **Checklist: **  - The elements that require alternative should have one - The alternative text must be clear and understandable  **Users' goal: **  Provide access to application information to screen reader users.  ** Example: **  Below is a common example of an icon that is associated with a text (badge) to add information. In our case, the icon \&quot;mail\&quot; associated with the \&quot;3\&quot; in the badge makes us understand that we have \&quot;3 unread mails\&quot;. If no text alternative is added, two vocalizations will be read \&quot;unlabeled button\&quot; and \&quot;3\&quot;. It is obvious that we must add text alternatives. &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;icon example coupled with the text that requires a text alternative\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code&gt;containerView.setContentDescription(\&quot;3 unread mails button\&quot;); //We add a complete alternative (previously dynamically built) on the container containerView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES); //The container is a View, not visible by the default accessibility API. We make it visibile. mailImageView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //We hide the button icon to avoid information redundancy badgeTextView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //The text is hidden to avoid information redundancy&lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-android.html#title-and-header"] = "Title and header";
index.add({
    url: "criteria-android.html#title-and-header",
    title: "Title and header",    
    body: "## Title and header  ** Target: ** everyone   ** When: ** from design and during content writing.  **Description: **   The page title is the first element vocalized or seen on a screen mobile. It makes the navigation easier for everyone: at any time, we know where we are in the application.   A common mistake is to set a unique title for every page of an application (or even no title at all).  **Checklist: **   - Each screen must have its own title allowing use know where we are in the application navigation (with the back button)  **Users' goal: **  Allow users to identify the topic of a page, to locate and get a clear idea of ​​the content of the page without having to read it.  ** Invalid example: **  &lt;img src=\&quot;./images/header.png\&quot; alt=\&quot;example of irrelevant title (no title)\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-android.html#element-states"] = "Element states";
index.add({
    url: "criteria-android.html#element-states",
    title: "Element states",    
    body: "## Element states  **Target: ** everyone and especially people with visual impairments.   ** When: ** during development.  **Description: **  If an element does not vocalize its status, nature or state, the TalkBack user is unable to understand what is happening on the screen. Not specifying that a view is unfolded or that we have tabs are very common examples.    Common mistake: the tabs. By default, tabs in Android do not give information on their nature and their state. It is therefore the responsibility of the developer to provide this information to the user via the corresponding accessibility attributes (`contentDescription`). In this case, a good alternative for the title of a tab can be \&quot;tab, tab title - 1 of 3 - selected\&quot;    Another common mistake is when elements do not vocalize their state: the expandable views. Again, thanks to the text alternative title of the view, we can vocalize the state of the view to the TalkBack users.    To set this kind of information, use the `contentDescription` attribute (availble to any children of `View`).  **Checklist: **  - Any item whose status changes when using the application must vocalize its status through its text alternative. For example, an item that can be selected/unselected must vocalize its state through a text alternative.  **Users' goal: **  Allow screen reader users to access component information, their status, their nature so they can use them without any difficulties.  ** Example: **  &lt;img src=\&quot;./images/tabs.png\&quot; alt=\&quot;example of tabs that do not restore their status and nature of default\&quot; width=\&quot;400\&quot;&gt;   To check a code snippet that corrects this issue, please refer to the corresponding page of the [Developer Guide](./dev-android.html#alternatives-textuelles).     "
});

documentTitles["criteria-android.html#standard-components"] = "Standard components";
index.add({
    url: "criteria-android.html#standard-components",
    title: "Standard components",    
    body: "## Standard components  **Target: ** everyone.   ** When: ** when choosing the libraries and during development.  **Description: **  Accessibility is (mostly) handled in the native components. Additionally, the use of standard components allows the user to be in a situation or behavior that he is already used to. Navigation through a standard interface is more comfortable.    Use native components as much as possible by changing their appearance. If no standard component corresponds to the need, create a dedicated component based on a standard component while keeping the consistency / accessibility consistency.    A common example is the use of a custom component for the side navigation menu (`NavigationDrawer`). Some of the available libraries are not accessible with a screen reader. Unfortunately, this makes the application inaccessible.  **Users' goal: **  Improve user navigation.  ** Technical Objective: **  Improve overall maintainability. Reduce development time.     "
});

documentTitles["criteria-android.html#touch-target"] = "Touch target";
index.add({
    url: "criteria-android.html#touch-target",
    title: "Touch target",    
    body: "## Touch target  **Target: ** for everyone and especially people with motor impairments   ** When: ** from the design and during development.  **Description: **    If a touch target of a component is too small, it can prevent some users to enjoy the application. This can lead to frustration that can result uninstalling it. Each clickable element must have a touch target large enough.  **Checklist: **  - 48 dp is the recommended touch target size for on screen elements according to Google (height and width, with 8 dp margin around the element).  **Users' goal: **  Improve user experience.  **Tools:**   The [AccessibilityScanner application](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) allows you to test quickly and simply the accessibility of your apps on some criteria including the touch target size. Available for Android 6+.   ** Do: **  In the examples below, the black box corresponds to the size of the interactive area.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;interactive component example with a fairly large touch target\&quot; width=\&quot;300\&quot;&gt;  ** Don't: **  &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;interactive component example with a small touch target\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android.html#ghost-element"] = "Ghost element";
index.add({
    url: "criteria-android.html#ghost-element",
    title: "Ghost element",    
    body: "## Ghost element  **Target: ** people with visual impairments.   ** When: ** during development.  **Description: **    Although invisible to the screen, some elements can be vocalized by the screen reader (elements positioned outside the visible area or hidden by other elements). The superposition of screens is something current when designing mobile apps but it generates very heavy accessibility problems if it is not done properly from the start. A screen reader such as TalkBack is able to read information from a view that is placed \&quot;under\&quot; another. But if the user is able to interact with this view, it disturbs totally navigation and it quickly becomes impossible.    Common problem: the fragments. A fragment is a component that can be easily stacked one over another. Improper use of fragments may lead to serious problems when navigating with a screen reader.    Read the article on the [use of fragments](https://developer.android.com/guide/components/fragments.html) for more information.  **Checklist: **  - With the screen reader, there is no invisible reachable element or that should not take focus when reading a page.  **Users' goal: **  Allow screen reader users to navigate within the application without having hidden elements disturbing the reading of the current view.  ** Don't: **  In the example below, the green frame represents the TalkBack focus. The latter vocalizes (vocalization is displayed at the bottom of the screen) the content behind the current view. &lt;img src=\&quot;./images/ghost.png\&quot; alt=\&quot;ghost element example\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android.html#text-size"] = "Text size";
index.add({
    url: "criteria-android.html#text-size",
    title: "Text size",    
    body: "## Text size  **Target: ** everyone and especially people with visual impairments.   ** When: ** from design and during development.  **Description: **  The user has the possibility of increasing the text size via an accessibility option. In order to make the application behave correctly to this option, it is necessary to use dynamic text sizes that adjust based on user settings. Too small text will be easily ignored by some visually impaired users.    The application must implement dynamic text sizes, ensure good responsiveness of the display areas to text enlargement (containers that fit the size of their content). You should also ensure a minimum size for text (14sp).    To enable the \&quot;Huge font size\&quot; option to properly interact with the application, several points are to be respected during the development: - Use dynamic font size: the \&quot;sp\&quot;. This unit, specific to Android, allows to have a font size proportional to the pixel density of the display. It is highly recommended to use it for text, if only for a uniform design on all types of Android device. - Manage content overflows: A common mistake is to use a dynamic text size (\&quot;sp\&quot;) but not to pay attention to the container size. If the text gets bigger, the container must adapt so there is no overflow. One can perfectly play with the `min-height` and `height` attributes for correct result (the `height`set to `wrap_content` and `min-height` set to the default desired height).  **Checklist: **  - The application correctly responds to the Huge font size option - Minimum text size must be 14sp  **Tools:**   The [AccessibilityScanner application](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) allows you to test quickly and simply the accessibility of your apps on some criteria including the text size. Available for Android 6+.   **Users' goal: **  Allow users (visually impaired, mobility, elderly people...) to increase the text size for easier access to information.  ** Example: **  &lt;img src=\&quot;./images/text.png\&quot; alt=\&quot;example using dynamic font size\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android.html#content-control"] = "Content Control";
index.add({
    url: "criteria-android.html#content-control",
    title: "Content Control",    
    body: "## Content Control  **Target: ** everyone and especially people with visual and cognitive deficiency.   ** When: ** when design and during development.  **Description: **  On mobile, screen readers try to notify the user when there is a context change. In some cases, it can give constant vocalizations, and therefore inaudible, or prevent any user action. The user must control the content at any time. This is especially true with interactive content. So avoid video player launching directly in full screen mode, or videos starting automatically without user action, or a carousel scrolling automatically etc.  **Checklist: **  - All interactive content must be controlled by the user (pausing a carousel, adding an accessible button to exit full-screen mode etc).  **Users' goal: **  Allow users to keep control on the application. Allow the screen reader user to avoid noise polution which may affect navigation.  ** Technical Objective: **  Improve the natural referencing.   "
});

documentTitles["criteria-android.html#changing-content"] = "Changing content";
index.add({
    url: "criteria-android.html#changing-content",
    title: "Changing content",    
    body: "## Changing content  **Target: ** everyone and especially people with visual impairments.   ** When: ** during development.  **Description: **  When content is dynamically modified after a user action, the screen reader must notify it. Without any voice feedback, the user does not know that the content has changed.   If the content has changed dynamically after a user action, it is important that the screen reader is notified so that it triggers a vocalization. E.g. refreshing a list or a timer.  A simple vocalization can be enough to warn the user. It is very easy to trigger vocalizations with TalkBack. Warning: we are talking about the vocalization when TalkBack is enabled and not TTS (Text To Speech), the latter can operate whether Talkback is on or not. Just call the `announceForAccessibility` method with the parameter id of the string to vocalize. Note: the `announceForAccessibility` method is available on any item that inherits from` View` and is vocalized in the default system language.  It is also possible to specify that a view is a live region, that is to say that its content is subject to change dynamically and should in this case notify the Accessibility API. This will result in generating vocalizations with TalkBack for example. A typical use case: on a form, if the user makes a mistake and an error message appears, the view containing the message must be defined as a live region. You must use the `setAccessibilityLiveRegion` method that takes a mode parameter for the live region. There are 3 modes: - `ACCESSIBILITY_LIVE_REGION_NONE`: this view is not a live region. This is the default for most views. - `ACCESSIBILITY_LIVE_REGION_POLITE`: when a change occurs, vocalizations are triggered on the changes. These vocalizations are \&quot;polite\&quot;; they have lower priority than system vocalizations for example. - `ACCESSIBILITY_LIVE_REGION_ASSERTIVE`: when a change occurs, vocalizations are triggered on the changes. These vocalizations are \&quot;assertive\&quot;; they have the highest priority and are immediately vocalized. Note the `setAccessibilityLiveRegion` method is available on any class that inherits from `View`.  **Checklist: **  - With a screen reader, ensure that dynamic changes are vocalized.  **Users' goal: **  Provide access to changing content to screen reader users.   "
});

documentTitles["criteria-android.html#horizontal-scroll"] = "Horizontal scroll";
index.add({
    url: "criteria-android.html#horizontal-scroll",
    title: "Horizontal scroll",    
    body: "## Horizontal scroll  **Target: ** everyone and especially people with visual impairments.   ** When: ** from design and during development.  **Description: **  A horizontal scroll can be very difficult to detect if no visual feedback is displayed to help the user understand that there are several pages. Do not hesitate to display a view to indicate a horizontal scroll (dots for example). When necessary, also add \&quot;next\&quot; and \&quot;previous\&quot; buttons.  **Checklist: **  - The horizontal scrolls are visually indicated - It should be possible to switch pages for screen reader users.  **Users' goal: **  Provide a visual indication to users when there is horizontal scroll. Allow screen reader users to scroll horizontally.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; ** Do: **  &lt;img src=\&quot;./images/scroll_h1.png\&quot; alt=\&quot;Example with accessible horizontal scroll\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; ** Don't: **  &lt;img src=\&quot;./images/scroll_h2.png\&quot; alt=\&quot;example of invalid horizontal scroll\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-android.html#form"] = "Form";
index.add({
    url: "criteria-android.html#form",
    title: "Form",    
    body: "## Form  **Target: ** everyone and especially people with visual impairments.   ** When: ** from design and during development.  **Description: **  Binding the form fields with their labels provides an additional vocalization allowing the user to understand what happens when filling out a form field.    There are 2 major techniques to achieve this link:  - `LabelFor`: allow to specify a label to a view. This method takes the id of the view that it is associated. This method can be used any almost type of form field. We can also use xml `android:labelFor` or programmatically `setLabelFor`.  - `Hint`: add an example text when the text field is empty. This method only works for `TextView`. Supports setting the id to a string. Can be used in xml `android:hint` or programmatically `setHint`.  **Checklist: **  - Form fields must be linked to a label if it is visible, otherwise a `hint` is displayed.  **Users' goal: **  Improve navigation by improving the overall understanding of the page, the form fields describing the expected input.   "
});

documentTitles["criteria-android.html#reading-order"] = "Reading order";
index.add({
    url: "criteria-android.html#reading-order",
    title: "Reading order",    
    body: "## Reading order  **Target: ** people with visual impairments.   ** When: ** during development.  **Description: **  The reading order allows the screen reader user to locate the navigation and ensuring functional coherence. It is therefore important to pay attention to it.    By default, the reading order of voice synthesis depends on: the 'logical' reading (in France), from left to right and top to bottom, and xml reading (order of elements declaration). However, there are some cases where the screen reader cannot determine the correct order, and uses the order of xml elements definition leading to inconsistent vocalizations.    It is quite possible to redefine the reading order with two attributes: - `AccessibilityTraversalAfter`: sets the id of a view after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other view before the content of this one. - `AccessibilityTraversalBefore`: sets the id of a view before which this one is visited in accessibility traversal. A screen-reader must visit the content of this view before the content of the one it precedes.  Note: These attributes can be used directly in the xml but also in the code via the `setAccessibilityTraversalBefore` and `setAccessibilityTraversalAfter` methods. These methods are available for any element that inherits from `View`.  **Checklist: **  - Traversal order (TalkBack) is logical and coherent.  **Users' goal: **  Ensure logic order and coherent reading to screen reader users.  ** Example: ** In this example, the default playback order depends completely on the implementation  and on the order of element declaration. In this case: `vol+, vol-, 1, 2, 3, 4, 5, 6, 7, 8, 9, p+, p-, 0`. A more consistent reading order is `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol +, vol-, p + p-`.  &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;Example of reading order\&quot; width=\&quot;300\&quot;&gt; &lt;pre&gt;&lt;code&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); channelupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); channeldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.channelup).getId()); [...]&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-android.html#focus-navigation"] = "Focus navigation";
index.add({
    url: "criteria-android.html#focus-navigation",
    title: "Focus navigation",    
    body: "## Focus navigation  **Target: ** everyone and especially people with motor impairments or people using keyboard.   ** When: ** from design and during development.  **Description: **  Focus navigation is very useful for people with motor or cognitive difficulties. This navigation allows to go through the interactive elements (element on which an action can be performed). This is the kind of navigation that you can have with a Bluetooth keyboard paired to a smartphone.  To handle focus navigation, make sure to: - Allow interactive elements to receive the focus: focus navigation only concerns interactive elements. If, for example, your application has clickable custom views, it must be ensured that these views are focusables setting the `focusable` attribute to `true`. - Managing the focus order: through the `nextFocusDown, nextFocusUp, nextFocusRight,nextFocusLeft` options, you can specify what view should take the focus when using the down, up, right and left arrow. - Managing the focus display: interactive elements must have the `state_focused` defined and must be easily distinguishable when having the focus.  Note: `nextFocusDown, nextFocusUp, nextFocusRight, nextFocusLeft, focusable` and other focus management options are available either in the xml or programmatically.    For more information on the [focus management on Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav).   **Checklist: **  - The order of navigation focus (keyboard) is logical and coherent. - It should be visually easy to determine the element that has focus  **Users' goal: **  Allow keyboard/dock tablet/sequential navigation device users to access the application.    &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios.html#ios-accessibility-guide"] = "iOS accessibility guide";
index.add({
    url: "criteria-ios.html#ios-accessibility-guide",
    title: "iOS accessibility guide",    
    body: "# iOS accessibility guide  &lt;script&gt;$(document).ready(function () {          setBreadcrumb([{\&quot;label\&quot;:\&quot;Mobile criteria\&quot;, \&quot;url\&quot;: \&quot;./criteria-mobile.html\&quot;},         {\&quot;label\&quot;:\&quot;iOS accessibility guide\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;criteria-android.html\&quot;},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;criteria-mobile.html\&quot;, \&quot;expanded\&quot;: true}     ]);      });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-mobile\&quot;&gt;&lt;/span&gt;  This guide aims to present the different accessibility criteria for getting an accessible iOS application. Each criterion explains for whom it is important, when it can be implemented, why it is important and the corresponding accessibility rule. The criteria are explained through code snippets and real cases examples. We invite you to install the [mDAN](./mdan.html) application for working examples of VoiceOver, the screen reader for iOS, and other assistive tools. For more information on the tool (how to activate it, how to use it…) please refer to the [VoiceOver section](./voiceover.html).  Note: the code snippets are written in Swift.  "
});

documentTitles["criteria-ios.html#images"] = "Images";
index.add({
    url: "criteria-ios.html#images",
    title: "Images",    
    body: "## Images **Target : ** everyone and especially people with visual impairments.   **When: ** from design and during development.  **Description: **  The images are often used to convey a lot of information. As the saying goes, a picture is worth a thousand words. The blind cannot see the images, it is important that they have an alternative that gives all the information carried by the image. In the case of an image containing text, this text will be the alternative. In the case of an image that provides information as a graph, drawing or other, the alternative will contain all necessary information in the image.    Some images are used for decorative purposes. These pictures do not require alternative. By default, on iOS the pictures are not vocalized by the VoiceOver screen reader. The illustrations in the application are also considered decorative images. The rule is the same: there is no alternative text to add. Icons are, conversely, widely used as a button for various features. So they need relevant text alternatives.    The alternative of an image is set via the `accessibilityLabel` attribute (using the `UIAccessibility` protocole available on any children of `UIView`).  **Checklist: **  - The images with information must convey this information through their text alternative - Decorative images have no alternative text  **Users' goal: **  Access the information included in images for users who cannot access it. Blocking point: an image without textual description is unusable by people with visual impairments or those that cannot display images (mobile, low bandwidth...).  ** Examples: **  &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;complete example of decorative picture and informative icon\&quot; width=\&quot;400\&quot;&gt;      By decomposing the image:   - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;example of decorative picture\&quot; width=\&quot;256\&quot;&gt; no `accessibilityLabel`   - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;example of informative icon - parameters\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_edit_accessibilityLabel\&quot;.localized`   - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;example of informative icon - edition\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_settings_accessibilityLabel\&quot;.localized`    "
});

documentTitles["criteria-ios.html#colors"] = "Colors";
index.add({
    url: "criteria-ios.html#colors",
    title: "Colors",    
    body: "## Colors  ** Target: ** everyone, especially people with visual impairments, elderly people and people with vision problems (color blindness, vision contrasts etc.)   ** When: ** from the design phase and during development.  **Description: **  Colors have a very important role in the transmission of information. Some colors are associated with concepts or feelings but we must never forget the part of the population that does not correctly distinguish colors.  **Checklist: **  - Do not use color as the only way of conveying information, indicating an action, requesting a response or distinguishing an element. - The contrast between the color of the background and the text must be at least 7:1 and 4.5:1 for large font (can be measured with the color contrast analyzer tool).  **Users' goal: **   Ease of reading for all users especially the visually impaired, or people in a very bright environment (outdoors). Allow users not distinguishing colors or sensory information (color blind, visually impaired, hearing impaired, mobile users in bright environment or in noisy environments...), access the same information by other means.  ** Tools: ** The [color contrast analyzer](http://www.paciellogroup.com/resources/contrastanalyser/) application can quickly measure color contrast levels (free for Windows and Mac).    ** Example of invalid contrast **   The label \&quot;film | 8:40 PM ...\&quot; does not have enough contrast. It will not be readable by all users.    ![screenshot showing text with poor contrast](images/contraste.png)  ** Example of information passing through the valid and invalid color: **   &lt;img src=\&quot;./images/couleur_ios.png\&quot; alt=\&quot;example of information passing through the valid and invalid color\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-ios.html#alternative-text"] = "Alternative text";
index.add({
    url: "criteria-ios.html#alternative-text",
    title: "Alternative text",    
    body: "## Alternative text  ** Target: ** everyone and especially people with visual impairments.   ** When: ** from design, content writing and during development.  **Description: **  Text alternatives are at the core of mobile accessibility. Thanks to them, a visually impaired user can use an application without loss of information.    As for the images, it is important to add a text alternative when information is not available for the visually impaired/blind. This is the case of components that provide information by color, shape, position, sound... On mobile, all components can have a text alternative, it is possible to enrich the native vocalization of an element, including a simple text.    Space on mobile is reduced, we often use abbreviations for text. But However, this raises an issue for voice synthesis users that vocalize abbreviations as is. To correct these vocalizations, simply place a text alternative on the text. This alternative contains the unshorten text. Note that VoiceOver can recognize some common abbreviations. For example, \&quot;etc.\&quot; is vocalized \&quot;etcetera\&quot;.    Some images are regularly associated with text to give information. This is the case of \&quot;unread messages\&quot; when a badge shows the number of messages to read and which describes a \&quot;message\&quot;. In this case, the solution is to set a text alternative on the text that gives all the necessary information. For example: \&quot;3 unread messages\&quot;. One can also set this alternative on the images but in this case we must make the text \&quot;invisible\&quot; to the screen reader.  The text alternative of an element is set via the `accessibilityLabel, accessibilityHint, accessibilityValue` and `accessibilityTrait` (using the `UIAccessibility` protocole available on any children of `UIView`).   The order of vocalization is as follows: label, value, trait and hint. This order cannot be changed and vocalization is done only once.   For more technical information on these attributes, please refer to the [textual alternatives on the developer guide](./dev-ios.html#alternatives-textuelles).  **Checklist: **  - The elements that require alternative should have one - The alternative text must be clear and understandable  **Users' goal: **  Provide access to application information to screen reader users.  ** Example: **  Below is a common example of an icon that is associated with a text (badge) to add information. In our case, the icon \&quot;mail\&quot; associated with the \&quot;3\&quot; in the badge makes us understand that we have \&quot;3 unread mails\&quot;. If no text alternative is added, two vocalizations will be read \&quot;unlabeled button\&quot; and \&quot;3\&quot;. It is obvious that we must add text alternatives. &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;icon example coupled with the text that requires a text alternative\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;cell.mailImageView.accessibilityLabel = cell.badgeLabel.text! + \&quot; \&quot; + \&quot;exemple_textualAlternative_textImage_accessibilityLabel\&quot;.localized //We add the complete alternative cell.badgeLabel.isAccessibilityElemement = false //The text is hidden to avoid information redundancy &lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-ios.html#title-and-header"] = "Title and header";
index.add({
    url: "criteria-ios.html#title-and-header",
    title: "Title and header",    
    body: "## Title and header  ** Target: ** everyone   ** When: ** from design and during content writing.  **Description: **   The page title is the first element vocalized or seen on a screen mobile. It makes the navigation easier for everyone: at any time, we know where we are in the application.   A common mistake is to set a unique title for every page of an application (or even no title at all).  iOS headers allow structuring pages providing additional information. This information is useful to the accessibility API because VoiceOver can navigate through the headers (VoiceOver wheel, header mode). This allows the user to browse the page faster. To set an item as a header, set the `accessibilityTraits` attribute on the `accessibilityTraitHeader` value.  **Checklist: **   - Each screen must have its own title allowing use know where we are in the application navigation (with the back button) - The elements identified as headers must be declared as headers for assistive tools  **Users' goal: **  Allow users to identify the topic of a page, to locate and get a clear idea of ​​the content of the page without having to read it. Ease the navigation.  ** Invalid example: **  &lt;img src=\&quot;./images/header_ios.png\&quot; alt=\&quot;example of irrelevant title (no title)\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-ios.html#element-states"] = "Element states";
index.add({
    url: "criteria-ios.html#element-states",
    title: "Element states",    
    body: "## Element states  ** Target: ** everyone and especially people with visual impairments.   ** When: ** during development.  **Description: **  If an element does not vocalize its status, nature or state, the VoiceOver user is unable to understand what is happening on the screen. Not specifying that a view is unfolded or that we have tabs are very common examples.    By default, tabs in iOS are accessible. Meanwhile, it is very common to customize the tabs look and feel, so it is the developer's responsibility to provide the tab state and nature to the user via the corresponding accessibility attributes. An example is available in the \&quot;standards components\&quot; section.    Another common mistake is when elements do not vocalize their state: the expandable views. Again, thanks to the text alternative title of the view, we can vocalize the state of the view to the VoiceOver users.    To set this kind of information, use the `accessibilityLabel` and `accessibilityTrait` attributes.  **Checklist: **  - Any item whose status changes when using the application must vocalize its status through its text alternative. For example, an item that can be selected/unselected must vocalize its state through a text alternative.  **Users' goal: **  Allow screen reader users to access component information, their status, their nature so they can use them without any difficulties.  ** Example: **  &lt;img src=\&quot;./images/expandable_list.png\&quot; alt=\&quot;example of an exandable list that needs text alternative\&quot; width=\&quot;250\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;if(accessibleIsFold) {    accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_open_accessibilityHint\&quot;.localized //\&quot;Click here to open the view\&quot; }else{   accordionHeaderView.accessibilityHint = \&quot;example_elementState_foldArea_close_accessibilityHint\&quot;.localized //\&quot;Click here to close the view\&quot; }&lt;/code&gt;&lt;/pre&gt;     "
});

documentTitles["criteria-ios.html#standard-components"] = "Standard components";
index.add({
    url: "criteria-ios.html#standard-components",
    title: "Standard components",    
    body: "## Standard components  ** Target: ** everyone.   ** When: ** when choosing the libraries and during development.  **Description: **  Accessibility is (mostly) handled in the native components. Additionally, the use of standard components allows the user to be in a situation or behavior that he is already used to. Navigation through a standard interface is more comfortable.    Use native components as much as possible by changing their appearance. If no standard component corresponds to the need, create a dedicated component based on a standard component while keeping the consistency / accessibility consistency.  **Users' goal: **  Improve user navigation.  ** Technical Objective: **  Improve overall maintainability. Reduce development time.     "
});

documentTitles["criteria-ios.html#touch-target"] = "Touch target";
index.add({
    url: "criteria-ios.html#touch-target",
    title: "Touch target",    
    body: "## Touch target  ** Target: ** for everyone and especially people with motor impairments   ** When: ** from the design and during development.  **Description: **    If a touch target of a component is too small, it can prevent some users to enjoy the application. This can lead to frustration that can result uninstalling it. Each clickable element must have a touch target large enough.  **Checklist: **  - 44 pt is the recommended touch target size for on screen elements according to Apple (height and width); more information on the Apple guidelines [here](https://developer.apple.com/ios/human-interface-guidelines/visual-design/layout/).  **Users' goal: **  Improve user experience.  ** Do: **  In the examples below, the black box corresponds to the size of the interactive area.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;interactive component example with a fairly large touch target\&quot; width=\&quot;300\&quot;&gt;  ** Don't: **  &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;interactive component example with a small touch target\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-ios.html#ghost-element"] = "Ghost element";
index.add({
    url: "criteria-ios.html#ghost-element",
    title: "Ghost element",    
    body: "## Ghost element  ** Target: ** people with visual impairments.   ** When: ** during development.  **Description: **    Although invisible to the screen, some elements can be vocalized by the screen reader (elements positioned outside the visible area or hidden by other elements). The superposition of screens is something current when designing mobile apps but it generates very heavy accessibility problems if it is not done properly from the start. A screen reader such as VoiceOver is able to read information from a view that is placed \&quot;under\&quot; another. But if the user is able to interact with this view, it disturbs totally navigation and it quickly becomes impossible.    Ghost elements are very common when creating custom alert dialogs. Although, this kind of component can be accessible. Please refer to the [corresponding section on the developer guide](./dev-ios.html#masquer-des-l-ments-l-accessibilit-)     Read the article on the [use of fragments](https://developer.android.com/guide/components/fragments.html) for more information.  **Checklist: **  - With the screen reader, there is no invisible reachable element or that should not take focus when reading a page.  **Users' goal: **  Allow screen reader users to navigate within the application without having hidden elements disturbing the reading of the current view.   ** Don't: **  In the example below, the custom alert dialog has a ghost element. When VoiceOver is activated it vocalizes the content behind the current view (shown in black). &lt;img src=\&quot;./images/ghost_ios.png\&quot; alt=\&quot;ghost element example\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-ios.html#content-control"] = "Content Control";
index.add({
    url: "criteria-ios.html#content-control",
    title: "Content Control",    
    body: "## Content Control  ** Target: ** everyone and especially people with visual and cognitive deficiency.   ** When: ** when design and during development.  **Description: **  On mobile, screen readers try to notify the user when there is a context change. In some cases, it can give constant vocalizations, and therefore inaudible, or prevent any user action. The user must control the content at any time. This is especially true with interactive content. So avoid video player launching directly in full screen mode, or videos starting automatically without user action, or a carousel scrolling automatically etc.  **Checklist: **  - All interactive content must be controlled by the user (pausing a carousel, adding an accessible button to exit full-screen mode etc).  **Users' goal: **  Allow users to keep control on the application. Allow the screen reader user to avoid noise pollution which may affect navigation.  ** Technical Objective: **  Improve the natural referencing.   "
});

documentTitles["criteria-ios.html#changing-content"] = "Changing content";
index.add({
    url: "criteria-ios.html#changing-content",
    title: "Changing content",    
    body: "## Changing content  ** Target: ** everyone and especially people with visual impairments.   ** When: ** during development.  **Description: **  When content is dynamically modified after a user action, the screen reader must notify it. Without any voice feedback, the user does not know that the content has changed.   If the content has changed dynamically after a user action, it is important that the screen reader is notified so that it triggers a vocalization. E.g. refreshing a list or a timer.  To start a vocalization, one must send a notification to the accessibility API via the `UIAccessibilityPostNotification` method with the `UIAccessibilityAnnouncementNotification` notification in parameter and the text to vocalize.  It is also recommended to notify the Accessibility API when there is a change of context. To do that, one must send a notification to the accessibility API via the `UIAccessibilityPostNotification`.   There are several types of notification, but the two most used are:   - `UIAccessibilityLayoutChangedNotification`: notify that a part of the content has changed. - `UIAccessibilityScreenChangedNotification`: notify a global change.  For more technical information, please check out the corresponding section on the[ developer guide for iOS](./dev-ios.html#informer-d-une-modification-sur-la-page).  **Checklist: **  - With a screen reader, ensure that dynamic changes are vocalized.  **Users' goal: **  Provide access to changing content to screen reader users.   "
});

documentTitles["criteria-ios.html#horizontal-scroll"] = "Horizontal scroll";
index.add({
    url: "criteria-ios.html#horizontal-scroll",
    title: "Horizontal scroll",    
    body: "## Horizontal scroll  ** Target: ** everyone and especially people with visual impairments.   ** When: ** from design and during development.  **Description: **  A horizontal scroll can be very difficult to detect if no visual feedback is displayed to help the user understand that there are several pages. Do not hesitate to display a view to indicate a horizontal scroll (dots on `UIPageControl` for example). When necessary, also add \&quot;next\&quot; and \&quot;previous\&quot; buttons.  **Checklist: **  - The horizontal scrolls are visually indicated - It should be possible to switch pages for screen reader users.  **Users' goal: **  Provide a visual indication to users when there is horizontal scroll. Allow screen reader users to scroll horizontally.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; ** Do: **  &lt;img src=\&quot;./images/scroll_ios_h1.png\&quot; alt=\&quot;Example available horizontal scroll\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; ** Don't: **  &lt;img src=\&quot;./images/scroll_ios_h2.png\&quot; alt=\&quot;example of invalid horizontal scroll\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-ios.html#form"] = "Form";
index.add({
    url: "criteria-ios.html#form",
    title: "Form",    
    body: "## Form  ** Target: ** everyone and especially people with visual impairments.   ** When: ** from design and during development.  **Description: **  Binding the form fields with their labels provides an additional vocalization allowing the user to understand what happens when filling out a form field.    We must use the `accessibilityLabel` attribute to associate a label to a form field.  **Checklist: **  - Form fields must vocalize their labels.  **Users' goal: **  Improve navigation by improving the overall understanding of the page, the form fields describing the expected input.   "
});

documentTitles["criteria-ios.html#reading-order"] = "Reading order";
index.add({
    url: "criteria-ios.html#reading-order",
    title: "Reading order",    
    body: "## Reading order  ** Target: ** people with visual impairments.   ** When: ** during development.  **Description: **  The reading order allows the screen reader user to locate the navigation and ensuring functional coherence. It is therefore important to pay attention to it.    By default, the reading order of voice synthesis depends on the 'logical' reading (in France), from left to right and top to bottom. However, there are some cases where the screen reader cannot determine the correct order, and uses the order of xml elements definition leading to inconsistent vocalizations.    It is possible to redefine the VoiceOver reading order using the [`UIAccessibilityContainer`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibilityContainer_Protocol/). The reading order is defined in a table. It is often useful to use the `shouldGroupAccessibilityElement` attribute to have a correct reading order in a sub-part of the page.    **Checklist: **  - Traversal order (VoiceOver) is logical and coherent.  **Users' goal: **  Ensure logic order and coherent reading to screen reader users.  ** Example: ** In this example, the default playback order depends completely on the implementation and on the order of element declaration. In this case: `vol+, vol-, 1, 2, 3, 4, 5, 6, 7, 8, 9, p+, p-, 0`. A more consistent reading order is `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol +, vol-, p + p-`.  &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;Example of reading order\&quot; width=\&quot;300\&quot;&gt; &lt;pre&gt;&lt;code&gt;remoteView.isAccessibilityElement = false remoteView.shouldGroupAccessibilityChildren = true remoteView.accessibilityElements = [] remoteView.accessibilityElements?.append(oneButton) remoteView.accessibilityElements?.append(twoButton) remoteView.accessibilityElements?.append(threeButton) remoteView.accessibilityElements?.append(fourButton) [...]&lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-ios.html#language"] = "Language";
index.add({
    url: "criteria-ios.html#language",
    title: "Language",    
    body: "## Language  **Target : ** people with visual impairments.   **When: ** during development.  **Description: **  VoiceOver vocalization uses the default language of the mobile. Sometimes some words / texts of an application are in a different language. In order to make them audible, they have to be declared in that specific language.    To change VoiceOver language pronunciation of a word or a text, there is the `accessibilityLanguage` attribute. Available via the `UIAccessibility` protocol.  **Checklist: **  - The words / text in a different language than the rest of the application should be vocalized in their corresponding language  **Users' goal: **  Ensure the understanding of the application text.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["index.html#orange-mobile-accessibility-guidelines"] = "Orange mobile accessibility guidelines";
index.add({
    url: "index.html#orange-mobile-accessibility-guidelines",
    title: "Orange mobile accessibility guidelines",    
    body: "# Orange mobile accessibility guidelines  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Presentation\&quot;}]); });&lt;/script&gt;  *** The accessibility, a benefit for all, a need for some! ***  "
});

documentTitles["index.html#mobile-accessibility-definition"] = "Mobile accessibility definition";
index.add({
    url: "index.html#mobile-accessibility-definition",
    title: "Mobile accessibility definition",    
    body: "## Mobile accessibility definition ** It is an app service usable by everyone **  - Healthy person - Elderly people - People with disabilities (temporary or permanent)  ** and in all situations **  - With any kind of material: mobile browser, Android, iOS, tablet - In an unfavorable environment: poor luminosity, touchpad while moving, etc. - With specific software that compensate the handicap  "
});

documentTitles["index.html#site-organization"] = "Site organization";
index.add({
    url: "index.html#site-organization",
    title: "Site organization",    
    body: "## Site organization  "
});

documentTitles["index.html#essential-criteria"] = "Essential criteria";
index.add({
    url: "index.html#essential-criteria",
    title: "Essential criteria",    
    body: "### Essential criteria List of different accessibility criteria for obtaining an accessible mobile app (Android or iOS). A good way to be aware of the main criteria and commit progressively in accessibility.  "
});

documentTitles["index.html#criteria-for-developers"] = "Criteria for developers";
index.add({
    url: "index.html#criteria-for-developers",
    title: "Criteria for developers",    
    body: "### Criteria for developers Section for developers. Everything you need to know to code accessible on mobile, Android or iOS.  "
});

documentTitles["index.html#mdan"] = "mDAN";
index.add({
    url: "index.html#mdan",
    title: "mDAN",    
    body: "### mDAN mDAN application overview, the digital accessibility demonstrator for mobile. You will also find links to download the application (Android and iOS)  "
});

documentTitles["index.html#screen-reader"] = "Screen reader";
index.add({
    url: "index.html#screen-reader",
    title: "Screen reader",    
    body: "### Screen reader A simple guide to use the iOS and Android screen reader, respectively VoiceOver and TalkBack.  "
});

documentTitles["index.html#useful-links"] = "Useful links";
index.add({
    url: "index.html#useful-links",
    title: "Useful links",    
    body: "### Useful links Some useful links that will complete the explanation of this website. &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["mdan.html#mdan"] = "mDAN";
index.add({
    url: "mdan.html#mdan",
    title: "mDAN",    
    body: "# mDAN     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;mDAN\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;mdan\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["mdan.html#mdan-kesako"] = "mDAN, kesako?";
index.add({
    url: "mdan.html#mdan-kesako",
    title: "mDAN, kesako?",    
    body: "## mDAN, kesako?  mDAN is a mobile application (for Android and iOS) that showcases accessibility on a mobile device. Its objectives are: - accessibility presentation  - mobile accessibility criteria - guide for Developers - screen reader user guide (Talkback or VoiceOver) - presentation of accessibility - contact, etc.  "
});

documentTitles["mdan.html#mdan-yes-but-for-whom"] = "mDAN, yes, but for whom?";
index.add({
    url: "mdan.html#mdan-yes-but-for-whom",
    title: "mDAN, yes, but for whom?",    
    body: "## mDAN, yes, but for whom?  mDAN targets everybody interested or involved in accessibility:  - Testers: with the accessibility criteria and the screen reader user guide - Developers: with the development guide - Managers, designers, etc: for accessibility awareness  "
});

documentTitles["mdan.html#i-want-mdan"] = "I want mDAN!";
index.add({
    url: "mdan.html#i-want-mdan",
    title: "I want mDAN!",    
    body: "## I want mDAN!  [Source code is available on github](https://github.com/Orange-OpenSource/m-dan)  mDAN will be available soon on the play store and the app store.  You can already [download Android version](/mDAN_v2.2.0.apk)  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader.html#talkback-and-voiceover-guide"] = "TalkBack and VoiceOver guide";
index.add({
    url: "screen-reader.html#talkback-and-voiceover-guide",
    title: "TalkBack and VoiceOver guide",    
    body: "# TalkBack and VoiceOver guide  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Screen reader\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;talkback.html\&quot;},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;voiceover.html\&quot;}     ]);             });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  Through this section, we list the common gestures for Android and iOS screen readers. These assistive tools have a lot of functionalities but requires a minimum knowledge to be used effectively.  Two versions are available: - **TalkBack** built-in screen reader for Android. - **VoiceOver** built-in screen reader for iOS.  &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;TalkBack&lt;/h2&gt;               &lt;a href=\&quot;./talkback.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/android.png)         &lt;div&gt;TalkBack user guide&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt; &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;Voiceover&lt;/h2&gt;               &lt;a href=\&quot;./voiceover.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/iphone.png)         &lt;div&gt;VoiceOver user guide&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt;              &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["talkback.html#talkback-user-guide"] = "Talkback user guide";
index.add({
    url: "talkback.html#talkback-user-guide",
    title: "Talkback user guide",    
    body: "# Talkback user guide  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Screen reader\&quot;, \&quot;url\&quot;:\&quot;./screen-reader.html\&quot;}, {\&quot;label\&quot;:\&quot;Talkback user guide\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;screen-reader.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;voiceover.html\&quot;}     ]);                 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  TalkBack is a built-in screen reader for Android that reads aloud the items that appear on the device screen. It is free and vocalize all visible elements in the page specially for blind or partially sighted, dyslexic or illiterate user. A tool like TalkBack is called either screen reader or speech synthesizers, even if a screen reader is actually a software associated with voice synthesis.  When TalkBack is on, the standard gestures behave differently. Furthermore, additional gestures let you move the focus on the screen and control the selected items. TalkBack has gestures with one, two and three fingers to select and to go through elements. We describe here the basic gestures commonly used. Note: TalkBack is considered as accessible since the JellyBean release (4.1) because you can navigate sequentially.  First of all, update TalkBack here: [PlayStore Link](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback)  "
});

documentTitles["talkback.html#common-gestures"] = "Common gestures";
index.add({
    url: "talkback.html#common-gestures",
    title: "Common gestures",    
    body: "## Common gestures &lt;ul class=\&quot;list-gesture\&quot;&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;     &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;         &lt;h3&gt;Drag one finger&lt;/h3&gt;     &lt;p&gt;Explore your screen and hear audible feedback for what is being touched.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;         &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;     &lt;h3&gt;Double-tap anywhere on the screen&lt;/h3&gt;     &lt;p&gt;Opens or activates the item that you last touched (vocalized).&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture3_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture3_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Swipe up or down using two fingers&lt;/h3&gt;       &lt;p&gt;Scroll within lists or pages if selected. Equivalent to a vertical swipe.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture4_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture4_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Swipe left or right using two fingers&lt;/h3&gt;       &lt;p&gt;Change pages and screens when possible. Equivalent to a horizontal swipe.&lt;/p&gt;    &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Swipe right using one finger&lt;/h3&gt;       &lt;p&gt;Move the focus to the next item.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Swipe left using one finger.&lt;/h3&gt;       &lt;p&gt;Move the focus to the previous item.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;Swipe up or down using one finger&lt;/h3&gt;       &lt;p&gt;Cycle through navigation mode: \&quot;pages\&quot;, \&quot;by default (elements)\&quot;, \&quot;characters\&quot;, \&quot;words\&quot;, \&quot;lines\&quot; et \&quot;paragraphs\&quot;.&lt;/p&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;span class=\&quot;licence\&quot;&gt;These images are licensed under the Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  For more information about TalkBack and a detailed description of its features, please read the [Google's official documentation on TalkBack](https://support.google.com/accessibility/android/answer/6283677?ref_topic=3529932).  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["voiceover.html#voiceover-user-guide"] = "VoiceOver user guide";
index.add({
    url: "voiceover.html#voiceover-user-guide",
    title: "VoiceOver user guide",    
    body: "# VoiceOver user guide  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Screen reader\&quot;, \&quot;url\&quot;:\&quot;./screen-reader.html\&quot;},{\&quot;label\&quot;:\&quot;VoiceOver user guide\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Android guide\&quot;,\&quot;url\&quot;:\&quot;talkback.html\&quot;},          {\&quot;label\&quot;:\&quot;iOS guide\&quot;,\&quot;url\&quot;:\&quot;screen-reader.html\&quot;, \&quot;expanded\&quot;: true}     ]);             });&lt;/script&gt;  &lt;span data-menuitem=\&quot;screen-reader\&quot;&gt;&lt;/span&gt;  VoiceOver is a built-in screen reader that reads aloud the items that appear on the device screen. It is free and vocalize all visible elements in the page specially for blind or partially sighted, dyslexic or illiterate user. A tool like VoiceOver is called either screen reader or speech synthesizers, even if a screen reader is actually a software associated with voice synthesis.  When VoiceOver is on, the standard gestures behave differently. Furthermore, additional gestures let you move the focus on the screen and control the selected items. VoiceOver has gestures with one, two and three fingers to select and to go through elements. We describe here the basic gestures commonly used.  "
});

documentTitles["voiceover.html#common-gestures"] = "Common gestures";
index.add({
    url: "voiceover.html#common-gestures",
    title: "Common gestures",    
    body: "## Common gestures &lt;ul class=\&quot;list-gesture\&quot;&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Drag one finger&lt;/h3&gt;       &lt;p&gt;Explore your screen and hear audible feedback for what is being touched.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Double-tap anywhere on the screen&lt;/h3&gt;       &lt;p&gt;Opens or activates the item that you last touched (vocalized).&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture9_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture9_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Swipe up or down using three fingers&lt;/h3&gt;       &lt;p&gt;Scroll within lists or pages if selected. Equivalent to a vertical swipe.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;Swipe left or right using three fingers&lt;/h3&gt;       &lt;p&gt;Change pages and screens when possible. Equivalent to a horizontal swipe.&lt;/p&gt;    &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;           &lt;h3&gt;Swipe right using one finger&lt;/h3&gt;       &lt;p&gt;Move the focus to the next item.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;Swipe left using one finger.&lt;/h3&gt;       &lt;p&gt;Move the focus to the previous item.&lt;/p&gt;   &lt;/li&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;h3&gt;Swipe up or down using one finger&lt;/h3&gt;       &lt;p&gt;Performs or move to the selected rotor option&lt;/p&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;span class=\&quot;licence\&quot;&gt;These images are licensed under the Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  For more information about VoiceOver and a detailed description of its features, please read the [Apple's official documentation on VoiceOver](https://help.apple.com/iphone/9/#/iph3e2e415f).  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["links.html#useful-links"] = "Useful links";
index.add({
    url: "links.html#useful-links",
    title: "Useful links",    
    body: "# Useful links  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Useful links\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;links\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["links.html#going-further"] = "Going further";
index.add({
    url: "links.html#going-further",
    title: "Going further",    
    body: "## Going further You will find more detailed information on accessibility for iOS and Android on [the github repository of Disic](https://github.com/DISIC/guide-mobile_app_dev_natif) (Interministerial Directorate for Information and Communication Systems): - [Audit guide for mobile application](https://github.com/DISIC/guide-mobile_app_audit) - [Design guide for accessible mobile applications](https://github.com/DISIC/guide-mobile_app_conception) - [Guide for accessible hybrid mobile applications with Ionic and OnsenUI](https://github.com/DISIC/guide-mobile_app_dev_hybride)  "
});

documentTitles["links.html#for-android"] = "For Android";
index.add({
    url: "links.html#for-android",
    title: "For Android",    
    body: "## For Android Google and Android accessibility API: - [Google official documentation](https://developer.android.com/guide/topics/ui/accessibility/index.html)   - [Complete Talkback guide](https://support.google.com/accessibility/android/answer/6283677?ref_topic=3529932)  The AccessibilityScanner application allows you to test quickly and simply the accessibility of your apps: - [AccessibilityScanner application](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)   "
});

documentTitles["links.html#for-ios"] = "For iOS";
index.add({
    url: "links.html#for-ios",
    title: "For iOS",    
    body: "## For iOS Apple accessibility API: - [Official accessibility API documentation](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/iPhoneAccessibility/Introduction/Introduction.html) - [iOS accessibility features](http://www.apple.com/accessibility/) - [Apple official accessibility documentation](https://developer.apple.com/accessibility/ios/) - [VoiceOver user guide](https://help.apple.com/iphone/9/#/iph3e2e415f)   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});


